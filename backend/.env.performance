# Performance-Optimized Environment Configuration
# White Cross Healthcare Platform - Health Records Service
# Version: 2.0.0

# ==========================================
# DATABASE PERFORMANCE SETTINGS
# ==========================================

# Connection Pool Configuration
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_CONNECTION_TIMEOUT=60000
DB_IDLE_TIMEOUT=30000
DB_STATEMENT_TIMEOUT=60000

# Database URL (update with your credentials)
DATABASE_URL=postgresql://username:password@localhost:5432/whitecross?connection_limit=10&pool_timeout=60

# ==========================================
# REDIS CACHE CONFIGURATION
# ==========================================

# Redis Connection
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=your-secure-redis-password
REDIS_TLS_ENABLED=false  # Set to true in production

# Cache TTL Settings (seconds)
CACHE_TTL_SHORT=60        # 1 minute
CACHE_TTL_MEDIUM=300      # 5 minutes
CACHE_TTL_LONG=3600       # 1 hour
CACHE_TTL_VERY_LONG=86400 # 24 hours

# Redis Performance
REDIS_MAX_MEMORY=2gb
REDIS_EVICTION_POLICY=allkeys-lru

# ==========================================
# WORKER THREAD CONFIGURATION
# ==========================================

# Worker Pool Settings
WORKER_POOL_SIZE=4        # Number of worker threads (CPU cores - 1)
WORKER_TASK_TIMEOUT=30000 # Task timeout in milliseconds
WORKER_QUEUE_MAX_SIZE=1000

# ==========================================
# PERFORMANCE MONITORING
# ==========================================

# Enable Performance Features
ENABLE_PERFORMANCE_MONITORING=true
ENABLE_REDIS_CACHE=true
ENABLE_WORKER_THREADS=true
USE_OPTIMIZED_SERVICE=true

# Performance Thresholds (milliseconds)
SLOW_QUERY_THRESHOLD=1000      # Log queries slower than 1s
VERY_SLOW_QUERY_THRESHOLD=5000 # Alert on queries slower than 5s
CRITICAL_REQUEST_THRESHOLD=5000

# Metrics Buffer
METRICS_BUFFER_SIZE=1000
METRICS_WINDOW_MINUTES=5

# ==========================================
# APM & MONITORING INTEGRATION
# ==========================================

# Datadog (optional)
# DATADOG_API_KEY=your-datadog-api-key
# DATADOG_APP_KEY=your-datadog-app-key

# New Relic (optional)
# NEW_RELIC_LICENSE_KEY=your-new-relic-key
# NEW_RELIC_APP_NAME=white-cross-api

# Sentry (optional)
# SENTRY_DSN=your-sentry-dsn
# SENTRY_ENVIRONMENT=production

# Custom APM Webhook
# APM_WEBHOOK_URL=https://your-monitoring-service.com/webhook

# ==========================================
# SECURITY SETTINGS
# ==========================================

# Authentication
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_EXPIRES_IN=8h
BCRYPT_ROUNDS=12

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000    # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_MAX_LOGIN_ATTEMPTS=5

# CORS
CORS_ORIGIN=http://localhost:5173
CORS_CREDENTIALS=true

# ==========================================
# LOAD BALANCING & CLUSTERING
# ==========================================

# Node.js Clustering (if using cluster mode)
NODE_CLUSTER_ENABLED=false
NODE_CLUSTER_WORKERS=0  # 0 = auto (CPU cores)

# Load Balancer Settings
TRUST_PROXY=false  # Set to true behind load balancer
LB_HEALTH_CHECK_PATH=/health

# ==========================================
# LOGGING CONFIGURATION
# ==========================================

# Log Levels
LOG_LEVEL=info  # error, warn, info, http, debug
LOG_FILE=logs/app.log
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5

# Performance Logging
LOG_SLOW_QUERIES=true
LOG_CACHE_MISSES=false
LOG_WORKER_STATS=true

# ==========================================
# NODE.JS OPTIMIZATION
# ==========================================

# Node Environment
NODE_ENV=production
PORT=3001
HOST=0.0.0.0

# V8 Optimization Flags
NODE_OPTIONS=--max-old-space-size=2048 --optimize-for-size

# HTTP Settings
HTTP2_ENABLED=false
COMPRESSION_ENABLED=true
KEEP_ALIVE_TIMEOUT=65000

# ==========================================
# POSTGRESQL TUNING RECOMMENDATIONS
# ==========================================
# These should be set in postgresql.conf, not here
# Documented for reference:
#
# max_connections = 100
# shared_buffers = 256MB
# effective_cache_size = 1GB
# work_mem = 16MB
# maintenance_work_mem = 128MB
# random_page_cost = 1.1  # For SSD
# wal_buffers = 16MB
# checkpoint_completion_target = 0.9

# ==========================================
# FEATURE FLAGS
# ==========================================

# Optimization Features
ENABLE_QUERY_CACHING=true
ENABLE_RESULT_PAGINATION=true
ENABLE_BATCH_OPERATIONS=true
ENABLE_STREAM_EXPORT=true

# Advanced Features
ENABLE_FULL_TEXT_SEARCH=false  # Enable when Elasticsearch ready
ENABLE_READ_REPLICAS=false     # Enable when read replicas configured
ENABLE_DISTRIBUTED_TRACING=false

# ==========================================
# BACKUP & DISASTER RECOVERY
# ==========================================

BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # 2 AM daily
BACKUP_RETENTION_DAYS=30

# ==========================================
# DEVELOPMENT & TESTING
# ==========================================

# Debug Settings (disable in production)
ENABLE_DEBUG=false
ENABLE_HOT_RELOAD=false
MOCK_EXTERNAL_APIS=false
ENABLE_SWAGGER=true

# Testing
ENABLE_LOAD_TESTING=false
LOAD_TEST_DURATION=600  # 10 minutes

# ==========================================
# PERFORMANCE TARGETS (SLAs)
# ==========================================
# These are monitoring thresholds, not configuration

# Response Time Targets (milliseconds)
SLA_P50_TARGET=200
SLA_P95_TARGET=500
SLA_P99_TARGET=1000

# Reliability Targets
SLA_ERROR_RATE_MAX=1.0     # Max 1% error rate
SLA_CACHE_HIT_RATE_MIN=80  # Min 80% cache hit rate
SLA_UPTIME_TARGET=99.9     # 99.9% uptime

# ==========================================
# NOTES
# ==========================================
# 1. Update REDIS_PASSWORD before production deployment
# 2. Update JWT_SECRET before production deployment
# 3. Configure TLS for Redis in production (REDIS_TLS_ENABLED=true)
# 4. Enable APM integration for production monitoring
# 5. Review and adjust worker pool size based on server CPU cores
# 6. Test cache TTL settings with actual usage patterns
# 7. Adjust database pool size based on concurrent user load
