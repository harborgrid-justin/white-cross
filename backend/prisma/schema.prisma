generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(NURSE)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nurseManagedStudents Student[] @relation("NurseStudents")
  incidentReports      IncidentReport[]
  medicationLogs       MedicationLog[]
  appointments         Appointment[]
  inventoryTransactions InventoryTransaction[]
  maintenanceLogs      MaintenanceLog[]
  messageTemplates     MessageTemplate[] @relation("MessageTemplateCreator")
  messages             Message[] @relation("MessageSender")
  
  @@map("users")
}

model Student {
  id                String    @id @default(cuid())
  studentNumber     String    @unique
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  grade             String
  gender            Gender
  photo             String?
  medicalRecordNum  String?   @unique
  isActive          Boolean   @default(true)
  enrollmentDate    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  nurse                User?           @relation("NurseStudents", fields: [nurseId], references: [id])
  nurseId              String?
  emergencyContacts    EmergencyContact[]
  medications          StudentMedication[]
  healthRecords        HealthRecord[]
  appointments         Appointment[]
  incidentReports      IncidentReport[]
  allergies            Allergy[]
  
  @@map("students")
}

model EmergencyContact {
  id           String            @id @default(cuid())
  firstName    String
  lastName     String
  relationship String
  phoneNumber  String
  email        String?
  address      String?
  priority     ContactPriority   @default(PRIMARY)
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  student      Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  
  @@map("emergency_contacts")
}

model Medication {
  id              String    @id @default(cuid())
  name            String
  genericName     String?
  dosageForm      String
  strength        String
  manufacturer    String?
  ndc             String?   @unique
  isControlled    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  studentMedications StudentMedication[]
  inventory          MedicationInventory[]
  
  @@map("medications")
}

model StudentMedication {
  id              String    @id @default(cuid())
  dosage          String
  frequency       String
  route           String
  instructions    String?
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean   @default(true)
  prescribedBy    String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  student         Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  medication      Medication      @relation(fields: [medicationId], references: [id])
  medicationId    String
  logs            MedicationLog[]
  
  @@map("student_medications")
}

model MedicationLog {
  id                    String    @id @default(cuid())
  dosageGiven           String
  timeGiven             DateTime
  administeredBy        String
  notes                 String?
  sideEffects           String?
  createdAt             DateTime  @default(now())

  // Relations
  studentMedication     StudentMedication @relation(fields: [studentMedicationId], references: [id])
  studentMedicationId   String
  nurse                 User      @relation(fields: [nurseId], references: [id])
  nurseId               String
  
  @@map("medication_logs")
}

model MedicationInventory {
  id              String    @id @default(cuid())
  batchNumber     String
  expirationDate  DateTime
  quantity        Int
  reorderLevel    Int       @default(10)
  costPerUnit     Decimal?
  supplier        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  medication      Medication @relation(fields: [medicationId], references: [id])
  medicationId    String
  
  @@map("medication_inventory")
}

model InventoryItem {
  id              String    @id @default(cuid())
  name            String
  category        String
  description     String?
  sku             String?   @unique
  supplier        String?
  unitCost        Decimal?
  reorderLevel    Int       @default(10)
  reorderQuantity Int       @default(50)
  location        String?
  notes           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  transactions    InventoryTransaction[]
  maintenanceLogs MaintenanceLog[]
  
  @@map("inventory_items")
}

model InventoryTransaction {
  id              String    @id @default(cuid())
  type            InventoryTransactionType
  quantity        Int
  unitCost        Decimal?
  reason          String?
  batchNumber     String?
  expirationDate  DateTime?
  notes           String?
  createdAt       DateTime  @default(now())

  // Relations
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  performedBy     User      @relation(fields: [performedById], references: [id])
  performedById   String
  
  @@map("inventory_transactions")
}

model MaintenanceLog {
  id                  String            @id @default(cuid())
  type                MaintenanceType
  description         String
  cost                Decimal?
  nextMaintenanceDate DateTime?
  vendor              String?
  notes               String?
  createdAt           DateTime          @default(now())

  // Relations
  inventoryItem       InventoryItem     @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId     String
  performedBy         User              @relation(fields: [performedById], references: [id])
  performedById       String
  
  @@map("maintenance_logs")
}

model Vendor {
  id                String    @id @default(cuid())
  name              String
  contactName       String?
  email             String?
  phone             String?
  address           String?
  website           String?
  taxId             String?
  paymentTerms      String?
  notes             String?
  isActive          Boolean   @default(true)
  rating            Int?      // 1-5 rating
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  purchaseOrders    PurchaseOrder[]
  
  @@map("vendors")
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  orderNumber     String              @unique
  status          PurchaseOrderStatus @default(PENDING)
  orderDate       DateTime            @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  subtotal        Decimal             @default(0)
  tax             Decimal             @default(0)
  shipping        Decimal             @default(0)
  total           Decimal             @default(0)
  notes           String?
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  items           PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitCost        Decimal
  totalCost       Decimal
  receivedQty     Int           @default(0)
  notes           String?
  createdAt       DateTime      @default(now())

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String
  inventoryItemId String
  
  @@map("purchase_order_items")
}

model BudgetCategory {
  id              String    @id @default(cuid())
  name            String
  description     String?
  fiscalYear      Int
  allocatedAmount Decimal
  spentAmount     Decimal   @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  transactions    BudgetTransaction[]
  
  @@map("budget_categories")
}

model BudgetTransaction {
  id              String    @id @default(cuid())
  amount          Decimal
  description     String
  transactionDate DateTime  @default(now())
  referenceId     String?   // Link to purchase order or other transaction
  referenceType   String?   // 'PURCHASE_ORDER', 'INVENTORY_TRANSACTION', etc.
  notes           String?
  createdAt       DateTime  @default(now())

  // Relations
  category        BudgetCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  
  @@map("budget_transactions")
}

model MessageTemplate {
  id          String    @id @default(cuid())
  name        String
  subject     String?
  content     String
  type        MessageType
  category    MessageCategory
  variables   String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("MessageTemplateCreator", fields: [createdById], references: [id])
  createdById String
  messages    Message[]
  
  @@map("message_templates")
}

model Message {
  id             String    @id @default(cuid())
  subject        String?
  content        String
  priority       MessagePriority
  category       MessageCategory
  recipientCount Int       @default(0)
  scheduledAt    DateTime?
  attachments    String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  sender         User              @relation("MessageSender", fields: [senderId], references: [id])
  senderId       String
  template       MessageTemplate?  @relation(fields: [templateId], references: [id])
  templateId     String?
  deliveries     MessageDelivery[]
  
  @@map("messages")
}

model MessageDelivery {
  id              String    @id @default(cuid())
  recipientType   RecipientType
  recipientId     String
  channel         MessageType
  status          DeliveryStatus
  contactInfo     String?
  sentAt          DateTime?
  deliveredAt     DateTime?
  failureReason   String?
  externalId      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  message         Message   @relation(fields: [messageId], references: [id])
  messageId       String
  
  @@map("message_deliveries")
}

model HealthRecord {
  id          String           @id @default(cuid())
  type        HealthRecordType
  date        DateTime
  description String
  vital       Json?            // Store vitals as JSON
  provider    String?
  notes       String?
  attachments String[]         // Array of file URLs
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  
  @@map("health_records")
}

model Allergy {
  id          String        @id @default(cuid())
  allergen    String
  severity    AllergySeverity
  reaction    String?
  treatment   String?
  verified    Boolean       @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  student     Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  
  @@map("allergies")
}

model Appointment {
  id          String            @id @default(cuid())
  type        AppointmentType
  scheduledAt DateTime
  duration    Int               @default(30) // minutes
  status      AppointmentStatus @default(SCHEDULED)
  reason      String
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  student     Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  nurse       User              @relation(fields: [nurseId], references: [id])
  nurseId     String
  
  @@map("appointments")
}

model IncidentReport {
  id              String            @id @default(cuid())
  type            IncidentType
  severity        IncidentSeverity
  description     String
  location        String
  witnesses       String[]
  actionsTaken    String
  parentNotified  Boolean           @default(false)
  followUpRequired Boolean          @default(false)
  followUpNotes   String?
  attachments     String[]          // Array of file URLs
  occurredAt      DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  student         Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  reportedBy      User              @relation(fields: [reportedById], references: [id])
  reportedById    String
  
  @@map("incident_reports")
}

// Enums
enum UserRole {
  ADMIN
  NURSE
  SCHOOL_ADMIN
  DISTRICT_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ContactPriority {
  PRIMARY
  SECONDARY
  EMERGENCY_ONLY
}

enum HealthRecordType {
  CHECKUP
  VACCINATION
  ILLNESS
  INJURY
  SCREENING
  PHYSICAL_EXAM
  MENTAL_HEALTH
  DENTAL
  VISION
  HEARING
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
  LIFE_THREATENING
}

enum AppointmentType {
  ROUTINE_CHECKUP
  MEDICATION_ADMINISTRATION
  INJURY_ASSESSMENT
  ILLNESS_EVALUATION
  FOLLOW_UP
  SCREENING
  EMERGENCY
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum IncidentType {
  INJURY
  ILLNESS
  BEHAVIORAL
  MEDICATION_ERROR
  ALLERGIC_REACTION
  EMERGENCY
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InventoryTransactionType {
  PURCHASE
  USAGE
  ADJUSTMENT
  TRANSFER
  DISPOSAL
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  CALIBRATION
  INSPECTION
  CLEANING
}

enum MessageType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  VOICE
}

enum MessageCategory {
  EMERGENCY
  HEALTH_UPDATE
  APPOINTMENT_REMINDER
  MEDICATION_REMINDER
  GENERAL
  INCIDENT_NOTIFICATION
  COMPLIANCE
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecipientType {
  STUDENT
  EMERGENCY_CONTACT
  PARENT
  NURSE
  ADMIN
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}