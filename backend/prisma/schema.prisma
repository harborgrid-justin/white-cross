generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      UserRole  @default(NURSE)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  nurseManagedStudents  Student[]              @relation("NurseStudents")
  incidentReports       IncidentReport[]
  medicationLogs        MedicationLog[]
  appointments          Appointment[]
  inventoryTransactions InventoryTransaction[]

  maintenanceLogs      MaintenanceLog[]
  messageTemplates     MessageTemplate[] @relation("MessageTemplateCreator")
  messages             Message[] @relation("MessageSender")
  availability         NurseAvailability[] @relation("NurseAvailability")
  waitlistEntries      AppointmentWaitlist[] @relation("WaitlistNurse")
  
  @@map("users")
}

model Student {
  id               String   @id @default(cuid())
  studentNumber    String   @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  grade            String
  gender           Gender
  photo            String?
  medicalRecordNum String?  @unique
  isActive         Boolean  @default(true)
  enrollmentDate   DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  nurse                User?           @relation("NurseStudents", fields: [nurseId], references: [id])
  nurseId              String?
  emergencyContacts    EmergencyContact[]
  medications          StudentMedication[]
  healthRecords        HealthRecord[]
  appointments         Appointment[]
  incidentReports      IncidentReport[]
  allergies            Allergy[]
  chronicConditions    ChronicCondition[]
  waitlistEntries      AppointmentWaitlist[]

  @@map("students")
}

model EmergencyContact {
  id           String          @id @default(cuid())
  firstName    String
  lastName     String
  relationship String
  phoneNumber  String
  email        String?
  address      String?
  priority     ContactPriority @default(PRIMARY)
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@map("emergency_contacts")
}

model Medication {
  id           String   @id @default(cuid())
  name         String
  genericName  String?
  dosageForm   String
  strength     String
  manufacturer String?
  ndc          String?  @unique
  isControlled Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  studentMedications StudentMedication[]
  inventory          MedicationInventory[]

  @@map("medications")
}

model StudentMedication {
  id           String    @id @default(cuid())
  dosage       String
  frequency    String
  route        String
  instructions String?
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean   @default(true)
  prescribedBy String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  student      Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  medication   Medication      @relation(fields: [medicationId], references: [id])
  medicationId String
  logs         MedicationLog[]

  @@map("student_medications")
}

model MedicationLog {
  id             String   @id @default(cuid())
  dosageGiven    String
  timeGiven      DateTime
  administeredBy String
  notes          String?
  sideEffects    String?
  createdAt      DateTime @default(now())

  // Relations
  studentMedication   StudentMedication @relation(fields: [studentMedicationId], references: [id])
  studentMedicationId String
  nurse               User              @relation(fields: [nurseId], references: [id])
  nurseId             String

  @@map("medication_logs")
}

model MedicationInventory {
  id             String   @id @default(cuid())
  batchNumber    String
  expirationDate DateTime
  quantity       Int
  reorderLevel   Int      @default(10)
  costPerUnit    Decimal?
  supplier       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String

  @@map("medication_inventory")
}

model InventoryItem {
  id              String   @id @default(cuid())
  name            String
  category        String
  description     String?
  sku             String?  @unique
  supplier        String?
  unitCost        Decimal?
  reorderLevel    Int      @default(10)
  reorderQuantity Int      @default(50)
  location        String?
  notes           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  transactions    InventoryTransaction[]
  maintenanceLogs MaintenanceLog[]

  @@map("inventory_items")
}

model InventoryTransaction {
  id             String                   @id @default(cuid())
  type           InventoryTransactionType
  quantity       Int
  unitCost       Decimal?
  reason         String?
  batchNumber    String?
  expirationDate DateTime?
  notes          String?
  createdAt      DateTime                 @default(now())

  // Relations
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  performedBy     User          @relation(fields: [performedById], references: [id])
  performedById   String

  @@map("inventory_transactions")
}

model MaintenanceLog {
  id                  String          @id @default(cuid())
  type                MaintenanceType
  description         String
  cost                Decimal?
  nextMaintenanceDate DateTime?
  vendor              String?
  notes               String?
  createdAt           DateTime        @default(now())

  // Relations
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  performedBy     User          @relation(fields: [performedById], references: [id])
  performedById   String

  @@map("maintenance_logs")
}

model Vendor {
  id                String    @id @default(cuid())
  name              String
  contactName       String?
  email             String?
  phone             String?
  address           String?
  website           String?
  taxId             String?
  paymentTerms      String?
  notes             String?
  isActive          Boolean   @default(true)
  rating            Int?      // 1-5 rating
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  purchaseOrders    PurchaseOrder[]
  
  @@map("vendors")
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  orderNumber     String              @unique
  status          PurchaseOrderStatus @default(PENDING)
  orderDate       DateTime            @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  subtotal        Decimal             @default(0)
  tax             Decimal             @default(0)
  shipping        Decimal             @default(0)
  total           Decimal             @default(0)
  notes           String?
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  items           PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  quantity        Int
  unitCost        Decimal
  totalCost       Decimal
  receivedQty     Int           @default(0)
  notes           String?
  createdAt       DateTime      @default(now())

  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String
  inventoryItemId String
  
  @@map("purchase_order_items")
}

model BudgetCategory {
  id              String    @id @default(cuid())
  name            String
  description     String?
  fiscalYear      Int
  allocatedAmount Decimal
  spentAmount     Decimal   @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  transactions    BudgetTransaction[]
  
  @@map("budget_categories")
}

model BudgetTransaction {
  id              String    @id @default(cuid())
  amount          Decimal
  description     String
  transactionDate DateTime  @default(now())
  referenceId     String?   // Link to purchase order or other transaction
  referenceType   String?   // 'PURCHASE_ORDER', 'INVENTORY_TRANSACTION', etc.
  notes           String?
  createdAt       DateTime  @default(now())

  // Relations
  category        BudgetCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  
  @@map("budget_transactions")
}

model MessageTemplate {
  id        String          @id @default(cuid())
  name      String
  subject   String?
  content   String
  type      MessageType
  category  MessageCategory
  variables String[]
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  createdBy   User      @relation("MessageTemplateCreator", fields: [createdById], references: [id])
  createdById String
  messages    Message[]

  @@map("message_templates")
}

model Message {
  id             String          @id @default(cuid())
  subject        String?
  content        String
  priority       MessagePriority
  category       MessageCategory
  recipientCount Int             @default(0)
  scheduledAt    DateTime?
  attachments    String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  sender     User              @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  template   MessageTemplate?  @relation(fields: [templateId], references: [id])
  templateId String?
  deliveries MessageDelivery[]

  @@map("messages")
}

model MessageDelivery {
  id            String         @id @default(cuid())
  recipientType RecipientType
  recipientId   String
  channel       MessageType
  status        DeliveryStatus
  contactInfo   String?
  sentAt        DateTime?
  deliveredAt   DateTime?
  failureReason String?
  externalId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  @@map("message_deliveries")
}

model HealthRecord {
  id          String           @id @default(cuid())
  type        HealthRecordType
  date        DateTime
  description String
  vital       Json? // Store vitals as JSON
  provider    String?
  notes       String?
  attachments String[] // Array of file URLs
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@map("health_records")
}

model Allergy {
  id         String          @id @default(cuid())
  allergen   String
  severity   AllergySeverity
  reaction   String?
  treatment  String?
  verified   Boolean         @default(false)
  verifiedBy String?
  verifiedAt DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@map("allergies")
}

model ChronicCondition {
  id            String   @id @default(cuid())
  condition     String
  diagnosedDate DateTime
  status        String   @default("ACTIVE") // ACTIVE, MANAGED, RESOLVED
  severity      String? // MILD, MODERATE, SEVERE
  notes         String?
  carePlan      String?
  medications   String[] // Related medications
  restrictions  String[] // Activity/dietary restrictions
  triggers      String[] // Known triggers
  diagnosedBy   String?
  lastReviewDate DateTime?
  nextReviewDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  @@map("chronic_conditions")
}

model Appointment {
  id          String            @id @default(cuid())
  type        AppointmentType
  scheduledAt DateTime
  duration    Int               @default(30) // minutes
  status      AppointmentStatus @default(SCHEDULED)
  reason      String
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations

  student     Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  nurse       User              @relation(fields: [nurseId], references: [id])
  nurseId     String
  reminders   AppointmentReminder[]
 
  @@map("appointments")
}

model NurseAvailability {
  id          String   @id @default(cuid())
  dayOfWeek   Int      // 0=Sunday, 1=Monday, etc.
  startTime   String   // Format: "HH:MM"
  endTime     String   // Format: "HH:MM"
  isRecurring Boolean  @default(true)
  specificDate DateTime? // For non-recurring availability
  isAvailable Boolean  @default(true)
  reason      String?  // Reason for unavailability
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nurse       User     @relation("NurseAvailability", fields: [nurseId], references: [id])
  nurseId     String
  
  @@map("nurse_availability")
}

model AppointmentWaitlist {
  id          String            @id @default(cuid())
  type        AppointmentType
  preferredDate DateTime?
  duration    Int               @default(30)
  priority    WaitlistPriority  @default(NORMAL)
  reason      String
  notes       String?
  status      WaitlistStatus    @default(WAITING)
  notifiedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  student     Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  nurse       User?             @relation("WaitlistNurse", fields: [nurseId], references: [id])
  nurseId     String?
  
  @@map("appointment_waitlist")
}

model AppointmentReminder {
  id              String         @id @default(cuid())
  type            MessageType
  scheduledFor    DateTime
  status          ReminderStatus @default(SCHEDULED)
  sentAt          DateTime?
  failureReason   String?
  message         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  appointment     Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId   String
  
  @@map("appointment_reminders")
}

model IncidentReport {
  id                       String                @id @default(cuid())
  type                     IncidentType
  severity                 IncidentSeverity
  description              String
  location                 String
  witnesses                String[]
  actionsTaken             String
  parentNotified           Boolean               @default(false)
  parentNotificationMethod String?
  parentNotifiedAt         DateTime?
  parentNotifiedBy         String?
  followUpRequired         Boolean               @default(false)
  followUpNotes            String?
  attachments              String[] // Array of file URLs
  evidencePhotos           String[] // Photo evidence URLs
  evidenceVideos           String[] // Video evidence URLs
  occurredAt               DateTime
  insuranceClaimNumber     String?
  insuranceClaimStatus     InsuranceClaimStatus?
  legalComplianceStatus    ComplianceStatus      @default(PENDING)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt

  // Relations
  student           Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  reportedBy        User               @relation(fields: [reportedById], references: [id])
  reportedById      String
  witnessStatements WitnessStatement[]
  followUpActions   FollowUpAction[]

  @@map("incident_reports")
}

model WitnessStatement {
  id             String      @id @default(cuid())
  witnessName    String
  witnessType    WitnessType
  witnessContact String?
  statement      String
  verified       Boolean     @default(false)
  verifiedBy     String?
  verifiedAt     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  incidentReport   IncidentReport @relation(fields: [incidentReportId], references: [id], onDelete: Cascade)
  incidentReportId String

  @@map("witness_statements")
}

model FollowUpAction {
  id          String         @id @default(cuid())
  action      String
  dueDate     DateTime
  priority    ActionPriority @default(MEDIUM)
  status      ActionStatus   @default(PENDING)
  assignedTo  String?
  completedAt DateTime?
  completedBy String?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  incidentReport   IncidentReport @relation(fields: [incidentReportId], references: [id], onDelete: Cascade)
  incidentReportId String

  @@map("follow_up_actions")
}

// Enums
enum UserRole {
  ADMIN
  NURSE
  SCHOOL_ADMIN
  DISTRICT_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ContactPriority {
  PRIMARY
  SECONDARY
  EMERGENCY_ONLY
}

enum HealthRecordType {
  CHECKUP
  VACCINATION
  ILLNESS
  INJURY
  SCREENING
  PHYSICAL_EXAM
  MENTAL_HEALTH
  DENTAL
  VISION
  HEARING
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
  LIFE_THREATENING
}

enum AppointmentType {
  ROUTINE_CHECKUP
  MEDICATION_ADMINISTRATION
  INJURY_ASSESSMENT
  ILLNESS_EVALUATION
  FOLLOW_UP
  SCREENING
  EMERGENCY
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum IncidentType {
  INJURY
  ILLNESS
  BEHAVIORAL
  MEDICATION_ERROR
  ALLERGIC_REACTION
  EMERGENCY
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InventoryTransactionType {
  PURCHASE
  USAGE
  ADJUSTMENT
  TRANSFER
  DISPOSAL
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  CALIBRATION
  INSPECTION
  CLEANING
}

enum MessageType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  VOICE
}

enum MessageCategory {
  EMERGENCY
  HEALTH_UPDATE
  APPOINTMENT_REMINDER
  MEDICATION_REMINDER
  GENERAL
  INCIDENT_NOTIFICATION
  COMPLIANCE
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecipientType {
  STUDENT
  EMERGENCY_CONTACT
  PARENT
  NURSE
  ADMIN
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

enum WitnessType {
  STUDENT
  STAFF
  PARENT
  OTHER
}

enum InsuranceClaimStatus {
  NOT_FILED
  FILED
  PENDING
  APPROVED
  DENIED
  CLOSED
}

enum ComplianceStatus {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


enum PurchaseOrderStatus {
  PENDING
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum WaitlistPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WaitlistStatus {
  WAITING
  NOTIFIED
  SCHEDULED
  EXPIRED
  CANCELLED
}

enum ReminderStatus {
  SCHEDULED
  SENT
  FAILED
  CANCELLED
}

// Administration Panel Models

model District {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  schools     School[]
  licenses    License[]
  
  @@map("districts")
}

model School {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  email       String?
  principal   String?
  studentCount Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  district    District @relation(fields: [districtId], references: [id])
  districtId  String
  
  @@map("schools")
}

model SystemConfiguration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    ConfigCategory
  description String?
  isPublic    Boolean  @default(false) // Whether non-admin users can view
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_configurations")
}

model BackupLog {
  id          String       @id @default(cuid())
  type        BackupType
  status      BackupStatus
  fileName    String?
  fileSize    Int?         // Size in bytes
  location    String?
  startedAt   DateTime
  completedAt DateTime?
  error       String?
  triggeredBy String?      // User ID who triggered manual backup
  createdAt   DateTime     @default(now())
  
  @@map("backup_logs")
}

model PerformanceMetric {
  id          String     @id @default(cuid())
  metricType  MetricType
  value       Float
  unit        String?
  context     Json?      // Additional context data
  recordedAt  DateTime   @default(now())
  
  @@map("performance_metrics")
  @@index([metricType, recordedAt])
}

model License {
  id            String        @id @default(cuid())
  licenseKey    String        @unique
  type          LicenseType
  status        LicenseStatus @default(ACTIVE)
  maxUsers      Int?
  maxSchools    Int?
  features      String[]      // Array of enabled features
  issuedTo      String?
  issuedAt      DateTime      @default(now())
  expiresAt     DateTime?
  activatedAt   DateTime?
  deactivatedAt DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  district      District? @relation(fields: [districtId], references: [id])
  districtId    String?
  
  @@map("licenses")
}

model TrainingModule {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   // Can store markdown or HTML
  duration    Int?     // Duration in minutes
  category    TrainingCategory
  isRequired  Boolean  @default(false)
  order       Int      @default(0)
  attachments String[] // URLs to training materials
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  completions TrainingCompletion[]
  
  @@map("training_modules")
}

model TrainingCompletion {
  id          String   @id @default(cuid())
  userId      String
  score       Int?     // Score out of 100
  completedAt DateTime @default(now())
  expiresAt   DateTime? // For certifications that expire
  certificateUrl String?
  notes       String?
  createdAt   DateTime @default(now())

  // Relations
  module      TrainingModule @relation(fields: [moduleId], references: [id])
  moduleId    String
  
  @@unique([userId, moduleId])
  @@map("training_completions")
}

model AuditLog {
  id          String     @id @default(cuid())
  userId      String?
  action      AuditAction
  entityType  String     // e.g., "User", "Student", "Medication"
  entityId    String?
  changes     Json?      // Store before/after values
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())
  
  @@map("audit_logs")
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

// Administration Enums

enum ConfigCategory {
  GENERAL
  SECURITY
  NOTIFICATION
  INTEGRATION
  BACKUP
  PERFORMANCE
}

enum BackupType {
  AUTOMATIC
  MANUAL
  SCHEDULED
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum MetricType {
  CPU_USAGE
  MEMORY_USAGE
  DISK_USAGE
  API_RESPONSE_TIME
  DATABASE_QUERY_TIME
  ACTIVE_USERS
  ERROR_RATE
  REQUEST_COUNT
}

enum LicenseType {
  TRIAL
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum TrainingCategory {
  HIPAA_COMPLIANCE
  MEDICATION_MANAGEMENT
  EMERGENCY_PROCEDURES
  SYSTEM_TRAINING
  SAFETY_PROTOCOLS
  DATA_SECURITY
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  BACKUP
  RESTORE
}

// Integration Hub Models

model IntegrationConfig {
  id              String            @id @default(cuid())
  name            String
  type            IntegrationType
  status          IntegrationStatus @default(INACTIVE)
  endpoint        String?           // API endpoint or connection string
  apiKey          String?           // Encrypted API key
  username        String?
  password        String?           // Encrypted password
  settings        Json?             // Additional integration-specific settings
  isActive        Boolean           @default(true)
  lastSyncAt      DateTime?
  lastSyncStatus  String?
  syncFrequency   Int?              // Sync frequency in minutes (null for manual)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  logs            IntegrationLog[]
  
  @@map("integration_configs")
}

model IntegrationLog {
  id              String   @id @default(cuid())
  integrationType IntegrationType
  action          String   // e.g., "sync", "test_connection", "import", "export"
  status          String   // e.g., "success", "failed", "in_progress"
  recordsProcessed Int?
  recordsSucceeded Int?
  recordsFailed    Int?
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  duration        Int?     // Duration in milliseconds
  errorMessage    String?
  details         Json?    // Additional log details
  createdAt       DateTime @default(now())

  // Relations
  integration     IntegrationConfig? @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId   String?
  
  @@map("integration_logs")
  @@index([integrationType, createdAt])
  @@index([integrationId, createdAt])
}

// Integration Hub Enums

enum IntegrationType {
  SIS                    // Student Information System
  EHR                    // Electronic Health Record
  PHARMACY               // Pharmacy Management System
  LABORATORY             // Laboratory Information System
  INSURANCE              // Insurance Verification System
  PARENT_PORTAL          // Parent Portal
  HEALTH_APP             // Third-party Health Application
  GOVERNMENT_REPORTING   // Government Reporting System
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  TESTING
  SYNCING
}

// Document Management Models

model Document {
  id              String           @id @default(cuid())
  title           String
  description     String?
  category        DocumentCategory
  fileType        String           // e.g., "pdf", "docx", "jpg"
  fileName        String
  fileSize        Int              // Size in bytes
  fileUrl         String
  version         Int              @default(1)
  status          DocumentStatus   @default(DRAFT)
  tags            String[]
  isTemplate      Boolean          @default(false)
  templateData    Json?            // For document templates
  parentId        String?          // For version control
  retentionDate   DateTime?        // When document should be deleted per policy
  accessLevel     DocumentAccessLevel @default(STAFF_ONLY)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  parent          Document?        @relation("DocumentVersions", fields: [parentId], references: [id])
  versions        Document[]       @relation("DocumentVersions")
  uploadedBy      String
  studentId       String?
  signatures      DocumentSignature[]
  auditTrail      DocumentAuditTrail[]
  
  @@map("documents")
  @@index([category, status])
  @@index([studentId])
  @@index([createdAt])
}

model DocumentSignature {
  id            String   @id @default(cuid())
  signedBy      String   // User ID or name
  signedByRole  String
  signatureData String?  // Digital signature data
  signedAt      DateTime @default(now())
  ipAddress     String?
  
  // Relations
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  
  @@map("document_signatures")
}

model DocumentAuditTrail {
  id          String   @id @default(cuid())
  action      DocumentAction
  performedBy String   // User ID
  changes     Json?
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  
  @@map("document_audit_trail")
  @@index([documentId, createdAt])
}

// Compliance & Regulatory Models

model ComplianceReport {
  id              String            @id @default(cuid())
  reportType      ComplianceReportType
  title           String
  description     String?
  status          ComplianceStatus
  period          String            // e.g., "2024-Q1", "2024-01"
  findings        Json?             // Detailed findings
  recommendations Json?
  dueDate         DateTime?
  submittedAt     DateTime?
  submittedBy     String?
  reviewedAt      DateTime?
  reviewedBy      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  createdById     String
  items           ComplianceChecklistItem[]
  
  @@map("compliance_reports")
  @@index([reportType, status])
  @@index([period])
}

model ComplianceChecklistItem {
  id            String            @id @default(cuid())
  requirement   String
  description   String?
  category      ComplianceCategory
  status        ChecklistItemStatus @default(PENDING)
  evidence      String?           // URL or description of evidence
  notes         String?
  dueDate       DateTime?
  completedAt   DateTime?
  completedBy   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  report        ComplianceReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId      String?
  
  @@map("compliance_checklist_items")
}

model ConsentForm {
  id              String        @id @default(cuid())
  type            ConsentType
  title           String
  description     String
  content         String        // Form content/terms
  version         String        @default("1.0")
  isActive        Boolean       @default(true)
  expiresAt       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  signatures      ConsentSignature[]
  
  @@map("consent_forms")
}

model ConsentSignature {
  id              String      @id @default(cuid())
  studentId       String
  signedBy        String      // Parent/guardian name
  relationship    String
  signatureData   String?     // Digital signature
  signedAt        DateTime    @default(now())
  ipAddress       String?
  withdrawnAt     DateTime?
  withdrawnBy     String?
  
  // Relations
  consentForm     ConsentForm @relation(fields: [consentFormId], references: [id])
  consentFormId   String
  
  @@map("consent_signatures")
  @@unique([consentFormId, studentId])
}

model PolicyDocument {
  id              String        @id @default(cuid())
  title           String
  category        PolicyCategory
  content         String
  version         String        @default("1.0")
  effectiveDate   DateTime
  reviewDate      DateTime?
  status          PolicyStatus  @default(DRAFT)
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  acknowledgments PolicyAcknowledgment[]
  
  @@map("policy_documents")
}

model PolicyAcknowledgment {
  id              String          @id @default(cuid())
  userId          String
  acknowledgedAt  DateTime        @default(now())
  ipAddress       String?
  
  // Relations
  policy          PolicyDocument  @relation(fields: [policyId], references: [id])
  policyId        String
  
  @@map("policy_acknowledgments")
  @@unique([policyId, userId])
}

// Access Control & Security Models

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  permissions RolePermission[]
  userRoles   UserRoleAssignment[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  resource    String   // e.g., "students", "medications", "reports"
  action      String   // e.g., "read", "create", "update", "delete"
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("permissions")
  @@unique([resource, action])
}

model RolePermission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  
  @@map("role_permissions")
  @@unique([roleId, permissionId])
}

model UserRoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  
  // Relations
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  
  @@map("user_role_assignments")
  @@unique([userId, roleId])
}

model Session {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  lastActivity DateTime @default(now())
  createdAt   DateTime  @default(now())
  
  @@map("sessions")
  @@index([userId])
  @@index([expiresAt])
}

model LoginAttempt {
  id          String    @id @default(cuid())
  email       String
  success     Boolean
  ipAddress   String?
  userAgent   String?
  failureReason String?
  createdAt   DateTime  @default(now())
  
  @@map("login_attempts")
  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model SecurityIncident {
  id          String            @id @default(cuid())
  type        SecurityIncidentType
  severity    IncidentSeverity
  description String
  affectedResources String[]
  detectedBy  String?           // User ID or system
  status      SecurityIncidentStatus @default(OPEN)
  resolvedAt  DateTime?
  resolvedBy  String?
  resolution  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("security_incidents")
  @@index([type, status])
  @@index([createdAt])
}

model IpRestriction {
  id          String   @id @default(cuid())
  ipAddress   String
  type        IpRestrictionType @default(WHITELIST)
  reason      String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("ip_restrictions")
  @@index([ipAddress])
}

// Document Management Enums

enum DocumentCategory {
  MEDICAL_RECORD
  INCIDENT_REPORT
  CONSENT_FORM
  POLICY
  TRAINING
  ADMINISTRATIVE
  STUDENT_FILE
  INSURANCE
  OTHER
}

enum DocumentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  ARCHIVED
  EXPIRED
}

enum DocumentAccessLevel {
  PUBLIC
  STAFF_ONLY
  ADMIN_ONLY
  RESTRICTED
}

enum DocumentAction {
  CREATED
  VIEWED
  DOWNLOADED
  UPDATED
  DELETED
  SHARED
  SIGNED
}

// Compliance & Regulatory Enums

enum ComplianceReportType {
  HIPAA
  FERPA
  STATE_HEALTH
  MEDICATION_AUDIT
  SAFETY_INSPECTION
  TRAINING_COMPLIANCE
  DATA_PRIVACY
  CUSTOM
}

enum ComplianceCategory {
  PRIVACY
  SECURITY
  DOCUMENTATION
  TRAINING
  SAFETY
  MEDICATION
  HEALTH_RECORDS
  CONSENT
}

enum ChecklistItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  NOT_APPLICABLE
  FAILED
}

enum ConsentType {
  MEDICAL_TREATMENT
  MEDICATION_ADMINISTRATION
  EMERGENCY_CARE
  PHOTO_RELEASE
  DATA_SHARING
  TELEHEALTH
  RESEARCH
  OTHER
}

enum PolicyCategory {
  HIPAA
  FERPA
  MEDICATION
  EMERGENCY
  SAFETY
  DATA_SECURITY
  OPERATIONAL
  TRAINING
}

enum PolicyStatus {
  DRAFT
  UNDER_REVIEW
  ACTIVE
  ARCHIVED
  SUPERSEDED
}

// Access Control & Security Enums

enum SecurityIncidentType {
  UNAUTHORIZED_ACCESS
  DATA_BREACH
  FAILED_LOGIN_ATTEMPTS
  SUSPICIOUS_ACTIVITY
  MALWARE
  PHISHING
  POLICY_VIOLATION
  OTHER
}

enum SecurityIncidentStatus {
  OPEN
  INVESTIGATING
  CONTAINED
  RESOLVED
  CLOSED
}

enum IpRestrictionType {
  WHITELIST
  BLACKLIST
}