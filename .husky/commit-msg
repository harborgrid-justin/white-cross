#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Validating commit message..."

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Conventional Commits format: type(scope): description
# Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
PATTERN="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,100}"

if ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
  echo "‚ùå Invalid commit message format!"
  echo ""
  echo "Commit messages must follow Conventional Commits format:"
  echo "  type(scope): description"
  echo ""
  echo "Types:"
  echo "  feat:     New feature"
  echo "  fix:      Bug fix"
  echo "  docs:     Documentation changes"
  echo "  style:    Code style changes (formatting, etc.)"
  echo "  refactor: Code refactoring"
  echo "  perf:     Performance improvements"
  echo "  test:     Adding or updating tests"
  echo "  build:    Build system changes"
  echo "  ci:       CI/CD changes"
  echo "  chore:    Other changes that don't modify src or test files"
  echo "  revert:   Revert a previous commit"
  echo ""
  echo "Examples:"
  echo "  feat(auth): add two-factor authentication"
  echo "  fix(api): resolve database connection timeout"
  echo "  docs: update deployment documentation"
  echo ""
  exit 1
fi

# Check commit message length
if [ ${#COMMIT_MSG} -gt 100 ]; then
  echo "‚ö†Ô∏è  Warning: Commit message is longer than 100 characters"
  echo "Consider using the commit body for detailed information"
fi

# Check for HIPAA-related commits
if echo "$COMMIT_MSG" | grep -qiE "(phi|hipaa|patient|health.?record)"; then
  echo "üè• HIPAA-related commit detected"
  echo "Ensure compliance requirements are met and audited"
fi

echo "‚úÖ Commit message is valid!"
