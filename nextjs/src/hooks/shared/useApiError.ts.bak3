/**
 * Enterprise API Error Hook
 * 
 * Standardized error handling hook that provides consistent error management
 * across all domain hooks with HIPAA-compliant logging and user messaging.
 * 
 * @module hooks/shared/useApiError
 * @author White Cross Healthcare Platform
 * @version 3.0.0
 */

import { useCallback } from 'react';
import { toast } from 'react-hot-toast';
import { useAuditLog } from './useAuditLog';

/**
 * Standard error types for enterprise applications
 */
export type ApiErrorType = 
  | 'validation' 
  | 'authorization' 
  | 'not-found' 
  | 'server-error' 
  | 'network-error' 
  | 'compliance-error'
  | 'circuit-breaker'
  | 'rate-limit';

/**
 * Enhanced API error interface with healthcare context
 */
export interface EnterpriseApiError extends Error {
  type: ApiErrorType;
  status?: number;
  statusCode?: number;
  code?: string;
  details?: Record<string, unknown>;
  context?: string;
  auditRequired?: boolean;
  phiInvolved?: boolean;
  timestamp: Date;
}

/**
 * Error handling result interface
 */
export interface ErrorHandlingResult {
  displayMessage: string;
  shouldRetry: boolean;
  requiresAuth: boolean;
  severity: 'low' | 'medium' | 'high' | 'critical';
}

/**
 * Hook options interface
 */
export interface UseApiErrorOptions {
  enableToasts?: boolean;
  enableAuditLogging?: boolean;
  defaultRetryable?: boolean;
  context?: string;
}

/**
 * Enterprise API Error Hook
 */
export function useApiError(options: UseApiErrorOptions = {}) {
  const {
    enableToasts = true,
    enableAuditLogging = true,
    defaultRetryable = false,
    context = 'unknown'
  } = options;

  const { logAuditEvent } = useAuditLog();

  /**
   * Transform raw API error to enterprise error format
   */
  const transformError = useCallback((error: unknown, operationContext?: string): EnterpriseApiError => {
    const baseError = error as any;
    
    const enterpriseError: EnterpriseApiError = {
      name: baseError?.name || 'ApiError',
      message: baseError?.message || 'An unexpected error occurred',
      type: determineErrorType(baseError),
      status: baseError?.status || baseError?.statusCode,
      statusCode: baseError?.statusCode || baseError?.status,
      code: baseError?.code,
      details: baseError?.details || {},
      context: operationContext || context,
      auditRequired: shouldRequireAudit(baseError),
      phiInvolved: detectPHI(baseError),
      timestamp: new Date(),
    };

    return enterpriseError;
  }, [context]);

  /**
   * Handle API error with enterprise patterns
   */
  const handleError = useCallback((
    error: unknown, 
    operationContext?: string,
    customOptions?: Partial<UseApiErrorOptions>
  ): ErrorHandlingResult => {
    const enterpriseError = transformError(error, operationContext);
    const opts = { ...options, ...customOptions };

    // Audit logging for compliance
    if (opts.enableAuditLogging && enterpriseError.auditRequired) {
      logAuditEvent({
        event: 'api_error',
        context: enterpriseError.context || 'unknown',
        severity: determineSeverity(enterpriseError),
        details: {
          errorType: enterpriseError.type,
          status: enterpriseError.status,
          code: enterpriseError.code,
          phiInvolved: enterpriseError.phiInvolved,
        },
        timestamp: enterpriseError.timestamp,
      });
    }

    const result = processError(enterpriseError);

    // User notification (PHI-safe)
    if (opts.enableToasts) {
      const toastType = result.severity === 'critical' ? 'error' : 'warning';
      toast[toastType](result.displayMessage);
    }

    return result;
  }, [transformError, logAuditEvent, options]);

  /**
   * Get user-friendly error message (PHI-safe)
   */
  const getDisplayMessage = useCallback((error: EnterpriseApiError): string => {
    // HIPAA-compliant error messages (no PHI)
    const messages: Record<ApiErrorType, string> = {
      'validation': 'Please check the information provided and try again.',
      'authorization': 'You do not have permission to perform this action.',
      'not-found': 'The requested information could not be found.',
      'server-error': 'A system error occurred. Please try again later.',
      'network-error': 'Connection issue detected. Please check your connection.',
      'compliance-error': 'This action cannot be completed due to compliance requirements.',
      'circuit-breaker': 'Service is temporarily unavailable. Please try again later.',
      'rate-limit': 'Too many requests. Please wait before trying again.',
    };

    return messages[error.type] || 'An unexpected error occurred. Please try again.';
  }, []);

  /**
   * Determine if operation should be retried
   */
  const shouldRetry = useCallback((error: EnterpriseApiError): boolean => {
    const retryableTypes: ApiErrorType[] = ['network-error', 'server-error', 'rate-limit'];
    return retryableTypes.includes(error.type);
  }, []);

  return {
    handleError,
    transformError,
    getDisplayMessage,
    shouldRetry,
  };
}

// =============================================================================
// HELPER FUNCTIONS
// =============================================================================

/**
 * Determine error type from API response
 */
function determineErrorType(error: any): ApiErrorType {
  if (error?.status === 401 || error?.statusCode === 401) return 'authorization';
  if (error?.status === 404 || error?.statusCode === 404) return 'not-found';
  if (error?.status === 422 || error?.statusCode === 422) return 'validation';
  if (error?.status === 429 || error?.statusCode === 429) return 'rate-limit';
  if (error?.status >= 500 || error?.statusCode >= 500) return 'server-error';
  if (error?.code === 'NETWORK_ERROR') return 'network-error';
  if (error?.code === 'CIRCUIT_BREAKER_OPEN') return 'circuit-breaker';
  if (error?.type === 'compliance') return 'compliance-error';
  
  return 'server-error'; // Default fallback
}

/**
 * Determine if error requires audit logging
 */
function shouldRequireAudit(error: any): boolean {
  // Always audit security and compliance related errors
  const auditTypes = [401, 403, 422, 500, 502, 503];
  const status = error?.status || error?.statusCode;
  return auditTypes.includes(status) || error?.type === 'compliance';
}

/**
 * Detect if PHI might be involved in error
 */
function detectPHI(error: any): boolean {
  const phiIndicators = ['patient', 'medical', 'health', 'diagnosis', 'medication'];
  const errorMessage = (error?.message || '').toLowerCase();
  return phiIndicators.some(indicator => errorMessage.includes(indicator));
}

/**
 * Determine error severity level
 */
function determineSeverity(error: EnterpriseApiError): 'low' | 'medium' | 'high' | 'critical' {
  if (error.type === 'authorization' || error.type === 'compliance-error') return 'critical';
  if (error.type === 'server-error' && error.status === 500) return 'high';
  if (error.type === 'validation') return 'medium';
  return 'low';
}

/**
 * Process error and determine response strategy
 */
function processError(error: EnterpriseApiError): ErrorHandlingResult {
  const severity = determineSeverity(error);
  const shouldRetry = ['network-error', 'server-error', 'rate-limit'].includes(error.type);
  const requiresAuth = error.type === 'authorization';

  return {
    displayMessage: getDisplayMessage(error),
    shouldRetry,
    requiresAuth,
    severity,
  };
}

/**
 * Get PHI-safe display message
 */
function getDisplayMessage(error: EnterpriseApiError): string {
  const messages: Record<ApiErrorType, string> = {
    'validation': 'Please check the information provided and try again.',
    'authorization': 'You do not have permission to perform this action.',
    'not-found': 'The requested information could not be found.',
    'server-error': 'A system error occurred. Please try again later.',
    'network-error': 'Connection issue detected. Please check your connection.',
    'compliance-error': 'This action cannot be completed due to compliance requirements.',
    'circuit-breaker': 'Service is temporarily unavailable. Please try again later.',
    'rate-limit': 'Too many requests. Please wait before trying again.',
  };

  return messages[error.type] || 'An unexpected error occurred. Please try again.';
}