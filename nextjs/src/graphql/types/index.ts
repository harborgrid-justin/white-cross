/**
 * @fileoverview GraphQL Types Index
 *
 * Centralized exports for all GraphQL TypeScript types
 * Types are generated by graphql-codegen from schema and operations
 *
 * @module graphql/types
 * @since 1.0.0
 */

// Generated types will be exported from here after running codegen
// export * from './generated';

/**
 * Manual type definitions for immediate use
 * These will be replaced by generated types
 */

export interface Student {
  id: string;
  studentNumber: string;
  firstName: string;
  lastName: string;
  fullName: string;
  dateOfBirth: string;
  grade: string;
  gender: 'MALE' | 'FEMALE' | 'OTHER' | 'PREFER_NOT_TO_SAY';
  photo?: string | null;
  medicalRecordNum?: string | null;
  isActive: boolean;
  enrollmentDate: string;
  nurseId?: string | null;
  createdAt: string;
  updatedAt: string;
}

export interface Contact {
  id: string;
  firstName: string;
  lastName: string;
  fullName: string;
  displayName: string;
  email?: string | null;
  phone?: string | null;
  type: 'guardian' | 'staff' | 'vendor' | 'provider' | 'other';
  organization?: string | null;
  title?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  relationTo?: string | null;
  relationshipType?: string | null;
  customFields?: any;
  isActive: boolean;
  notes?: string | null;
  createdAt: string;
  updatedAt: string;
}

export interface Medication {
  id: string;
  studentId: string;
  medicationName: string;
  genericName?: string | null;
  dosage: string;
  unit: string;
  frequency: string;
  route: string;
  prescribedBy?: string | null;
  prescriptionDate?: string | null;
  startDate: string;
  endDate?: string | null;
  reason?: string | null;
  specialInstructions?: string | null;
  isActive: boolean;
  isControlled: boolean;
  requiresRefrigeration: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface PageInfo {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
}

export interface PaginatedResponse<T> {
  items: T[];
  pagination: PageInfo;
}

export interface StudentListResponse {
  students: Student[];
  pagination: PageInfo;
}

export interface ContactListResponse {
  contacts: Contact[];
  pagination: PageInfo;
}

export interface MedicationListResponse {
  medications: Medication[];
  pagination: PageInfo;
}

export interface DeleteResponse {
  success: boolean;
  message: string;
}

export interface GraphQLErrorResponse {
  message: string;
  code?: string;
  field?: string;
}
