openapi: 3.0.3

info:
  title: White Cross Health Records API
  version: 1.0.0
  description: |
    Enterprise-grade HIPAA-compliant REST API for managing student health records
    in K-12 school environments. This API provides comprehensive endpoints for
    managing health records, allergies, chronic conditions, vaccinations, vital
    signs, and growth measurements.

    ## Key Features
    - HIPAA-compliant security and audit logging
    - Role-based access control (RBAC)
    - Comprehensive pagination and filtering
    - Rate limiting and abuse prevention
    - Complete PHI access audit trail

    ## Authentication
    All endpoints require JWT Bearer token authentication via the Authorization header.

  contact:
    name: White Cross API Support
    email: api-support@whitecross.health
    url: https://docs.whitecross.health
  license:
    name: Proprietary
    url: https://whitecross.health/terms

servers:
  - url: https://api.whitecross.health/v1
    description: Production server
  - url: https://api-staging.whitecross.health/v1
    description: Staging server
  - url: http://localhost:3001/api/v1
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: Health Records
    description: Operations for managing health records
  - name: Allergies
    description: Operations for managing student allergies
  - name: Chronic Conditions
    description: Operations for managing chronic conditions
  - name: Vaccinations
    description: Operations for managing vaccination records
  - name: Vital Signs
    description: Operations for recording and retrieving vital signs
  - name: Growth Measurements
    description: Operations for tracking student growth data
  - name: Health Summary
    description: Comprehensive health overview operations
  - name: System
    description: System health and monitoring endpoints

paths:
  # Health Records Endpoints
  /health-records:
    post:
      summary: Create health record
      description: Creates a new health record for a student. Requires NURSE or ADMIN role.
      operationId: createHealthRecord
      tags:
        - Health Records
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthRecordRequest'
            examples:
              checkup:
                summary: Annual checkup
                value:
                  studentId: clx0987654321
                  type: CHECKUP
                  date: "2024-01-20T09:30:00Z"
                  description: Annual physical examination
                  provider: Dr. Sarah Johnson
                  vital:
                    temperature: 98.6
                    bloodPressureSystolic: 110
                    bloodPressureDiastolic: 70
                    heartRate: 72
                    height: 151.0
                    weight: 45.5
                  notes: Student is healthy and active
      responses:
        '201':
          description: Health record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /health-records/{recordId}:
    get:
      summary: Get health record by ID
      description: Retrieves a single health record by ID
      operationId: getHealthRecord
      tags:
        - Health Records
      parameters:
        - name: recordId
          in: path
          required: true
          description: Health record ID
          schema:
            type: string
            format: cuid
            example: clx1234567890
      responses:
        '200':
          description: Health record retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Health record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Partially update health record
      description: Updates specific fields of a health record. Only the creator or ADMIN can update.
      operationId: updateHealthRecord
      tags:
        - Health Records
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHealthRecordRequest'
      responses:
        '200':
          description: Health record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Health record not found
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete health record
      description: Soft deletes a health record. ADMIN only.
      operationId: deleteHealthRecord
      tags:
        - Health Records
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '204':
          description: Health record deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Health record not found

  /students/{studentId}/health-records:
    get:
      summary: List student health records
      description: Retrieves paginated list of health records for a specific student
      operationId: listStudentHealthRecords
      tags:
        - Health Records
      parameters:
        - $ref: '#/components/parameters/StudentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: type
          in: query
          description: Filter by record type
          schema:
            $ref: '#/components/schemas/HealthRecordType'
        - name: dateFrom
          in: query
          description: Filter records from this date (ISO 8601)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: dateTo
          in: query
          description: Filter records until this date (ISO 8601)
          schema:
            type: string
            format: date
            example: "2024-12-31"
        - name: provider
          in: query
          description: Filter by provider name (partial match)
          schema:
            type: string
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          description: Health records retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordsListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Student not found
        '422':
          $ref: '#/components/responses/ValidationError'

  # Allergy Endpoints
  /allergies:
    post:
      summary: Create allergy record
      description: Creates a new allergy record for a student
      operationId: createAllergy
      tags:
        - Allergies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAllergyRequest'
      responses:
        '201':
          description: Allergy created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllergyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Duplicate allergy for this student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /allergies/{allergyId}:
    get:
      summary: Get allergy by ID
      operationId: getAllergy
      tags:
        - Allergies
      parameters:
        - name: allergyId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '200':
          description: Allergy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllergyResponse'
        '404':
          description: Allergy not found

    patch:
      summary: Update allergy
      operationId: updateAllergy
      tags:
        - Allergies
      parameters:
        - name: allergyId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAllergyRequest'
      responses:
        '200':
          description: Allergy updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllergyResponse'
        '404':
          description: Allergy not found
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete allergy
      description: Deletes an allergy record. ADMIN only.
      operationId: deleteAllergy
      tags:
        - Allergies
      parameters:
        - name: allergyId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '204':
          description: Allergy deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Allergy not found

  /students/{studentId}/allergies:
    get:
      summary: List student allergies
      operationId: listStudentAllergies
      tags:
        - Allergies
      parameters:
        - $ref: '#/components/parameters/StudentId'
        - name: severity
          in: query
          description: Filter by severity
          schema:
            $ref: '#/components/schemas/AllergySeverity'
        - name: verified
          in: query
          description: Filter by verification status
          schema:
            type: boolean
      responses:
        '200':
          description: Allergies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllergiesListResponse'

  # Chronic Conditions Endpoints
  /chronic-conditions:
    post:
      summary: Create chronic condition
      operationId: createChronicCondition
      tags:
        - Chronic Conditions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChronicConditionRequest'
      responses:
        '201':
          description: Chronic condition created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicConditionResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /chronic-conditions/{conditionId}:
    get:
      summary: Get chronic condition by ID
      operationId: getChronicCondition
      tags:
        - Chronic Conditions
      parameters:
        - name: conditionId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '200':
          description: Chronic condition retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicConditionResponse'
        '404':
          description: Chronic condition not found

    patch:
      summary: Update chronic condition
      operationId: updateChronicCondition
      tags:
        - Chronic Conditions
      parameters:
        - name: conditionId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChronicConditionRequest'
      responses:
        '200':
          description: Chronic condition updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicConditionResponse'
        '404':
          description: Chronic condition not found

    delete:
      summary: Delete chronic condition
      operationId: deleteChronicCondition
      tags:
        - Chronic Conditions
      parameters:
        - name: conditionId
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '204':
          description: Chronic condition deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Chronic condition not found

  /students/{studentId}/chronic-conditions:
    get:
      summary: List student chronic conditions
      operationId: listStudentChronicConditions
      tags:
        - Chronic Conditions
      parameters:
        - $ref: '#/components/parameters/StudentId'
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: '#/components/schemas/ConditionStatus'
      responses:
        '200':
          description: Chronic conditions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicConditionsListResponse'

  # Vaccination Endpoints
  /students/{studentId}/vaccinations:
    get:
      summary: List student vaccinations
      operationId: listStudentVaccinations
      tags:
        - Vaccinations
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: Vaccinations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccinationsListResponse'

  # Vital Signs Endpoints
  /students/{studentId}/vitals:
    get:
      summary: Get recent vital signs
      operationId: getRecentVitals
      tags:
        - Vital Signs
      parameters:
        - $ref: '#/components/parameters/StudentId'
        - name: limit
          in: query
          description: Number of recent records to retrieve
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Vital signs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VitalsListResponse'

    post:
      summary: Record vital signs
      operationId: recordVitals
      tags:
        - Vital Signs
      parameters:
        - $ref: '#/components/parameters/StudentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordVitalsRequest'
      responses:
        '201':
          description: Vital signs recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'

  # Growth Measurements Endpoints
  /students/{studentId}/growth-measurements:
    get:
      summary: Get growth chart data
      operationId: getGrowthChartData
      tags:
        - Growth Measurements
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: Growth data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthDataResponse'

    post:
      summary: Add growth measurement
      operationId: addGrowthMeasurement
      tags:
        - Growth Measurements
      parameters:
        - $ref: '#/components/parameters/StudentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGrowthMeasurementRequest'
      responses:
        '201':
          description: Growth measurement added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthMeasurementResponse'

  # Health Summary Endpoint
  /students/{studentId}/health-summary:
    get:
      summary: Get student health summary
      description: Retrieves comprehensive health overview including allergies, conditions, vitals, and vaccinations
      operationId: getHealthSummary
      tags:
        - Health Summary
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: Health summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSummaryResponse'

  # Search and Export Endpoints
  /health-records/search:
    get:
      summary: Search health records
      operationId: searchHealthRecords
      tags:
        - Health Records
      parameters:
        - name: q
          in: query
          required: true
          description: Search query (minimum 3 characters)
          schema:
            type: string
            minLength: 3
        - name: type
          in: query
          description: Filter by record type
          schema:
            $ref: '#/components/schemas/HealthRecordType'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordsListResponse'
        '422':
          description: Invalid search parameters

  /students/{studentId}/health-records/export:
    get:
      summary: Export health history
      operationId: exportHealthHistory
      tags:
        - Health Records
      parameters:
        - $ref: '#/components/parameters/StudentId'
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, pdf, csv]
            default: pdf
      responses:
        '200':
          description: Export initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'

  # System Health Endpoints
  /health:
    get:
      summary: Basic health check
      description: Returns API health status (public endpoint)
      operationId: healthCheck
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  version:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: Service is unhealthy

  /health/detailed:
    get:
      summary: Detailed health check
      description: Returns detailed system health metrics (ADMIN only)
      operationId: detailedHealthCheck
      tags:
        - System
      responses:
        '200':
          description: Detailed health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include the token in the Authorization header:
        ```
        Authorization: Bearer <JWT_TOKEN>
        ```

  parameters:
    StudentId:
      name: studentId
      in: path
      required: true
      description: Unique student identifier
      schema:
        type: string
        format: cuid
        example: clx0987654321

    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortBy:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string

    SortOrder:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc

  schemas:
    # Core Domain Objects
    HealthRecord:
      type: object
      required:
        - id
        - studentId
        - type
        - date
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: cuid
          example: clx1234567890
        studentId:
          type: string
          format: cuid
        type:
          $ref: '#/components/schemas/HealthRecordType'
        date:
          type: string
          format: date-time
          description: Date and time of the health record event
        description:
          type: string
          minLength: 10
          maxLength: 500
          description: Description of the health record
        provider:
          type: string
          nullable: true
          description: Healthcare provider name
        vital:
          $ref: '#/components/schemas/VitalSigns'
        notes:
          type: string
          nullable: true
          maxLength: 2000
          description: Additional notes
        attachments:
          type: array
          items:
            type: string
            format: uri
          description: URLs to attached documents
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/StudentBasicInfo'
        _links:
          $ref: '#/components/schemas/Links'

    HealthRecordType:
      type: string
      enum:
        - CHECKUP
        - VACCINATION
        - ILLNESS
        - INJURY
        - SCREENING
        - PHYSICAL_EXAM
        - MENTAL_HEALTH
        - DENTAL
        - VISION
        - HEARING
      description: Type of health record

    VitalSigns:
      type: object
      properties:
        temperature:
          type: number
          format: float
          description: Body temperature in Fahrenheit
        bloodPressureSystolic:
          type: integer
          description: Systolic blood pressure (mmHg)
        bloodPressureDiastolic:
          type: integer
          description: Diastolic blood pressure (mmHg)
        heartRate:
          type: integer
          description: Heart rate (beats per minute)
        respiratoryRate:
          type: integer
          description: Respiratory rate (breaths per minute)
        oxygenSaturation:
          type: integer
          description: Oxygen saturation percentage
        height:
          type: number
          format: float
          description: Height in centimeters
        weight:
          type: number
          format: float
          description: Weight in kilograms
        bmi:
          type: number
          format: float
          description: Body Mass Index (auto-calculated)

    Allergy:
      type: object
      required:
        - id
        - studentId
        - allergen
        - severity
        - verified
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: cuid
        studentId:
          type: string
          format: cuid
        allergen:
          type: string
          minLength: 2
          maxLength: 100
        severity:
          $ref: '#/components/schemas/AllergySeverity'
        reaction:
          type: string
          nullable: true
          maxLength: 500
        treatment:
          type: string
          nullable: true
          maxLength: 500
        verified:
          type: boolean
          default: false
        verifiedBy:
          type: string
          nullable: true
        verifiedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/StudentBasicInfo'
        _links:
          $ref: '#/components/schemas/Links'

    AllergySeverity:
      type: string
      enum:
        - MILD
        - MODERATE
        - SEVERE
        - LIFE_THREATENING
      description: Severity level of allergy

    ChronicCondition:
      type: object
      required:
        - id
        - studentId
        - condition
        - diagnosedDate
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: cuid
        studentId:
          type: string
          format: cuid
        condition:
          type: string
          minLength: 2
          maxLength: 200
        diagnosedDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ConditionStatus'
        severity:
          type: string
          enum: [MILD, MODERATE, SEVERE]
          nullable: true
        notes:
          type: string
          nullable: true
        carePlan:
          type: string
          nullable: true
        medications:
          type: array
          items:
            type: string
        restrictions:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        diagnosedBy:
          type: string
          nullable: true
        lastReviewDate:
          type: string
          format: date
          nullable: true
        nextReviewDate:
          type: string
          format: date
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        student:
          $ref: '#/components/schemas/StudentBasicInfo'
        _links:
          $ref: '#/components/schemas/Links'

    ConditionStatus:
      type: string
      enum:
        - ACTIVE
        - MANAGED
        - RESOLVED
      description: Status of chronic condition

    StudentBasicInfo:
      type: object
      properties:
        id:
          type: string
          format: cuid
        firstName:
          type: string
        lastName:
          type: string
        studentNumber:
          type: string

    # Request Schemas
    CreateHealthRecordRequest:
      type: object
      required:
        - studentId
        - type
        - date
        - description
      properties:
        studentId:
          type: string
          format: cuid
        type:
          $ref: '#/components/schemas/HealthRecordType'
        date:
          type: string
          format: date-time
        description:
          type: string
          minLength: 10
          maxLength: 500
        provider:
          type: string
          maxLength: 100
        vital:
          $ref: '#/components/schemas/VitalSigns'
        notes:
          type: string
          maxLength: 2000
        attachments:
          type: array
          items:
            type: string
            format: uri

    UpdateHealthRecordRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/HealthRecordType'
        date:
          type: string
          format: date-time
        description:
          type: string
          minLength: 10
          maxLength: 500
        provider:
          type: string
        vital:
          $ref: '#/components/schemas/VitalSigns'
        notes:
          type: string

    CreateAllergyRequest:
      type: object
      required:
        - studentId
        - allergen
        - severity
      properties:
        studentId:
          type: string
          format: cuid
        allergen:
          type: string
          minLength: 2
          maxLength: 100
        severity:
          $ref: '#/components/schemas/AllergySeverity'
        reaction:
          type: string
          maxLength: 500
        treatment:
          type: string
          maxLength: 500
        verified:
          type: boolean
          default: false

    UpdateAllergyRequest:
      type: object
      properties:
        allergen:
          type: string
        severity:
          $ref: '#/components/schemas/AllergySeverity'
        reaction:
          type: string
        treatment:
          type: string
        verified:
          type: boolean

    CreateChronicConditionRequest:
      type: object
      required:
        - studentId
        - condition
        - diagnosedDate
        - status
      properties:
        studentId:
          type: string
          format: cuid
        condition:
          type: string
          minLength: 2
          maxLength: 200
        diagnosedDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ConditionStatus'
        severity:
          type: string
          enum: [MILD, MODERATE, SEVERE]
        notes:
          type: string
        carePlan:
          type: string
        medications:
          type: array
          items:
            type: string
        restrictions:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        diagnosedBy:
          type: string
        nextReviewDate:
          type: string
          format: date

    UpdateChronicConditionRequest:
      type: object
      properties:
        condition:
          type: string
        diagnosedDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/ConditionStatus'
        severity:
          type: string
        notes:
          type: string
        carePlan:
          type: string

    RecordVitalsRequest:
      type: object
      required:
        - date
        - vital
      properties:
        date:
          type: string
          format: date-time
        vital:
          $ref: '#/components/schemas/VitalSigns'
        notes:
          type: string

    AddGrowthMeasurementRequest:
      type: object
      required:
        - date
        - height
        - weight
      properties:
        date:
          type: string
          format: date
        height:
          type: number
          format: float
          description: Height in centimeters
        weight:
          type: number
          format: float
          description: Weight in kilograms
        headCircumference:
          type: number
          format: float
          nullable: true
        notes:
          type: string

    # Response Schemas
    HealthRecordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/HealthRecord'
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    HealthRecordsListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            records:
              type: array
              items:
                $ref: '#/components/schemas/HealthRecord'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/PaginationMetadata'
            _links:
              $ref: '#/components/schemas/PaginationLinks'
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    AllergyResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Allergy'
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    AllergiesListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            allergies:
              type: array
              items:
                $ref: '#/components/schemas/Allergy'
        meta:
          type: object
          properties:
            count:
              type: integer
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    ChronicConditionResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/ChronicCondition'
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    ChronicConditionsListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            conditions:
              type: array
              items:
                $ref: '#/components/schemas/ChronicCondition'
        meta:
          type: object
          properties:
            count:
              type: integer
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    VaccinationsListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            vaccinations:
              type: array
              items:
                $ref: '#/components/schemas/HealthRecord'
        meta:
          type: object
          properties:
            compliance:
              type: object
              properties:
                overall:
                  type: integer
                  description: Overall compliance percentage
                required:
                  type: integer
                completed:
                  type: integer
                overdue:
                  type: integer

    VitalsListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            vitals:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  date:
                    type: string
                    format: date-time
                  type:
                    $ref: '#/components/schemas/HealthRecordType'
                  vital:
                    $ref: '#/components/schemas/VitalSigns'
                  provider:
                    type: string

    GrowthDataResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            measurements:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  height:
                    type: number
                  weight:
                    type: number
                  bmi:
                    type: number
                  recordType:
                    $ref: '#/components/schemas/HealthRecordType'
                  percentiles:
                    type: object
                    properties:
                      height:
                        type: integer
                      weight:
                        type: integer
                      bmi:
                        type: integer
            growthVelocity:
              type: object
              properties:
                height:
                  type: string
                weight:
                  type: string

    GrowthMeasurementResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            measurement:
              type: object
              properties:
                date:
                  type: string
                  format: date
                height:
                  type: number
                weight:
                  type: number
                bmi:
                  type: number

    HealthSummaryResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            student:
              type: object
              properties:
                id:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                studentNumber:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                age:
                  type: integer
                grade:
                  type: string
            allergies:
              type: array
              items:
                $ref: '#/components/schemas/Allergy'
            chronicConditions:
              type: array
              items:
                $ref: '#/components/schemas/ChronicCondition'
            recentVitals:
              type: object
              properties:
                date:
                  type: string
                  format: date
                temperature:
                  type: number
                bloodPressure:
                  type: string
                heartRate:
                  type: integer
                height:
                  type: number
                weight:
                  type: number
                bmi:
                  type: number
            vaccinations:
              type: object
              properties:
                compliance:
                  type: integer
                required:
                  type: integer
                completed:
                  type: integer
                overdue:
                  type: integer
            recordCounts:
              type: object
              additionalProperties:
                type: integer
            alerts:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
                  severity:
                    type: string
                    enum: [low, medium, high]

    ExportResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            exportId:
              type: string
            downloadUrl:
              type: string
              format: uri
            expiresAt:
              type: string
              format: date-time
            format:
              type: string
              enum: [json, pdf, csv]

    DetailedHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: Uptime in seconds
        components:
          type: object
          properties:
            api:
              type: object
              properties:
                status:
                  type: string
                responseTime:
                  type: integer
            database:
              type: object
              properties:
                status:
                  type: string
                responseTime:
                  type: integer
                connections:
                  type: object
                  properties:
                    active:
                      type: integer
                    idle:
                      type: integer
                    max:
                      type: integer
            cache:
              type: object
              properties:
                status:
                  type: string
                hitRate:
                  type: number
                memoryUsage:
                  type: number

    # Common Schemas
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Request validation failed
            details:
              type: object
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
            details:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      message:
                        type: string
                      code:
                        type: string
                      value:
                        nullable: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

    PaginationMetadata:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean

    PaginationLinks:
      type: object
      properties:
        self:
          type: object
          properties:
            href:
              type: string
        first:
          type: object
          properties:
            href:
              type: string
        previous:
          type: object
          nullable: true
          properties:
            href:
              type: string
        next:
          type: object
          nullable: true
          properties:
            href:
              type: string
        last:
          type: object
          properties:
            href:
              type: string

    Links:
      type: object
      description: HATEOAS links
      properties:
        self:
          type: object
          properties:
            href:
              type: string

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: AUTH_TOKEN_MISSING
              message: Authentication required
            timestamp: "2024-01-20T14:30:00Z"
            requestId: req_abc123xyz

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: INSUFFICIENT_PERMISSIONS
              message: You do not have permission to perform this action
            timestamp: "2024-01-20T14:30:00Z"
            requestId: req_abc123xyz

    ValidationError:
      description: Validation error - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        Retry-After:
          description: Number of seconds to wait before retrying
          schema:
            type: integer
        X-RateLimit-Limit:
          description: Request limit per window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Unix timestamp when the rate limit resets
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: RATE_LIMIT_EXCEEDED
              message: Rate limit exceeded. Please try again later.
              details:
                limit: 100
                window: 1 minute
                retryAfter: 45
            timestamp: "2024-01-20T14:30:00Z"
            requestId: req_abc123xyz
