#!/bin/bash

##############################################################################
# White Cross Healthcare Platform - Environment Setup Script
#
# Purpose: Generate and validate environment configuration files
# Usage: ./scripts/setup-env.sh [development|staging|production]
##############################################################################

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENVIRONMENT="${1:-development}"

log() {
  echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
  echo -e "${GREEN}✓${NC} $1"
}

log_error() {
  echo -e "${RED}✗${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

##############################################################################
# Environment Generation Functions
##############################################################################

generate_development_env() {
  local env_file="${PROJECT_ROOT}/.env.development"

  log "Generating development environment file..."

  cat > "$env_file" << 'EOF'
# White Cross Healthcare Platform - Development Environment
# Auto-generated by setup-env.sh

# Application
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:5173

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=white_cross_dev
DB_USER=postgres
DB_PASSWORD=postgres
DB_SSL=false
DB_LOGGING=true

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Authentication
JWT_SECRET=dev_secret_key_change_in_production
JWT_EXPIRATION=24h
JWT_REFRESH_EXPIRATION=7d

# Session
SESSION_SECRET=dev_session_secret_change_in_production
SESSION_TIMEOUT=3600000

# Security
BCRYPT_ROUNDS=10
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS
CORS_ORIGIN=http://localhost:5173
CORS_CREDENTIALS=true

# Logging
LOG_LEVEL=debug
LOG_FILE=logs/app.log

# File Upload
UPLOAD_MAX_SIZE=10485760
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf

# Email (Development - use Mailtrap or similar)
SMTP_HOST=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@whitecross.local

# Monitoring
SENTRY_DSN=
SENTRY_ENVIRONMENT=development

# Feature Flags
ENABLE_DEBUG_MODE=true
ENABLE_MOCK_DATA=true
ENABLE_API_DOCS=true

# HIPAA Compliance
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=90
ENCRYPTION_AT_REST=false
EOF

  log_success "Development environment file created: $env_file"
}

generate_staging_env() {
  local env_file="${PROJECT_ROOT}/.env.staging"

  log "Generating staging environment template..."

  cat > "$env_file" << 'EOF'
# White Cross Healthcare Platform - Staging Environment
# Auto-generated by setup-env.sh
# IMPORTANT: Fill in actual values before deployment

# Application
NODE_ENV=staging
PORT=3001
FRONTEND_URL=https://staging.whitecross.example.com

# Database (Use AWS Secrets Manager or similar)
DB_HOST=staging-db.whitecross.rds.amazonaws.com
DB_PORT=5432
DB_NAME=white_cross_staging
DB_USER=CHANGE_ME
DB_PASSWORD=CHANGE_ME
DB_SSL=true
DB_LOGGING=false

# Redis
REDIS_HOST=staging-redis.whitecross.elasticache.amazonaws.com
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_ME
REDIS_DB=0
REDIS_TLS=true

# Authentication
JWT_SECRET=CHANGE_ME_GENERATE_SECURE_KEY
JWT_EXPIRATION=8h
JWT_REFRESH_EXPIRATION=7d

# Session
SESSION_SECRET=CHANGE_ME_GENERATE_SECURE_KEY
SESSION_TIMEOUT=28800000

# Security
BCRYPT_ROUNDS=12
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS
CORS_ORIGIN=https://staging.whitecross.example.com
CORS_CREDENTIALS=true

# Logging
LOG_LEVEL=info
LOG_FILE=logs/app.log

# AWS
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=CHANGE_ME
AWS_SECRET_ACCESS_KEY=CHANGE_ME
S3_BUCKET=white-cross-staging-files
CLOUDFRONT_DISTRIBUTION_ID=CHANGE_ME

# File Upload
UPLOAD_MAX_SIZE=10485760
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf

# Email
SMTP_HOST=email-smtp.us-east-1.amazonaws.com
SMTP_PORT=587
SMTP_USER=CHANGE_ME
SMTP_PASSWORD=CHANGE_ME
SMTP_FROM=noreply@whitecross.example.com

# Monitoring
SENTRY_DSN=CHANGE_ME
SENTRY_ENVIRONMENT=staging
DATADOG_API_KEY=CHANGE_ME

# Feature Flags
ENABLE_DEBUG_MODE=false
ENABLE_MOCK_DATA=false
ENABLE_API_DOCS=true

# HIPAA Compliance
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=2555
ENCRYPTION_AT_REST=true
EOF

  log_success "Staging environment template created: $env_file"
  log_warning "Please update CHANGE_ME placeholders with actual values"
}

generate_production_env() {
  local env_file="${PROJECT_ROOT}/.env.production"

  log "Generating production environment template..."

  cat > "$env_file" << 'EOF'
# White Cross Healthcare Platform - Production Environment
# Auto-generated by setup-env.sh
# CRITICAL: All secrets must be stored in AWS Secrets Manager

# Application
NODE_ENV=production
PORT=3001
FRONTEND_URL=https://app.whitecross.com

# Database (Retrieved from AWS Secrets Manager)
DB_HOST=prod-db.whitecross.rds.amazonaws.com
DB_PORT=5432
DB_NAME=white_cross_production
DB_USER=USE_SECRETS_MANAGER
DB_PASSWORD=USE_SECRETS_MANAGER
DB_SSL=true
DB_LOGGING=false
DB_POOL_MIN=2
DB_POOL_MAX=10

# Redis
REDIS_HOST=prod-redis.whitecross.elasticache.amazonaws.com
REDIS_PORT=6379
REDIS_PASSWORD=USE_SECRETS_MANAGER
REDIS_DB=0
REDIS_TLS=true

# Authentication
JWT_SECRET=USE_SECRETS_MANAGER
JWT_EXPIRATION=4h
JWT_REFRESH_EXPIRATION=7d

# Session
SESSION_SECRET=USE_SECRETS_MANAGER
SESSION_TIMEOUT=14400000

# Security
BCRYPT_ROUNDS=12
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=50
ENABLE_HELMET=true
ENABLE_CSRF=true

# CORS
CORS_ORIGIN=https://app.whitecross.com
CORS_CREDENTIALS=true

# Logging
LOG_LEVEL=warn
LOG_FILE=logs/app.log

# AWS
AWS_REGION=us-east-1
S3_BUCKET=white-cross-production-files
CLOUDFRONT_DISTRIBUTION_ID=USE_SECRETS_MANAGER

# File Upload
UPLOAD_MAX_SIZE=10485760
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf

# Email
SMTP_HOST=email-smtp.us-east-1.amazonaws.com
SMTP_PORT=587
SMTP_USER=USE_SECRETS_MANAGER
SMTP_PASSWORD=USE_SECRETS_MANAGER
SMTP_FROM=noreply@whitecross.com

# Monitoring
SENTRY_DSN=USE_SECRETS_MANAGER
SENTRY_ENVIRONMENT=production
SENTRY_TRACES_SAMPLE_RATE=0.1
DATADOG_API_KEY=USE_SECRETS_MANAGER

# Feature Flags
ENABLE_DEBUG_MODE=false
ENABLE_MOCK_DATA=false
ENABLE_API_DOCS=false

# HIPAA Compliance
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=2555
ENCRYPTION_AT_REST=true
PHI_ENCRYPTION=true
ACCESS_LOG_ENABLED=true

# Performance
ENABLE_COMPRESSION=true
ENABLE_ETAG=true
CACHE_TTL=3600
EOF

  log_success "Production environment template created: $env_file"
  log_warning "CRITICAL: Use AWS Secrets Manager for all production secrets"
}

##############################################################################
# Validation Functions
##############################################################################

validate_required_variables() {
  local env_file="$1"

  log "Validating required environment variables in $env_file..."

  local required_vars=(
    "NODE_ENV"
    "PORT"
    "DB_HOST"
    "DB_NAME"
    "DB_USER"
    "JWT_SECRET"
    "SESSION_SECRET"
  )

  local missing_vars=()

  for var in "${required_vars[@]}"; do
    if ! grep -q "^${var}=" "$env_file" 2>/dev/null; then
      missing_vars+=("$var")
    fi
  done

  if [ ${#missing_vars[@]} -gt 0 ]; then
    log_error "Missing required variables: ${missing_vars[*]}"
    return 1
  fi

  log_success "All required variables present"
}

validate_secrets_not_default() {
  local env_file="$1"

  log "Checking for default/weak secrets..."

  local weak_patterns=(
    "CHANGE_ME"
    "dev_secret"
    "test_secret"
    "password123"
    "admin"
  )

  local found_weak=false

  for pattern in "${weak_patterns[@]}"; do
    if grep -qi "$pattern" "$env_file" 2>/dev/null; then
      log_warning "Found weak/default value: $pattern"
      found_weak=true
    fi
  done

  if [ "$found_weak" = true ] && [ "$ENVIRONMENT" != "development" ]; then
    log_error "Weak/default secrets found in non-development environment"
    return 1
  fi

  log_success "Secret validation passed"
}

validate_hipaa_compliance() {
  local env_file="$1"

  log "Validating HIPAA compliance settings..."

  # Check audit logging is enabled
  if ! grep -q "^AUDIT_LOG_ENABLED=true" "$env_file" 2>/dev/null; then
    log_error "AUDIT_LOG_ENABLED must be true for HIPAA compliance"
    return 1
  fi

  # Check encryption for non-development
  if [ "$ENVIRONMENT" != "development" ]; then
    if ! grep -q "^ENCRYPTION_AT_REST=true" "$env_file" 2>/dev/null; then
      log_error "ENCRYPTION_AT_REST must be true for HIPAA compliance"
      return 1
    fi
  fi

  # Check audit retention
  local retention=$(grep "^AUDIT_LOG_RETENTION_DAYS=" "$env_file" 2>/dev/null | cut -d'=' -f2)
  if [ -n "$retention" ] && [ "$retention" -lt 2555 ] && [ "$ENVIRONMENT" != "development" ]; then
    log_error "AUDIT_LOG_RETENTION_DAYS must be at least 2555 (7 years) for HIPAA"
    return 1
  fi

  log_success "HIPAA compliance validation passed"
}

##############################################################################
# Secret Generation Functions
##############################################################################

generate_secret() {
  openssl rand -base64 32
}

encrypt_env_file() {
  local env_file="$1"
  local encrypted_file="${env_file}.enc"

  log "Encrypting environment file..."

  # Use GPG or AWS KMS for encryption
  if command -v gpg &> /dev/null; then
    gpg --symmetric --cipher-algo AES256 --output "$encrypted_file" "$env_file"
    log_success "Environment file encrypted: $encrypted_file"
  else
    log_warning "GPG not found, skipping encryption"
  fi
}

##############################################################################
# Example File Generation
##############################################################################

generate_env_example() {
  local example_file="${PROJECT_ROOT}/.env.example"

  log "Generating .env.example file..."

  cat > "$example_file" << 'EOF'
# White Cross Healthcare Platform - Environment Variables Template
# Copy this file to .env.development, .env.staging, or .env.production
# and fill in the appropriate values

# Application
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:5173

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=white_cross_dev
DB_USER=postgres
DB_PASSWORD=your_password_here
DB_SSL=false
DB_LOGGING=true

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Authentication
JWT_SECRET=your_jwt_secret_here
JWT_EXPIRATION=24h
JWT_REFRESH_EXPIRATION=7d

# Session
SESSION_SECRET=your_session_secret_here
SESSION_TIMEOUT=3600000

# Security
BCRYPT_ROUNDS=10
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS
CORS_ORIGIN=http://localhost:5173
CORS_CREDENTIALS=true

# Logging
LOG_LEVEL=debug
LOG_FILE=logs/app.log

# AWS (for staging/production)
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
S3_BUCKET=
CLOUDFRONT_DISTRIBUTION_ID=

# File Upload
UPLOAD_MAX_SIZE=10485760
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf

# Email
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=

# Monitoring
SENTRY_DSN=
SENTRY_ENVIRONMENT=
DATADOG_API_KEY=

# Feature Flags
ENABLE_DEBUG_MODE=true
ENABLE_MOCK_DATA=false
ENABLE_API_DOCS=true

# HIPAA Compliance
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=2555
ENCRYPTION_AT_REST=false
EOF

  log_success ".env.example file created"
}

##############################################################################
# Main Function
##############################################################################

main() {
  log "=========================================="
  log "White Cross - Environment Setup"
  log "=========================================="
  log "Environment: $ENVIRONMENT"
  log ""

  case "$ENVIRONMENT" in
    development)
      generate_development_env
      ;;
    staging)
      generate_staging_env
      ;;
    production)
      generate_production_env
      ;;
    *)
      log_error "Invalid environment. Use: development, staging, or production"
      exit 1
      ;;
  esac

  # Generate example file
  generate_env_example

  # Validate generated file
  local env_file="${PROJECT_ROOT}/.env.${ENVIRONMENT}"

  log ""
  log "Running validations..."

  validate_required_variables "$env_file"
  validate_secrets_not_default "$env_file"
  validate_hipaa_compliance "$env_file"

  # Optionally encrypt for non-development
  if [ "$ENVIRONMENT" != "development" ]; then
    echo ""
    echo "Do you want to encrypt this environment file? (y/n)"
    read -r response
    if [ "$response" = "y" ]; then
      encrypt_env_file "$env_file"
    fi
  fi

  log ""
  log_success "Environment setup completed!"
  log ""
  log "Next steps:"
  log "1. Review and update values in: $env_file"
  log "2. For production, use AWS Secrets Manager instead of .env files"
  log "3. Never commit .env files to version control"
  log "4. Run './scripts/validate-env.sh $ENVIRONMENT' to validate configuration"
}

main "$@"
