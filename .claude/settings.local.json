{
  "permissions": {
    "allow": [
      "Bash(python test-crud-operations.py:*)",
      "Bash(npx tsc:*)",
      "Bash(cat:*)",
      "Bash(powershell -ExecutionPolicy Bypass -File \".\\.temp\\fix-type-exports-E9K7M2.ps1\")",
      "Bash(npx sequelize-cli:*)",
      "Bash(docker ps:*)",
      "Bash(find:*)",
      "Bash(docker exec:*)",
      "Bash(powershell -ExecutionPolicy Bypass -File .temp/fix-createApiError-imports.ps1)",
      "Bash(node .temp/fix-api-imports.js:*)",
      "Bash(node -e:*)",
      "Bash(node -r dotenv/config -e:*)",
      "Bash(awk:*)",
      "Bash(powershell.exe -ExecutionPolicy Bypass -File ./fix-health-api-types.ps1)",
      "Bash(tee:*)",
      "Bash(psql:*)",
      "Bash(npm run build:*)",
      "Bash(curl:*)",
      "Bash(npm start)",
      "Bash(node test-user-student-association.js:*)",
      "Bash(node:*)",
      "Bash(timeout 30 npm start:*)",
      "Bash(npm run:*)",
      "Bash(powershell -Command \"$input | Group-Object { $_replace ''''.*error (TS\\d+):.*'''',''''$1'''' } | Sort-Object Count -Descending | Select-Object -First 20 | Format-Table Count, Name -AutoSize\")",
      "Bash(npm test:*)",
      "Bash(powershell -Command \"npm run type-check 2>&1 | Select-String ''error TS'' | ForEach-Object { if ($_-match ''error (TS\\d+):'') { $matches[1] } } | Group-Object | Sort-Object Count -Descending | Select-Object -First 15 | Format-Table Count, Name -AutoSize\")",
      "Bash(powershell -ExecutionPolicy Bypass -File \"F:\\temp\\white-cross\\frontend\\.temp\\analyze-errors.ps1\")",
      "Bash(git checkout:*)",
      "Bash(powershell:*)",
      "Bash(Select-Object -First 10)",
      "Bash(dir:*)",
      "Bash(python:*)",
      "Bash(Select-Object -First 50)",
      "Bash(while read file)",
      "Bash(do rel_path=\"$file#./\")",
      "Bash(done)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(docker --version:*)",
      "Bash(docker-compose:*)",
      "Bash(npm install:*)",
      "Bash(docker logs:*)",
      "Bash(docker inspect:*)",
      "Read(//tmp/**)",
      "Bash(for component in InventoryDashboard InventoryOverview InventoryMetrics InventoryAlerts ItemManagement ItemList ItemCard ItemForm ItemDetails CategoryManagement CategoryList CategoryCard CategoryForm CategoryTree StockManagement StockLevels StockCard StockAdjustment StockHistory LocationManagement LocationList LocationCard LocationForm LocationDetails InventoryTransactions TransactionList TransactionCard TransactionDetails TransactionHistory StockReceiving ReceivingList ReceivingCard ReceivingForm ReceivingHistory StockIssuing IssuingList IssuingCard IssuingForm IssuingHistory StockTransfer TransferList TransferCard TransferForm TransferHistory InventoryCount CountScheduler CountSheet CountResults CountHistory ReorderManagement ReorderPoints ReorderAlerts ReorderSuggestions ReorderHistory VendorManagement VendorList VendorCard VendorForm VendorDetails InventoryReports StockReports ValuationReports MovementReports VarianceReports InventorySettings UnitSettings AlertSettings ReorderSettings)",
      "Bash(do if [ ! -f \"src/pages/inventory/components/$component.tsx\" ])",
      "Bash(then echo \"Missing: $component.tsx\")",
      "Bash(fi)",
      "Bash(git restore:*)",
      "Bash(npx eslint:*)",
      "mcp__ide__getDiagnostics",
      "Bash(ls:*)",
      "Bash(test:*)",
      "Bash(xargs ls:*)",
      "Bash(chmod:*)",
      "Bash(/f/temp/white-cross/.temp/deduplication-analysis.sh)",
      "Bash(head:*)",
      "Bash(npm list:*)",
      "Bash(ANALYZE=true npm run build:*)",
      "Bash(set:*)"
    ],
    "deny": [],
    "ask": []
  }
}
