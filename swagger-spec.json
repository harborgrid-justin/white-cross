{
    "basePath": "/",
    "info": {
        "title": "White Cross Healthcare Platform API",
        "version": "1.0.0",
        "description": "Enterprise-grade healthcare platform API for school nurses to manage student health records, medications, and emergency communications. This API follows HIPAA compliance standards and implements robust security measures.",
        "contact": {
            "name": "White Cross Support",
            "email": "support@whitecross.health"
        },
        "license": {
            "name": "Proprietary",
            "url": "https://whitecross.health/license"
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication and authorization endpoints"
        },
        {
            "name": "Students",
            "description": "Student management and profile endpoints"
        },
        {
            "name": "Medications",
            "description": "Medication tracking and administration endpoints"
        },
        {
            "name": "Health Records",
            "description": "Student health records and medical history endpoints"
        },
        {
            "name": "Appointments",
            "description": "Appointment scheduling and management endpoints"
        },
        {
            "name": "Emergency Contacts",
            "description": "Emergency contact management endpoints"
        },
        {
            "name": "Incident Reports",
            "description": "Incident reporting and tracking endpoints"
        },
        {
            "name": "Users",
            "description": "User management and role administration endpoints"
        },
        {
            "name": "Inventory",
            "description": "Medical inventory and supplies management endpoints"
        },
        {
            "name": "Vendors",
            "description": "Vendor and supplier management endpoints"
        },
        {
            "name": "Purchase Orders",
            "description": "Purchase order creation and tracking endpoints"
        },
        {
            "name": "Budget",
            "description": "Budget management and financial tracking endpoints"
        },
        {
            "name": "Communication",
            "description": "Communication and notification endpoints"
        },
        {
            "name": "Reports",
            "description": "Analytics and reporting endpoints"
        },
        {
            "name": "Compliance",
            "description": "Regulatory compliance and audit endpoints"
        },
        {
            "name": "Documents",
            "description": "Document management and file storage endpoints"
        },
        {
            "name": "Access Control",
            "description": "Role-based access control and permissions endpoints"
        },
        {
            "name": "Audit",
            "description": "Audit logging and trail endpoints"
        },
        {
            "name": "Integration",
            "description": "Third-party integration and webhook endpoints"
        },
        {
            "name": "Administration",
            "description": "System administration and configuration endpoints"
        },
        {
            "name": "Districts",
            "description": "School district management endpoints"
        },
        {
            "name": "Schools",
            "description": "School management and configuration endpoints"
        }
    ],
    "securityDefinitions": {
        "jwt": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT token for authentication. Format: `Bearer <token>`"
        }
    },
    "security": [
        {
            "jwt": []
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "host": "localhost:3001",
    "swagger": "2.0",
    "paths": {
        "/graphql": {
            "get": {
                "summary": "GraphQL Playground and introspection endpoint",
                "operationId": "getGraphql",
                "tags": [
                    "graphql"
                ],
                "responses": {
                    "default": {
                        "schema": {
                            "type": "string"
                        },
                        "description": "Successful"
                    }
                }
            },
            "post": {
                "summary": "GraphQL API endpoint",
                "operationId": "postGraphql",
                "description": "Flexible, type-safe API for querying and mutating data. Supports introspection in development.",
                "tags": [
                    "graphql"
                ],
                "responses": {
                    "default": {
                        "schema": {
                            "type": "string"
                        },
                        "description": "Successful"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "summary": "Health check endpoint",
                "operationId": "getHealth",
                "description": "Returns server health status, uptime, and environment information. No authentication required.",
                "tags": [
                    "health"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Model1"
                        },
                        "description": "Server is healthy"
                    }
                }
            }
        },
        "/api/v1/appointments": {
            "get": {
                "summary": "Get all appointments with pagination and filters",
                "operationId": "getApiV1Appointments",
                "description": "**PHI Protected Endpoint** - Returns paginated list of appointments with comprehensive filtering options (nurse, student, status, type, date range). Includes appointment details, participant information, and status. Used for dashboards, reports, and scheduling views.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by nurse UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by appointment status",
                        "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "CANCELLED",
                            "NO_SHOW",
                            "RESCHEDULED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by appointment type",
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date (ISO 8601)",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date (ISO 8601)",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointments retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new appointment",
                "operationId": "postApiV1Appointments",
                "description": "**PHI Protected Endpoint** - Schedules a new appointment. Validates: (1) Time slot availability - checks for conflicts with existing appointments, (2) Business hours - ensures appointment is within nurse working hours, (3) Duration - validates 15-120 minute range, (4) Future date - start time must be in future. Automatically schedules reminders and creates audit trail.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model2"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Appointment created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid appointment data or time slot conflict"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student or nurse not found"
                    },
                    "409": {
                        "description": "Conflict - Time slot not available"
                    }
                }
            }
        },
        "/api/v1/contacts": {
            "get": {
                "summary": "Get all contacts with pagination and filters",
                "operationId": "getApiV1Contacts",
                "description": "Returns paginated list of contacts. Supports filtering by type, status, relation, and search.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "lastName",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "ASC",
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "name": "orderDirection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "guardian",
                            "staff",
                            "vendor",
                            "provider",
                            "other"
                        ],
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "isActive",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "relationTo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved contacts",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    }
                }
            },
            "post": {
                "summary": "Create new contact",
                "operationId": "postApiV1Contacts",
                "description": "Creates a new contact record. Requires firstName, lastName, and type.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model3"
                        }
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "201": {
                        "description": "Contact created successfully"
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1/documents": {
            "get": {
                "summary": "Get all documents with pagination and filters",
                "operationId": "getApiV1Documents",
                "description": "**PHI PROTECTED ENDPOINT** - Returns paginated list of documents. Supports comprehensive filtering by category (CONSENT_FORM, HEALTH_FORM, MEDICAL_REPORT, INCIDENT_REPORT, etc.), status, student, date range, and full-text search. Used for document library, compliance tracking, and record management. All access is logged for HIPAA compliance.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by document category",
                        "enum": [
                            "MEDICAL_RECORD",
                            "CONSENT_FORM",
                            "POLICY",
                            "INCIDENT_REPORT",
                            "TRAINING",
                            "ADMINISTRATIVE",
                            "STUDENT_FILE",
                            "INSURANCE",
                            "OTHER"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by document status",
                        "enum": [
                            "DRAFT",
                            "PENDING",
                            "APPROVED",
                            "REJECTED",
                            "ARCHIVED",
                            "EXPIRED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by uploader user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "uploadedBy",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Search term for title, description, or filename",
                        "minLength": 1,
                        "maxLength": 200,
                        "x-convert": {
                            "trim": true
                        },
                        "name": "searchTerm",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated tags to filter by",
                        "name": "tags",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter documents from this date",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter documents to this date",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Documents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Documents retrieved successfully with pagination metadata",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Upload new document",
                "operationId": "postApiV1Documents",
                "description": "**PHI PROTECTED ENDPOINT** - Creates new document record with file metadata. Supports multiple categories: MEDICAL_RECORD, CONSENT_FORM, INCIDENT_REPORT, STUDENT_FILE, INSURANCE, etc. File must be uploaded to storage first (separate upload endpoint). Validates file type, size (max 100MB), and required metadata. Creates initial audit trail entry. Default status: DRAFT.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model4"
                        }
                    }
                ],
                "tags": [
                    "Documents",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Document created successfully with audit trail entry"
                    },
                    "400": {
                        "description": "Validation error - Invalid document data or file metadata"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found (if studentId provided)"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/incidents": {
            "get": {
                "summary": "List all incident reports with pagination and filters",
                "operationId": "getApiV1Incidents",
                "description": "**CRITICAL PHI ENDPOINT** - Returns comprehensive paginated list of incident reports with extensive filtering: student, reporter, incident type (INJURY, ILLNESS, BEHAVIORAL, MEDICATION_ERROR, ALLERGIC_REACTION, EMERGENCY), severity (MINOR, MODERATE, SERIOUS, CRITICAL, LIFE_THREATENING), status (REPORTED, UNDER_REVIEW, FOLLOW_UP_REQUIRED, RESOLVED, ARCHIVED), date range, location, parent notification status, and follow-up requirements. Used for incident dashboards, compliance reports, and legal documentation. All access is logged for audit trail.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by reporter ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "reportedById",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident type",
                        "enum": [
                            "INJURY",
                            "ILLNESS",
                            "BEHAVIORAL",
                            "MEDICATION_ERROR",
                            "ALLERGIC_REACTION",
                            "EMERGENCY",
                            "OTHER"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity level",
                        "enum": [
                            "MINOR",
                            "MODERATE",
                            "SERIOUS",
                            "CRITICAL",
                            "LIFE_THREATENING"
                        ],
                        "name": "severity",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident status",
                        "enum": [
                            "REPORTED",
                            "UNDER_REVIEW",
                            "FOLLOW_UP_REQUIRED",
                            "RESOLVED",
                            "ARCHIVED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date (ISO 8601)",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date (ISO 8601)",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by parent notification status",
                        "name": "parentNotified",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by follow-up requirement",
                        "name": "followUpRequired",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident location",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "location",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Incidents",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Incident reports retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new incident report",
                "operationId": "postApiV1Incidents",
                "description": "**CRITICAL PHI ENDPOINT** - Creates comprehensive incident report with mandatory fields: student ID, incident type, severity level, detailed description (10-5000 chars), location, actions taken, and occurrence timestamp. Optional: witness list, parent notification status, follow-up requirements, evidence attachments, insurance claim info. Automatically logs reporter from JWT. High/critical severity incidents trigger automatic parent notifications if emergency contacts exist. All creation is logged for legal compliance and audit trail.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model12"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Incident report created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid incident data or missing required fields"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications": {
            "get": {
                "summary": "Get all medications with pagination",
                "operationId": "getApiV1Medications",
                "description": "Returns a paginated list of medications in the system. Supports search functionality. **PHI Protected Endpoint** - Access is audited.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for medication name",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "search",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Medications",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medications retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create a new medication",
                "operationId": "postApiV1Medications",
                "description": "Adds a new medication to the system formulary. Requires NURSE or ADMIN role. **PHI Protected Endpoint**. Includes NDC validation, DEA schedule for controlled substances, and witness requirements.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model13"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Medication created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid medication data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    }
                }
            }
        },
        "/api/v1/students": {
            "get": {
                "summary": "Get all students with pagination and filters",
                "operationId": "getApiV1Students",
                "description": "**PHI Protected Endpoint** - Returns paginated list of students. Supports filtering by grade, assigned nurse, active status, allergies, and medications. Search includes student name and ID. All access is audited.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for student name or student ID",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "search",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by grade level",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "grade",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by assigned nurse ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter students with allergies",
                        "name": "hasAllergies",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter students with active medications",
                        "name": "hasMedications",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Students retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new student",
                "operationId": "postApiV1Students",
                "description": "**PHI Protected Endpoint** - Enrolls a new student in the system. Requires admin or nurse role. Validates date of birth (cannot be future date), blood type format, and emergency contact information. Creates audit trail entry.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model14"
                        }
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Student created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid student data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires ADMIN or NURSE role"
                    },
                    "409": {
                        "description": "Conflict - Student with this ID already exists"
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "summary": "Get all users with pagination and filters",
                "operationId": "getApiV1Users",
                "description": "Returns paginated list of users. Supports filtering by role, active status, and search by name/email.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email",
                        "name": "search",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by role",
                        "enum": [
                            "ADMIN",
                            "NURSE",
                            "SCHOOL_ADMIN",
                            "DISTRICT_ADMIN",
                            "COUNSELOR",
                            "VIEWER"
                        ],
                        "name": "role",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "success": true,
                            "data": {
                                "users": "Array of user objects",
                                "pagination": {
                                    "page": 1,
                                    "limit": 20,
                                    "total": 150,
                                    "totalPages": 8
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated"
                    }
                }
            },
            "post": {
                "summary": "Create new user",
                "operationId": "postApiV1Users",
                "description": "**ADMIN ONLY** - Creates a new user account. Requires ADMIN or DISTRICT_ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model15"
                        }
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "409": {
                        "description": "User already exists with this email"
                    }
                }
            }
        },
        "/api/v1/access-control/ip-restrictions": {
            "get": {
                "summary": "Get IP restrictions",
                "operationId": "getApiV1AccesscontrolIprestrictions",
                "description": "Returns all IP allow/deny rules. Admin only.",
                "tags": [
                    "Access Control",
                    "IP Restrictions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns list of IP restrictions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            },
            "post": {
                "summary": "Add IP restriction",
                "operationId": "postApiV1AccesscontrolIprestrictions",
                "description": "Creates new IP allow/deny rule. Automatically tracks creator from auth token. Admin only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model17"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "IP Restrictions",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - IP restriction created"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/access-control/permissions": {
            "get": {
                "summary": "Get all permissions",
                "operationId": "getApiV1AccesscontrolPermissions",
                "description": "Returns all available permissions in the system. Requires authentication.",
                "tags": [
                    "Access Control",
                    "Permissions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns list of permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Create new permission",
                "operationId": "postApiV1AccesscontrolPermissions",
                "description": "Creates a new permission. Admin only. Permissions define resource-action pairs.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model18"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "Permissions",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - Permission created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "409": {
                        "description": "Conflict - Permission already exists"
                    }
                }
            }
        },
        "/api/v1/access-control/roles": {
            "get": {
                "summary": "Get all roles",
                "operationId": "getApiV1AccesscontrolRoles",
                "description": "Returns all roles in the system. Requires authentication.",
                "tags": [
                    "Access Control",
                    "Roles",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns list of roles",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "post": {
                "summary": "Create new role",
                "operationId": "postApiV1AccesscontrolRoles",
                "description": "Creates a new role. Admin only. Can optionally assign permissions during creation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model19"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "Roles",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - Role created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "409": {
                        "description": "Conflict - Role name already exists"
                    }
                }
            }
        },
        "/api/v1/access-control/security-incidents": {
            "get": {
                "summary": "Get security incidents",
                "operationId": "getApiV1AccesscontrolSecurityincidents",
                "description": "Returns paginated list of security incidents with optional filters. Admin only.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Security incident type",
                        "enum": [
                            "UNAUTHORIZED_ACCESS",
                            "FAILED_LOGIN",
                            "BRUTE_FORCE",
                            "IP_BLOCKED",
                            "SUSPICIOUS_ACTIVITY",
                            "DATA_BREACH",
                            "MALWARE",
                            "PHISHING",
                            "OTHER"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Security incident severity",
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "CRITICAL"
                        ],
                        "name": "severity",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Security incident status",
                        "enum": [
                            "OPEN",
                            "INVESTIGATING",
                            "RESOLVED",
                            "CLOSED",
                            "FALSE_POSITIVE"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter incidents after this date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter incidents before this date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Access Control",
                    "Security Incidents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns paginated incidents",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            },
            "post": {
                "summary": "Create security incident",
                "operationId": "postApiV1AccesscontrolSecurityincidents",
                "description": "Creates a new security incident record. Automatically tracks creator from auth token. Admin only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model22"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "Security Incidents",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - Incident created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/access-control/statistics": {
            "get": {
                "summary": "Get security statistics",
                "operationId": "getApiV1AccesscontrolStatistics",
                "description": "Returns comprehensive security statistics (roles, permissions, incidents, sessions, etc.). Admin only.",
                "tags": [
                    "Access Control",
                    "Statistics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns security statistics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/analytics/health-metrics": {
            "get": {
                "summary": "Get aggregated health metrics",
                "operationId": "getApiV1AnalyticsHealthmetrics",
                "description": "Returns comprehensive health metrics for specified time period. Includes visit counts, incident rates, medication administration counts, chronic condition prevalence, immunization compliance, and emergency contact coverage. Supports school/district-level aggregation and period-over-period comparison. Essential for population health management and performance tracking.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by district ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "districtId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Metrics start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Metrics end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "array",
                        "description": "Specific metric types to retrieve",
                        "items": {
                            "type": "string",
                            "enum": [
                                "HEALTH_VISIT_COUNT",
                                "INCIDENT_COUNT",
                                "MEDICATION_ADMINISTRATION_COUNT",
                                "CHRONIC_CONDITION_PREVALENCE",
                                "IMMUNIZATION_COMPLIANCE_RATE",
                                "EMERGENCY_CONTACT_COVERAGE",
                                "APPOINTMENT_NO_SHOW_RATE",
                                "AVERAGE_RESPONSE_TIME",
                                "STUDENT_HEALTH_SCORE"
                            ]
                        },
                        "collectionFormat": "multi",
                        "name": "metricTypes",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Aggregation level for metrics",
                        "default": "SCHOOL",
                        "enum": [
                            "STUDENT",
                            "CLASS",
                            "GRADE",
                            "SCHOOL",
                            "DISTRICT"
                        ],
                        "name": "aggregationLevel",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include comparison with previous period",
                        "default": true,
                        "name": "compareWithPrevious",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Health Metrics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health metrics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/health-trends": {
            "get": {
                "summary": "Get health trend analysis",
                "operationId": "getApiV1AnalyticsHealthtrends",
                "description": "Provides time-series trend analysis for health conditions and medications. Tracks changes over time with daily/weekly/monthly/quarterly/yearly aggregation. Identifies seasonal patterns, emerging health issues, and medication usage trends. Supports optional predictive forecasting for proactive health management. Critical for identifying outbreaks and planning interventions.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by district ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "districtId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Time period for trend grouping",
                        "default": "MONTHLY",
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "QUARTERLY",
                            "YEARLY",
                            "CUSTOM"
                        ],
                        "name": "timePeriod",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "array",
                        "description": "Metrics to include in trend analysis",
                        "items": {
                            "type": "string",
                            "enum": [
                                "HEALTH_VISIT_COUNT",
                                "INCIDENT_COUNT",
                                "MEDICATION_ADMINISTRATION_COUNT",
                                "CHRONIC_CONDITION_PREVALENCE",
                                "IMMUNIZATION_COMPLIANCE_RATE",
                                "EMERGENCY_CONTACT_COVERAGE",
                                "APPOINTMENT_NO_SHOW_RATE",
                                "AVERAGE_RESPONSE_TIME",
                                "STUDENT_HEALTH_SCORE"
                            ]
                        },
                        "collectionFormat": "multi",
                        "name": "metrics",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include predictive forecasting in trends",
                        "default": false,
                        "name": "includeForecasting",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Health Metrics",
                    "Trends",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health trends retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/summary": {
            "get": {
                "summary": "Get overall platform summary",
                "operationId": "getApiV1AnalyticsSummary",
                "description": "System-wide health platform analytics. Aggregates data across districts and schools: total students, health visits, medication administrations, incidents, immunization compliance. Shows system-wide alerts and operational status. Supports multi-school/district filtering. Used for district-level reporting, board presentations, and system health monitoring. Provides big-picture view of healthcare operations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by district ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "districtId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "array",
                        "description": "Filter by multiple school IDs",
                        "items": {
                            "type": "string",
                            "x-format": {
                                "guid": true
                            }
                        },
                        "collectionFormat": "multi",
                        "name": "schoolIds",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Summary start date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Summary end date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include detailed breakdowns",
                        "default": false,
                        "name": "includeDetails",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Summary",
                    "Platform",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Platform summary retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/appointments/statistics": {
            "get": {
                "summary": "Get appointment statistics",
                "operationId": "getApiV1AppointmentsStatistics",
                "description": "Returns aggregate appointment statistics including: Total appointments, breakdown by status (scheduled, completed, cancelled, no-show), average duration, utilization rate, no-show rate, and peak times. Optionally filtered by nurse and date range. Used for dashboards, reports, and performance analysis. No PHI in aggregated data.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter statistics by nurse UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start date for statistics (ISO 8601)",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End date for statistics (ISO 8601)",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Analytics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or nurse role required"
                    }
                }
            }
        },
        "/api/v1/appointments/waitlist": {
            "get": {
                "summary": "Get appointment waitlist entries",
                "operationId": "getApiV1AppointmentsWaitlist",
                "description": "**PHI Protected Endpoint** - Returns waitlist entries with optional filtering by nurse, status (PENDING, CONTACTED, SCHEDULED, CANCELLED), and priority. Ordered by priority and creation date. Used for waitlist management dashboard and appointment slot optimization.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by preferred nurse",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by waitlist status",
                        "enum": [
                            "PENDING",
                            "CONTACTED",
                            "SCHEDULED",
                            "CANCELLED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority",
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "URGENT"
                        ],
                        "name": "priority",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Waitlist",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Waitlist entries retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Nurse or admin role required"
                    }
                }
            },
            "post": {
                "summary": "Add student to appointment waitlist",
                "operationId": "postApiV1AppointmentsWaitlist",
                "description": "**PHI Protected Endpoint** - Adds student to waitlist when desired appointment slots are unavailable. Supports priority levels (LOW, MEDIUM, HIGH, URGENT), preferred nurse, and preferred dates. When appointments are cancelled, waitlist is automatically processed to fill slots. Used for managing appointment demand and reducing wait times.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model26"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Waitlist",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Student added to waitlist successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid waitlist data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "409": {
                        "description": "Conflict - Student already on waitlist for this type"
                    }
                }
            }
        },
        "/api/v1/appointments/{id}": {
            "get": {
                "summary": "Get appointment by ID",
                "operationId": "getApiV1AppointmentsId",
                "description": "**PHI Protected Endpoint** - Returns detailed appointment information including student details, nurse assignment, scheduling information, status history, and any associated notes. Access is logged for compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    }
                }
            },
            "put": {
                "summary": "Update appointment",
                "operationId": "putApiV1AppointmentsId",
                "description": "**PHI Protected Endpoint** - Updates appointment details including time, duration, type, priority, or notes. Validates time slot availability if rescheduling. Status transitions (cancel, complete, no-show) use dedicated endpoints. Updates automatically reschedule reminders. All changes logged for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model154"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data or time conflict"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    },
                    "409": {
                        "description": "Conflict - New time slot not available"
                    }
                }
            }
        },
        "/api/v1/audit/anomalies": {
            "get": {
                "summary": "Detect security anomalies",
                "operationId": "getApiV1AuditAnomalies",
                "description": "**SECURITY CRITICAL** - Detects anomalous behavior patterns in audit logs. Identifies: suspicious logins (multiple failures, brute force attempts), unusual PHI access (abnormal volumes, patterns), and after-hours access (outside business hours). Returns flagged activities with risk levels for investigation. Security/Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group statistics by field",
                        "default": "action",
                        "enum": [
                            "action",
                            "entityType",
                            "user",
                            "hour",
                            "day"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Security",
                    "Anomalies",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Anomalies detected and analyzed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid date range"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Security Officer or Admin only"
                    }
                }
            }
        },
        "/api/v1/audit/compliance-report": {
            "get": {
                "summary": "Generate HIPAA compliance report",
                "operationId": "getApiV1AuditCompliancereport",
                "description": "**HIPAA COMPLIANCE ENDPOINT** - Generates comprehensive compliance report for HIPAA audits. Includes PHI access summary (total access, success rate), access by type and category, top users and students by access count, failed access attempts, and compliance metrics. Required for periodic HIPAA compliance reviews. Compliance Officer only.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group statistics by field",
                        "default": "action",
                        "enum": [
                            "action",
                            "entityType",
                            "user",
                            "hour",
                            "day"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid date range"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer only"
                    }
                }
            }
        },
        "/api/v1/audit/export": {
            "get": {
                "summary": "Export audit logs",
                "operationId": "getApiV1AuditExport",
                "description": "Exports audit logs for specified date range in CSV, JSON, or PDF format. Supports filtering by user, entity type, and action. Used for compliance reporting, external audits, and long-term archival. Large exports may take time to process. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Export start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Export end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Export format",
                        "default": "CSV",
                        "enum": [
                            "JSON",
                            "CSV",
                            "PDF"
                        ],
                        "name": "format",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by entity type",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "entityType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type",
                        "name": "action",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Export",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs exported successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid export parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/audit/logs": {
            "get": {
                "summary": "List audit logs with filtering and pagination",
                "operationId": "getApiV1AuditLogs",
                "description": "**CRITICAL HIPAA ENDPOINT** - Returns paginated audit trail for all system actions. Supports filtering by user, entity type, action, date range, and IP address. Essential for HIPAA compliance audits and security investigations. All access to this endpoint is also logged.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by entity type (e.g., STUDENT, HEALTH_RECORD, MEDICATION)",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "entityType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type",
                        "enum": [
                            "CREATE",
                            "READ",
                            "VIEW",
                            "ACCESS",
                            "UPDATE",
                            "DELETE",
                            "LOGIN",
                            "LOGOUT",
                            "EXPORT",
                            "IMPORT",
                            "BACKUP",
                            "RESTORE",
                            "SECURITY_EVENT"
                        ],
                        "name": "action",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP address",
                        "x-format": {
                            "ip": {
                                "cidr": "optional"
                            }
                        },
                        "name": "ipAddress",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or Compliance Officer only"
                    }
                }
            },
            "post": {
                "summary": "Create audit log entry",
                "operationId": "postApiV1AuditLogs",
                "description": "Manually create audit log entry for system actions. Automatically captures IP address, user agent, and timestamp. Used for logging application-level events that require audit trails.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model28"
                        }
                    }
                ],
                "tags": [
                    "Audit",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Audit log created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid audit data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/audit/phi-access": {
            "get": {
                "summary": "Get PHI access logs",
                "operationId": "getApiV1AuditPhiaccess",
                "description": "**CRITICAL HIPAA ENDPOINT** - Returns comprehensive Protected Health Information (PHI) access audit trail. Tracks who accessed what student data, when, and from where. Includes access type (VIEW, EDIT, EXPORT), data category, and user details. Required for HIPAA compliance. Admin/Compliance Officer only.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by access type",
                        "enum": [
                            "VIEW",
                            "EDIT",
                            "EXPORT",
                            "PRINT",
                            "DELETE"
                        ],
                        "name": "accessType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by data category",
                        "enum": [
                            "HEALTH_RECORD",
                            "MEDICATION",
                            "ALLERGY",
                            "CHRONIC_CONDITION",
                            "VACCINATION",
                            "MENTAL_HEALTH",
                            "EMERGENCY_CONTACT",
                            "FULL_PROFILE"
                        ],
                        "name": "dataCategory",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "PHI",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "PHI access logs retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or Compliance Officer only"
                    }
                }
            },
            "post": {
                "summary": "Log PHI access",
                "operationId": "postApiV1AuditPhiaccess",
                "description": "**CRITICAL HIPAA ENDPOINT** - Records PHI access for compliance. Logs user, student, access type (VIEW/EDIT/EXPORT/PRINT/DELETE), data category (HEALTH_RECORD, MEDICATION, etc.), success status, and automatically captures IP address and timestamp. Required by HIPAA Security Rule 45 CFR \u00c2\u00a7 164.308(a)(1)(ii)(D).",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model29"
                        }
                    }
                ],
                "tags": [
                    "Audit",
                    "PHI",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "PHI access logged successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid access log data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/audit/security-analysis": {
            "get": {
                "summary": "Get security analysis",
                "operationId": "getApiV1AuditSecurityanalysis",
                "description": "**SECURITY CRITICAL** - Performs comprehensive security analysis: suspicious login patterns (failed attempts, brute force), unusual PHI access (high volume, wide access, after-hours), data exfiltration detection (bulk exports, rapid downloads), and access pattern analysis. Returns risk levels, flagged users, and security recommendations. Admin/Security Officer only.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of security analysis to perform",
                        "default": "COMPREHENSIVE",
                        "enum": [
                            "SUSPICIOUS_LOGINS",
                            "UNUSUAL_PHI_ACCESS",
                            "AFTER_HOURS_ACCESS",
                            "DATA_EXFILTRATION",
                            "COMPREHENSIVE"
                        ],
                        "name": "analysisType",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Security",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Security analysis completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid analysis parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or Security Officer only"
                    }
                }
            }
        },
        "/api/v1/audit/statistics": {
            "get": {
                "summary": "Get audit statistics",
                "operationId": "getApiV1AuditStatistics",
                "description": "Returns comprehensive audit statistics for specified date range. Includes total logs, unique users, action distribution (CREATE, READ, UPDATE, DELETE), entity type distribution, hourly/daily trends, and top users by activity. Used for compliance dashboards and system usage analysis.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Group statistics by field",
                        "default": "action",
                        "enum": [
                            "action",
                            "entityType",
                            "user",
                            "hour",
                            "day"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Statistics",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid date range"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "summary": "Get current authenticated user",
                "operationId": "getApiV1AuthMe",
                "description": "Returns profile information for the currently authenticated user.",
                "tags": [
                    "Authentication",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current user retrieved",
                        "schema": {
                            "success": true,
                            "data": {
                                "id": "uuid",
                                "email": "user@example.com",
                                "firstName": "John",
                                "lastName": "Doe",
                                "role": "NURSE"
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated"
                    }
                }
            }
        },
        "/api/v1/communications/broadcasts": {
            "get": {
                "summary": "List broadcast messages",
                "operationId": "getApiV1CommunicationsBroadcasts",
                "description": "**PHI Protected Endpoint** - Returns paginated list of broadcast messages (messages with multiple recipients). Supports filtering by category, priority, and date range. Shows recipient counts, delivery statistics, and message status. Used for broadcast history and compliance reporting.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "EMERGENCY",
                            "HEALTH_UPDATE",
                            "APPOINTMENT_REMINDER",
                            "MEDICATION_REMINDER",
                            "GENERAL",
                            "INCIDENT_NOTIFICATION",
                            "COMPLIANCE"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "URGENT"
                        ],
                        "name": "priority",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Broadcasts retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create emergency broadcast message",
                "operationId": "postApiV1CommunicationsBroadcasts",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Sends broadcast message to targeted audience groups. Supports advanced audience targeting by grade level, school, nurse assignment, or specific student IDs. Can include emergency contacts and parents. Validates HIPAA compliance and enforces broadcast limits (max 5000 recipients). Emergency category requires URGENT priority. Supports immediate or scheduled delivery across multiple channels.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model38"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Broadcast created and sent/scheduled successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid audience criteria, HIPAA violation, or recipient limit exceeded"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions for broadcast messaging"
                    }
                }
            }
        },
        "/api/v1/communications/messages": {
            "get": {
                "summary": "List messages with pagination and filters",
                "operationId": "getApiV1CommunicationsMessages",
                "description": "**PHI Protected Endpoint** - Returns paginated list of messages. Supports filtering by sender, recipient, category, priority, status, and date range. Includes sender details and delivery summary. Access is audited for compliance.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "senderId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "recipientId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "EMERGENCY",
                            "HEALTH_UPDATE",
                            "APPOINTMENT_REMINDER",
                            "MEDICATION_REMINDER",
                            "GENERAL",
                            "INCIDENT_NOTIFICATION",
                            "COMPLIANCE"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "URGENT"
                        ],
                        "name": "priority",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "SENT",
                            "DELIVERED",
                            "FAILED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Send new message to specific recipients",
                "operationId": "postApiV1CommunicationsMessages",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Sends message to specified recipients via selected channels (EMAIL, SMS, PUSH_NOTIFICATION, VOICE). Supports immediate or scheduled delivery. Validates HIPAA compliance, message content limits, and recipient contact information. Maximum 100 recipients per message. Returns message record and delivery status for each recipient/channel combination.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model47"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Message sent successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid message data or HIPAA violation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions"
                    }
                }
            }
        },
        "/api/v1/communications/scheduled": {
            "get": {
                "summary": "List scheduled messages",
                "operationId": "getApiV1CommunicationsScheduled",
                "description": "**PHI Protected Endpoint** - Returns list of scheduled messages with various filters. Can filter by status (PENDING, PROCESSING, SENT, FAILED, CANCELLED, PAUSED), schedule type (ONE_TIME, RECURRING, CAMPAIGN), campaign ID, and date range. Shows schedule details, recipient counts, and current processing status. Used for managing message queue and monitoring scheduled communications.",
                "parameters": [
                    {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "PROCESSING",
                            "SENT",
                            "FAILED",
                            "CANCELLED",
                            "PAUSED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "ONE_TIME",
                            "RECURRING",
                            "CAMPAIGN"
                        ],
                        "name": "scheduleType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "name": "campaignId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Communications",
                    "Scheduled",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Scheduled messages retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Schedule message for future delivery",
                "operationId": "postApiV1CommunicationsScheduled",
                "description": "**PHI Protected Endpoint** - Schedules a message for delivery at a specific future time. Supports advanced recipient targeting, rate limiting/throttling, template substitution, and timezone-aware scheduling. Messages are queued and processed by background jobs. Can specify max delivery rates to prevent system overload. Used for planned communications, reminders, and campaigns.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model53"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Scheduled",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Message scheduled successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid schedule time or recipient configuration"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions for scheduled messaging"
                    }
                }
            }
        },
        "/api/v1/communications/statistics": {
            "get": {
                "summary": "Get messaging statistics",
                "operationId": "getApiV1CommunicationsStatistics",
                "description": "Returns aggregated communication statistics. Shows total messages, breakdown by category/priority/channel, delivery success rates, and trends. Can filter by date range and sender. No PHI exposed - aggregated data only. Used for dashboards, reports, and system monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "senderId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Communications",
                    "Statistics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/communications/templates": {
            "get": {
                "summary": "List message templates",
                "operationId": "getApiV1CommunicationsTemplates",
                "description": "Returns available message templates for quick message composition. Templates support variable substitution like {{studentName}}, {{date}}, etc. Can filter by message type (EMAIL, SMS, etc.) and category. Only active templates returned by default.",
                "parameters": [
                    {
                        "type": "string",
                        "enum": [
                            "EMAIL",
                            "SMS",
                            "PUSH_NOTIFICATION",
                            "VOICE"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "enum": [
                            "EMERGENCY",
                            "HEALTH_UPDATE",
                            "APPOINTMENT_REMINDER",
                            "MEDICATION_REMINDER",
                            "GENERAL",
                            "INCIDENT_NOTIFICATION",
                            "COMPLIANCE"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "default": "true",
                        "enum": [
                            "true",
                            "false"
                        ],
                        "name": "isActive",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Communications",
                    "Templates",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Templates retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create message template",
                "operationId": "postApiV1CommunicationsTemplates",
                "description": "Creates a new reusable message template. Templates support variable substitution using {{variableName}} syntax. Variables are automatically extracted from content. Template validation ensures content meets requirements for specified message type (e.g., SMS character limits). Requires NURSE or ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model56"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Templates",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Template created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid template data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    }
                }
            }
        },
        "/api/v1/compliance/checklists": {
            "get": {
                "summary": "List compliance checklists",
                "operationId": "getApiV1ComplianceChecklists",
                "description": "Returns paginated compliance checklist items. Supports filtering by report ID, category (HIPAA_PRIVACY, HIPAA_SECURITY, FERPA, etc.), and status (PENDING, IN_PROGRESS, COMPLETED, NOT_APPLICABLE, FAILED). Used for compliance task tracking and verification.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "reportId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by checklist item status",
                        "enum": [
                            "PENDING",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "NOT_APPLICABLE",
                            "FAILED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Compliance",
                    "Checklists",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance checklists retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Create compliance checklist",
                "operationId": "postApiV1ComplianceChecklists",
                "description": "Creates new compliance checklist item. Can be standalone or associated with a compliance report. Includes requirement description, category, and optional due date. Automatically sets status to PENDING. Compliance Officer only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model57"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Checklists",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Checklist item created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid checklist data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer only"
                    }
                }
            }
        },
        "/api/v1/compliance/policies": {
            "get": {
                "summary": "List policy documents",
                "operationId": "getApiV1CompliancePolicies",
                "description": "Returns list of policy documents. Supports filtering by category (HIPAA_PRIVACY, HIPAA_SECURITY, FERPA, DATA_RETENTION, INCIDENT_RESPONSE, ACCESS_CONTROL, TRAINING) and status (DRAFT, ACTIVE, ARCHIVED, SUPERSEDED). Used for policy management and staff training.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by policy category",
                        "enum": [
                            "HIPAA_PRIVACY",
                            "HIPAA_SECURITY",
                            "FERPA",
                            "DATA_RETENTION",
                            "INCIDENT_RESPONSE",
                            "ACCESS_CONTROL",
                            "TRAINING",
                            "GENERAL"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by policy status",
                        "enum": [
                            "DRAFT",
                            "ACTIVE",
                            "ARCHIVED",
                            "SUPERSEDED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Compliance",
                    "Policies",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Policies retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Create policy document",
                "operationId": "postApiV1CompliancePolicies",
                "description": "Creates new policy document. Requires title, category, content (minimum 100 characters for legal validity), version number, and effective date. Automatically sets status to DRAFT. Version-controlled for policy lifecycle management. Compliance Officer or Admin only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model60"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Policies",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Policy created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid policy data or version format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer or Admin only"
                    }
                }
            }
        },
        "/api/v1/compliance/reports": {
            "get": {
                "summary": "List compliance reports",
                "operationId": "getApiV1ComplianceReports",
                "description": "Returns paginated list of compliance reports. Supports filtering by report type (HIPAA, FERPA, PRIVACY, SECURITY, BREACH, RISK_ASSESSMENT, TRAINING, AUDIT), status (PENDING, IN_PROGRESS, COMPLIANT, NON_COMPLIANT), and period (DAILY, WEEKLY, MONTHLY, QUARTERLY, ANNUAL). Used for compliance dashboard and report tracking.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by report type",
                        "enum": [
                            "HIPAA",
                            "FERPA",
                            "PRIVACY",
                            "SECURITY",
                            "BREACH",
                            "RISK_ASSESSMENT",
                            "TRAINING",
                            "AUDIT",
                            "GENERAL"
                        ],
                        "name": "reportType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by compliance status",
                        "enum": [
                            "PENDING",
                            "IN_PROGRESS",
                            "COMPLIANT",
                            "NON_COMPLIANT",
                            "NEEDS_REVIEW"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by reporting period",
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "QUARTERLY",
                            "ANNUAL"
                        ],
                        "name": "period",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance reports retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer or Admin only"
                    }
                }
            },
            "post": {
                "summary": "Create compliance report",
                "operationId": "postApiV1ComplianceReports",
                "description": "Creates new compliance report. Automatically sets status to PENDING and records creator. Report types: HIPAA (privacy/security rule compliance), FERPA (education records), PRIVACY (data protection), SECURITY (access controls), BREACH (incident reporting), RISK_ASSESSMENT, TRAINING, AUDIT. Compliance Officer only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model61"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Compliance report created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid report data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer only"
                    }
                }
            }
        },
        "/api/v1/compliance/statistics": {
            "get": {
                "summary": "Get compliance statistics",
                "operationId": "getApiV1ComplianceStatistics",
                "description": "Returns comprehensive compliance metrics: report statistics (total, compliant, non-compliant, pending), compliance rate, policy statistics (active, acknowledged), consent statistics (active, withdrawn), and checklist completion rate. Supports custom date ranges. Used for compliance dashboards and executive reporting.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Statistics period",
                        "default": "MONTHLY",
                        "enum": [
                            "DAILY",
                            "WEEKLY",
                            "MONTHLY",
                            "QUARTERLY",
                            "ANNUAL",
                            "CUSTOM"
                        ],
                        "name": "period",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start date (required if period is CUSTOM)",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end date (required if period is CUSTOM)",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Compliance",
                    "Statistics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid date range for custom period"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/contacts/search": {
            "get": {
                "summary": "Search contacts",
                "operationId": "getApiV1ContactsSearch",
                "description": "Search contacts by name, email, or organization",
                "parameters": [
                    {
                        "type": "string",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully searched contacts",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1/contacts/stats": {
            "get": {
                "summary": "Get contact statistics",
                "operationId": "getApiV1ContactsStats",
                "description": "Returns statistics about contacts by type",
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved statistics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1/contacts/{id}": {
            "get": {
                "summary": "Get contact by ID",
                "operationId": "getApiV1ContactsId",
                "description": "Returns detailed information about a specific contact",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved contact",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            },
            "put": {
                "summary": "Update contact",
                "operationId": "putApiV1ContactsId",
                "description": "Updates an existing contact record",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model155"
                        }
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Contact updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete contact",
                "operationId": "deleteApiV1ContactsId",
                "description": "Soft deletes a contact record",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Contact deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            }
        },
        "/api/v1/documents/analytics": {
            "get": {
                "summary": "Get document analytics and statistics",
                "operationId": "getApiV1DocumentsAnalytics",
                "description": "Returns comprehensive document statistics: total count, breakdown by category (consent forms, medical records, etc.), breakdown by status (draft, approved, archived), total storage size, and recent document count (last 7 days). Used for dashboard widgets, compliance reporting, and capacity planning. No PHI - aggregate data only.",
                "tags": [
                    "Documents",
                    "Analytics",
                    "Reporting",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Analytics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/categories": {
            "get": {
                "summary": "Get document categories with metadata",
                "operationId": "getApiV1DocumentsCategories",
                "description": "Returns all available document categories with rich metadata: category name, description, whether signature is required, retention period (years), and current document count. Used for dropdowns, validation, and UI guidance. Includes MEDICAL_RECORD (7yr), CONSENT_FORM (7yr), INCIDENT_REPORT (7yr), POLICY (5yr), INSURANCE (7yr), etc.",
                "tags": [
                    "Documents",
                    "Metadata",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Categories retrieved successfully with metadata",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/expiring": {
            "get": {
                "summary": "Get expiring documents",
                "operationId": "getApiV1DocumentsExpiring",
                "description": "Returns documents approaching retention/expiration date within specified days (default 30). Ordered by expiration date (soonest first). Used for compliance alerts and proactive renewal workflows. Helps ensure consent forms, medical authorizations, and insurance documents are renewed before expiration. Excludes already ARCHIVED documents.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of days to look ahead for expiring documents",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 365,
                        "name": "days",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Documents",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Expiring documents retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/search": {
            "get": {
                "summary": "Search documents by query",
                "operationId": "getApiV1DocumentsSearch",
                "description": "**PHI PROTECTED ENDPOINT** - Full-text search across document titles, descriptions, and filenames. Supports additional filtering by category, status, and student. Case-insensitive partial matching. Returns max 50 results. Used for quick document lookup and compliance searches. All searches logged for security auditing.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query string",
                        "minLength": 1,
                        "maxLength": 200,
                        "x-convert": {
                            "trim": true
                        },
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter search by category",
                        "enum": [
                            "MEDICAL_RECORD",
                            "CONSENT_FORM",
                            "POLICY",
                            "INCIDENT_REPORT",
                            "TRAINING",
                            "ADMINISTRATIVE",
                            "STUDENT_FILE",
                            "INSURANCE",
                            "OTHER"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter search by status",
                        "enum": [
                            "DRAFT",
                            "PENDING",
                            "APPROVED",
                            "REJECTED",
                            "ARCHIVED",
                            "EXPIRED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter search by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Documents",
                    "Search",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Search results returned successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Query must be at least 1 character"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/templates": {
            "get": {
                "summary": "List all document templates",
                "operationId": "getApiV1DocumentsTemplates",
                "description": "Returns all available document templates for form generation. Templates include consent forms, health assessment forms, incident reports, and policy acknowledgment forms. Can filter by category. Used for standardized document creation and workflow automation. Templates include field definitions and validation rules.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter templates by category",
                        "enum": [
                            "MEDICAL_RECORD",
                            "CONSENT_FORM",
                            "POLICY",
                            "INCIDENT_REPORT",
                            "TRAINING",
                            "ADMINISTRATIVE",
                            "STUDENT_FILE",
                            "INSURANCE",
                            "OTHER"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Documents",
                    "Templates",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Templates retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}": {
            "get": {
                "summary": "Get document by ID",
                "operationId": "getApiV1DocumentsId",
                "description": "**PHI PROTECTED ENDPOINT** - Returns complete document metadata including file info, signatures, version history (last 5 versions), audit trail (last 50 entries), and access tracking. Used for document detail view and verification. Access is logged for HIPAA compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Document retrieved successfully with full metadata",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "summary": "Update document metadata",
                "operationId": "putApiV1DocumentsId",
                "description": "**PHI PROTECTED ENDPOINT** - Updates document metadata (title, description, tags, status, retention date, access level). Cannot modify file content - use versioning instead. Status changes: DRAFT \u00e2\u2020\u2019 PENDING \u00e2\u2020\u2019 APPROVED/REJECTED. All updates logged with timestamp and user for complete audit trail. Cannot modify ARCHIVED or EXPIRED documents.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model158"
                        }
                    }
                ],
                "tags": [
                    "Documents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Document updated successfully with audit entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data or status transition"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Cannot modify archived/expired documents"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "summary": "Delete/archive document",
                "operationId": "deleteApiV1DocumentsId",
                "description": "**PHI PROTECTED ENDPOINT** - Deletes document record. Some categories (MEDICAL_RECORD, CONSENT_FORM) may be archived instead of deleted for compliance. Creates audit trail entry before deletion. Cascade deletes signatures and audit entries. Requires appropriate permissions. Admin or document owner only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions or undeletable category"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/statistics": {
            "get": {
                "summary": "Get emergency contact statistics",
                "operationId": "getApiV1EmergencycontactsStatistics",
                "description": "Returns aggregate statistics for emergency contacts including total contacts, breakdown by priority level, and count of students without emergency contacts (critical for compliance). Used for dashboard displays and administrative reporting. No PHI exposed in aggregated data.",
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "Analytics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/{id}": {
            "get": {
                "summary": "Get emergency contact by ID",
                "operationId": "getApiV1EmergencycontactsId",
                "description": "**PHI Protected Endpoint** - Returns detailed information for a specific emergency contact including verification status and notification preferences.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency contact UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Emergency contact retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            },
            "put": {
                "summary": "Update emergency contact",
                "operationId": "putApiV1EmergencycontactsId",
                "description": "**PHI Protected Endpoint** - Updates emergency contact information. Business rules: Cannot remove last PRIMARY contact. Cannot deactivate last active PRIMARY contact. Must maintain email address if email notification channel is enabled. All changes are audited for compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency contact UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model163"
                        }
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Emergency contact updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data or business rule violation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "409": {
                        "description": "Conflict - Business rule violation (e.g., removing last PRIMARY)"
                    }
                }
            },
            "delete": {
                "summary": "Delete emergency contact (soft delete)",
                "operationId": "deleteApiV1EmergencycontactsId",
                "description": "**PHI Protected Endpoint** - Soft-deletes an emergency contact by setting isActive=false. Cannot delete the only active PRIMARY contact - student must have at least one active PRIMARY contact for emergency situations. Historical records are preserved for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency contact UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Emergency contact deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "409": {
                        "description": "Conflict - Cannot delete last PRIMARY contact"
                    }
                }
            }
        },
        "/api/v1/health-assessments/high-risk-students": {
            "get": {
                "summary": "Get list of high-risk students",
                "operationId": "getApiV1HealthassessmentsHighriskstudents",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns students with health risk scores above the specified threshold. Includes risk factors, priority interventions needed, and care team assignments. Used for proactive health management.",
                "parameters": [
                    {
                        "type": "number",
                        "default": 50,
                        "minimum": 0,
                        "maximum": 100,
                        "name": "minScore",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Healthcare",
                    "Administration",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "High-risk students retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-records/{id}": {
            "get": {
                "summary": "Get health record by ID",
                "operationId": "getApiV1HealthrecordsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns detailed health record including medical information, provider details, vitals, and associated notes. Access is logged.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health record retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Health record not found"
                    }
                }
            },
            "put": {
                "summary": "Update health record",
                "operationId": "putApiV1HealthrecordsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Updates existing health record. All updates are logged with timestamp and user for complete audit trail. Cannot modify archived records.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model165"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health record updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Health record not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete health record",
                "operationId": "deleteApiV1HealthrecordsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Soft-deletes health record (archives it). Does not permanently delete - maintains for compliance and historical reference. Deletion is logged. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health record deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Health record not found"
                    }
                }
            }
        },
        "/api/v1/incidents/search": {
            "get": {
                "summary": "Search incident reports",
                "operationId": "getApiV1IncidentsSearch",
                "description": "**CRITICAL PHI ENDPOINT** - Full-text search across incident reports including: student name, description, location, actions taken, witness names, and notes. Supports advanced search operators and returns paginated results with relevance ranking. Used for incident lookup, pattern analysis, and legal documentation retrieval. All searches are logged for audit compliance.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query string",
                        "minLength": 2,
                        "maxLength": 200,
                        "x-convert": {
                            "trim": true
                        },
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "Search",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Search results retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid search query"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    }
                }
            }
        },
        "/api/v1/incidents/statistics": {
            "get": {
                "summary": "Get incident statistics",
                "operationId": "getApiV1IncidentsStatistics",
                "description": "Returns comprehensive incident statistics including: Total incidents, breakdown by type (INJURY, ILLNESS, BEHAVIORAL, etc.), breakdown by severity (MINOR to LIFE_THREATENING), breakdown by location, parent notification rate, follow-up rate, and average response time (minutes). Optionally filtered by date range and student. Used for safety dashboards, compliance reports, trend analysis, and administrative oversight. No PHI in aggregated data.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics start date",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Statistics end date",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter statistics by student",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Group statistics by field",
                        "enum": [
                            "type",
                            "severity",
                            "location",
                            "date"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Incidents",
                    "Statistics",
                    "Analytics",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "403": {
                        "description": "Forbidden - Admin or nurse role required"
                    }
                }
            }
        },
        "/api/v1/incidents/{id}": {
            "get": {
                "summary": "Get incident report by ID",
                "operationId": "getApiV1IncidentsId",
                "description": "**CRITICAL PHI ENDPOINT** - Returns complete incident report including: Student details, reporter information, incident type/severity/location, actions taken, witness list, evidence (photos/videos/attachments), parent notification status, follow-up requirements, insurance claim details, and legal compliance status. Used for incident review, legal documentation, and parent communications. All access is logged.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Incident report retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            },
            "put": {
                "summary": "Update incident report",
                "operationId": "putApiV1IncidentsId",
                "description": "**CRITICAL PHI ENDPOINT** - Updates existing incident report fields including type, severity, status, description, location, actions taken, evidence, parent notification status, follow-up requirements, insurance claims, and compliance status. All updates are logged with timestamp and user for complete audit trail. Cannot modify archived incidents. Used for incident review, additional information, status updates, and compliance documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model169"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Incident report updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "summary": "Archive incident report",
                "operationId": "deleteApiV1IncidentsId",
                "description": "**CRITICAL PHI ENDPOINT** - Soft-deletes incident report by updating status to ARCHIVED. Does not permanently delete - maintains complete historical record for legal compliance, insurance claims, and future reference. Archived incidents remain searchable but excluded from active reports. Deletion is logged with user and timestamp. Admin or nurse with proper permissions only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Incident report archived successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "403": {
                        "description": "Forbidden - Admin or authorized nurse only"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            }
        },
        "/api/v1/inventory/analytics": {
            "get": {
                "summary": "Get inventory analytics and statistics",
                "operationId": "getApiV1InventoryAnalytics",
                "description": "Returns comprehensive inventory analytics including: (1) Overview - total items, active items, total valuation, low/out of stock counts, (2) Category Breakdown - item count, quantity, and value by category, (3) Valuation - total inventory value by category, (4) Top Used Items - most frequently used items in last 30 days. Used for executive dashboards, budget planning, and inventory optimization.",
                "tags": [
                    "Inventory",
                    "Analytics",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Analytics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/inventory/items": {
            "get": {
                "summary": "Get all inventory items with pagination and filters",
                "operationId": "getApiV1InventoryItems",
                "description": "Returns paginated list of inventory items with current stock levels. Supports filtering by category (MEDICATION, MEDICAL_SUPPLY, EQUIPMENT, FIRST_AID, OFFICE_SUPPLY, PPE, OTHER), supplier, location, low stock status, and active status. Includes stock level indicators and earliest expiration dates.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by inventory category",
                        "enum": [
                            "MEDICATION",
                            "MEDICAL_SUPPLY",
                            "EQUIPMENT",
                            "FIRST_AID",
                            "OFFICE_SUPPLY",
                            "PPE",
                            "OTHER"
                        ],
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by supplier name (partial match)",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "supplier",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by storage location (partial match)",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "location",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter for items at or below reorder level",
                        "name": "lowStock",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status (true = active, false = archived)",
                        "name": "isActive",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Inventory",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Inventory items retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new inventory item",
                "operationId": "postApiV1InventoryItems",
                "description": "Adds a new item to inventory catalog. Validates: (1) Name uniqueness - prevents duplicate item names, (2) Category validity - must be valid healthcare category, (3) Cost limits - unit cost cannot exceed $999,999.99, (4) Reorder logic - reorder quantity must be positive. Supports expiration tracking, lot numbers, and cost tracking. Requires NURSE or ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model71"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Item created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid data or duplicate item name"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    }
                }
            }
        },
        "/api/v1/inventory/orders": {
            "get": {
                "summary": "Get purchase orders with filters",
                "operationId": "getApiV1InventoryOrders",
                "description": "Returns purchase orders with optional filtering by status (PENDING, APPROVED, ORDERED, PARTIALLY_RECEIVED, RECEIVED, CANCELLED) and vendor. Each order includes: order number, vendor details, order/expected/received dates, line items with quantities and costs, subtotal/tax/shipping/total, and current status. Used for order management, receiving workflows, and budget tracking.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by order status",
                        "enum": [
                            "PENDING",
                            "APPROVED",
                            "ORDERED",
                            "PARTIALLY_RECEIVED",
                            "RECEIVED",
                            "CANCELLED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by vendor/supplier ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "vendorId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Inventory",
                    "Purchase Orders",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Purchase orders retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new purchase order",
                "operationId": "postApiV1InventoryOrders",
                "description": "Creates purchase order for ordering supplies from vendors. Validates: (1) Vendor exists and is active, (2) Order number is unique, (3) All items exist and are active, (4) No duplicate items in order, (5) Quantities are positive, (6) Costs within limits, (7) Expected date after order date. Automatically calculates subtotal. Supports 1-100 line items per order. Creates complete audit trail.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model73"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Purchase Orders",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Purchase order created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid order data, duplicate order number, or inactive vendor/items"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Vendor or inventory item not found"
                    }
                }
            }
        },
        "/api/v1/inventory/stock": {
            "get": {
                "summary": "Get stock levels across all items",
                "operationId": "getApiV1InventoryStock",
                "description": "Returns current stock levels for all active inventory items with pagination. Includes calculated fields: currentStock (sum of all transactions), isLowStock (current <= reorder level), and earliestExpiration (next expiration date). Used for stock monitoring dashboards and inventory reports.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Inventory",
                    "Stock",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Stock levels retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/inventory/suppliers": {
            "get": {
                "summary": "Get all suppliers/vendors",
                "operationId": "getApiV1InventorySuppliers",
                "description": "Returns list of vendors/suppliers with optional active status filter. Each supplier includes: name, contact information (name, email, phone), address, website, tax ID, payment terms, rating (1-5 stars), notes, and active status. Used for vendor selection in purchase orders and vendor management.",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Inventory",
                    "Suppliers",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Suppliers retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Create new supplier/vendor",
                "operationId": "postApiV1InventorySuppliers",
                "description": "Adds new vendor to supplier database. Only name is required - all other fields optional. Supports: contact information, business address, website URL, tax ID/EIN, payment terms (e.g., \"Net 30\"), performance rating (1-5), and notes. Used for vendor onboarding before creating purchase orders. Requires ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model74"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Suppliers",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Supplier created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid supplier data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires ADMIN role"
                    }
                }
            }
        },
        "/api/v1/medications/adverse-reactions": {
            "get": {
                "summary": "Get adverse reaction reports",
                "operationId": "getApiV1MedicationsAdversereactions",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Retrieves adverse reaction history. Can filter by medication (to check safety profile) or by student (to check patient history). Used for drug safety monitoring and clinical decision making.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by medication ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "medicationId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Medications",
                    "Safety",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Adverse reactions retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/alerts": {
            "get": {
                "summary": "Get medication alerts",
                "operationId": "getApiV1MedicationsAlerts",
                "description": "Returns alerts for low stock (below reorder level), expiring medications (within 30 days), missed doses (scheduled but not administered), and controlled substance discrepancies. **PHI Protected Endpoint**",
                "tags": [
                    "Medications",
                    "Alerts",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Alerts retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/form-options": {
            "get": {
                "summary": "Get medication form options",
                "operationId": "getApiV1MedicationsFormoptions",
                "description": "Returns available options for medication forms: dosage forms (Tablet, Capsule, Liquid, etc.), medication categories, strength units (mg, mcg, ml, etc.), routes of administration (oral, topical, injection, etc.), and frequency patterns. Used to populate form dropdowns.",
                "tags": [
                    "Medications",
                    "Utilities",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Form options retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/inventory": {
            "get": {
                "summary": "Get medication inventory with low stock alerts",
                "operationId": "getApiV1MedicationsInventory",
                "description": "Returns current medication inventory levels with alerts for low stock, expiring medications (within 30 days), and reorder recommendations. Includes batch tracking and cost information.",
                "tags": [
                    "Medications",
                    "Inventory",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Inventory retrieved successfully with alerts",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "summary": "Add medication to inventory",
                "operationId": "postApiV1MedicationsInventory",
                "description": "Adds new medication stock to inventory. Validates batch number format and prevents addition of expired medications. Tracks batch number, expiration date, quantity, and cost per unit. Requires NURSE or ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model80"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Inventory",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Medication added to inventory successfully"
                    },
                    "400": {
                        "description": "Validation error - Expired medication or invalid data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    }
                }
            }
        },
        "/api/v1/medications/reminders": {
            "get": {
                "summary": "Get medication reminders for a specific date",
                "operationId": "getApiV1MedicationsReminders",
                "description": "**PHI Protected Endpoint** - Returns list of students who need medication at specific times for the specified date. Groups by administration time for efficient workflow. Defaults to today.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date for reminders (ISO 8601 format, defaults to today)",
                        "name": "date",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Medications",
                    "Scheduling",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Reminders retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/schedule": {
            "get": {
                "summary": "Get medication administration schedule",
                "operationId": "getApiV1MedicationsSchedule",
                "description": "**PHI Protected Endpoint** - Returns scheduled medication administrations for a date range. Shows all students who need medications at specific times. Helps nurses plan their day and ensures no doses are missed. Default: today to 7 days ahead.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Schedule start date (ISO 8601 format)",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Schedule end date (ISO 8601 format)",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by specific nurse ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Medications",
                    "Scheduling",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Schedule retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/stats": {
            "get": {
                "summary": "Get medication statistics",
                "operationId": "getApiV1MedicationsStats",
                "description": "Returns medication statistics including total medications in formulary, active prescriptions, medications administered today, adverse reactions reported, and inventory alerts. **PHI Protected Endpoint**",
                "tags": [
                    "Medications",
                    "Statistics",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/graduating-students": {
            "get": {
                "summary": "Get list of students eligible for graduation",
                "operationId": "getApiV1StudentmanagementGraduatingstudents",
                "description": "Returns students who meet graduation requirements including credit requirements, assessment scores, and attendance thresholds. Used for graduation planning and ceremonies.",
                "tags": [
                    "Student Management",
                    "Operations",
                    "Administration",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Graduating students list retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/students/assigned": {
            "get": {
                "summary": "Get students assigned to current nurse",
                "operationId": "getApiV1StudentsAssigned",
                "description": "**PHI Protected Endpoint** - Returns all students assigned to the authenticated nurse. Used for nurse dashboard and daily task list. Automatically filters by current user ID.",
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Assigned students retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Nurse role required"
                    }
                }
            }
        },
        "/api/v1/students/{id}": {
            "get": {
                "summary": "Get student by ID",
                "operationId": "getApiV1StudentsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns complete student information including demographics, emergency contacts, and health summary. Access is logged for HIPAA compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "summary": "Update student information",
                "operationId": "putApiV1StudentsId",
                "description": "**PHI Protected Endpoint** - Updates student demographics, emergency contacts, or school assignment. Requires admin or assigned nurse role. All changes are logged for compliance. Does not modify health records (use health records endpoints).",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model173"
                        }
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only update assigned students unless admin"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/system/config": {
            "get": {
                "summary": "Get system configuration",
                "operationId": "getApiV1SystemConfig",
                "description": "**ADMIN ONLY** - Returns current system configuration settings including SMTP, security, performance, and integration settings. All sensitive credentials are masked. Used for system administration dashboard and configuration management.",
                "tags": [
                    "System",
                    "Configuration",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "System configuration retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            },
            "put": {
                "summary": "Update system configuration",
                "operationId": "putApiV1SystemConfig",
                "description": "**ADMIN ONLY** - Updates system-wide configuration settings. Settings are categorized (GENERAL, SECURITY, NOTIFICATION, INTEGRATION, BACKUP, PERFORMANCE). Changes may require system restart depending on setting type. All updates are logged for audit trail. Use with caution as incorrect settings can affect system functionality.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model175"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Configuration",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "System configuration updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid configuration data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/system/features": {
            "get": {
                "summary": "Get enabled features",
                "operationId": "getApiV1SystemFeatures",
                "description": "Returns current feature flag configuration. Features include: MEDICATION_MANAGEMENT (medication tracking), INCIDENT_REPORTING (incident reports), PARENT_PORTAL (parent access), MOBILE_APP (mobile application), ANALYTICS_DASHBOARD (advanced analytics), INTEGRATION_SIS (SIS integration), AUTOMATED_NOTIFICATIONS (automated alerts). Used for feature availability checks and license compliance.",
                "tags": [
                    "System",
                    "Features",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Features retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "summary": "Update enabled features",
                "operationId": "putApiV1SystemFeatures",
                "description": "**ADMIN ONLY** - Enables or disables system features. Feature flags control availability of major platform modules. Enabling features may require additional licensing. Disabling features hides functionality but preserves existing data. Changes take effect immediately. Use with caution as features may have dependencies.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model177"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Features",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Features updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid feature flags"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/system/health": {
            "get": {
                "summary": "Get system health status",
                "operationId": "getApiV1SystemHealth",
                "description": "Returns comprehensive system health metrics including database status, cache status, integration health (total, active, error, inactive counts), server uptime, memory usage, and timestamp. Used for system monitoring dashboard, alerting, and operational visibility. Helps identify system issues and integration problems at a glance.",
                "tags": [
                    "System",
                    "Utilities",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "System health retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/system/integrations": {
            "get": {
                "summary": "List configured integrations",
                "operationId": "getApiV1SystemIntegrations",
                "description": "**ADMIN ONLY** - Returns paginated list of all configured integrations. Integration types: SIS (Student Information System), EMAIL (SMTP/SendGrid), SMS (Twilio), STORAGE (AWS S3/Azure), AUTHENTICATION (SAML/OAuth/LDAP), EHR, PHARMACY, LABORATORY, INSURANCE. Status values: ACTIVE (connected), INACTIVE (configured but disabled), ERROR (connection issues), PENDING (not yet configured). Credentials are masked for security.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by integration type",
                        "enum": [
                            "SIS",
                            "EMAIL",
                            "SMS",
                            "STORAGE",
                            "AUTHENTICATION",
                            "EHR",
                            "PHARMACY",
                            "LABORATORY",
                            "INSURANCE",
                            "PARENT_PORTAL",
                            "HEALTH_APP",
                            "GOVERNMENT_REPORTING"
                        ],
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by integration status",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "ERROR",
                            "PENDING"
                        ],
                        "name": "status",
                        "in": "query"
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Integrations retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            },
            "post": {
                "summary": "Add new integration",
                "operationId": "postApiV1SystemIntegrations",
                "description": "**ADMIN ONLY** - Creates new integration configuration. Validates endpoint URLs, encrypts sensitive credentials (API keys, passwords, client secrets) before storage. Validates required fields based on integration type. Initially sets status to INACTIVE for safety. Supports OAuth (clientId/clientSecret) and Basic Auth (username/password) authentication methods. Integration must be tested before activation.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model88"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Integration created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid integration configuration"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "409": {
                        "description": "Conflict - Integration with this name already exists"
                    }
                }
            }
        },
        "/api/v1/system/schools": {
            "get": {
                "summary": "List schools in district",
                "operationId": "getApiV1SystemSchools",
                "description": "**ADMIN/DISTRICT_ADMIN ONLY** - Returns paginated list of schools. Supports filtering by district ID and searching by name or code. Includes school settings, contact information, and active status. Used for district-wide school management and reporting.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by district ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "districtId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by school name or code",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "tags": [
                    "System",
                    "Schools",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Schools retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or District Admin role required"
                    }
                }
            }
        },
        "/api/v1/users/statistics": {
            "get": {
                "summary": "Get user statistics",
                "operationId": "getApiV1UsersStatistics",
                "description": "**ADMIN/SCHOOL ADMIN ONLY** - Returns platform-wide user statistics including counts by role, active/inactive users, etc.",
                "tags": [
                    "Users",
                    "Statistics",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "success": true,
                            "data": {
                                "total": 150,
                                "active": 140,
                                "inactive": 10,
                                "byRole": {
                                    "ADMIN": 5,
                                    "NURSE": 80,
                                    "COUNSELOR": 30,
                                    "VIEWER": 35
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "summary": "Get user by ID",
                "operationId": "getApiV1UsersId",
                "description": "Returns detailed information about a specific user including their statistics and assignments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Not authenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "summary": "Update user",
                "operationId": "putApiV1UsersId",
                "description": "Updates user information. Admins can update any user and change role/status. Regular users can only update their own basic info (name, email).",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model179"
                        }
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Email address already in use"
                    }
                }
            }
        },
        "/v1/system/admin/health": {
            "get": {
                "summary": "Get comprehensive system health status",
                "operationId": "getV1SystemAdminHealth",
                "description": "Returns database connectivity, service status, memory usage, and performance metrics",
                "parameters": [
                    {
                        "type": "string",
                        "name": "Hidden Model",
                        "in": "query"
                    }
                ],
                "tags": [
                    "system",
                    "monitoring",
                    "health"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "System health retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Server error retrieving system health"
                    }
                }
            }
        },
        "/api/v1/access-control/roles/{id}": {
            "get": {
                "summary": "Get role by ID",
                "operationId": "getApiV1AccesscontrolRolesId",
                "description": "Returns a single role with its permissions. Requires authentication.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Roles",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns role details",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "put": {
                "summary": "Update role",
                "operationId": "putApiV1AccesscontrolRolesId",
                "description": "Updates role details. Admin only. Does not update role-permission assignments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model180"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "Roles",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Role updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete role",
                "operationId": "deleteApiV1AccesscontrolRolesId",
                "description": "Deletes a role. Admin only. Will fail if role is assigned to users.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Roles",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Role deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "409": {
                        "description": "Conflict - Role is assigned to users"
                    }
                }
            }
        },
        "/api/v1/analytics/appointments/no-show-rate": {
            "get": {
                "summary": "Get appointment no-show statistics",
                "operationId": "getApiV1AnalyticsAppointmentsNoshowrate",
                "description": "Detailed no-show rate analysis and root cause identification. Calculates overall and type-specific no-show rates, tracks reasons for missed appointments (student absent, no consent, scheduling conflict), compares against target rates, and identifies trends. Includes actionable insights for reducing no-shows. Critical for appointment policy optimization and parent communication strategies.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by appointment type",
                        "name": "appointmentType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include no-show reason analysis",
                        "default": true,
                        "name": "includeReasons",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "number",
                        "description": "Target no-show rate for comparison",
                        "minimum": 0,
                        "maximum": 100,
                        "name": "compareWithTarget",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Appointments",
                    "No-Show",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "No-show statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/appointments/trends": {
            "get": {
                "summary": "Get appointment trends",
                "operationId": "getApiV1AnalyticsAppointmentsTrends",
                "description": "Appointment scheduling and completion analytics. Tracks appointment volume by type (screening, medication check, follow-up, immunization), completion rates, cancellation rates, and seasonal patterns. Analyzes trends by day/week/month and appointment status (scheduled, completed, cancelled, no-show). Used for capacity planning, appointment scheduling optimization, and identifying access barriers.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by appointment type",
                        "name": "appointmentType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by appointment status",
                        "enum": [
                            "SCHEDULED",
                            "COMPLETED",
                            "CANCELLED",
                            "NO_SHOW"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Group appointments by field",
                        "default": "MONTH",
                        "enum": [
                            "DAY",
                            "WEEK",
                            "MONTH",
                            "TYPE",
                            "STATUS"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Appointments",
                    "Trends",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment trends retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/dashboard/admin": {
            "get": {
                "summary": "Get admin dashboard data",
                "operationId": "getApiV1AnalyticsDashboardAdmin",
                "description": "Executive-level healthcare analytics dashboard for administrators. Provides population health summary, compliance metrics (immunization, documentation, training, audit readiness), predictive insights (outbreak risk, stock shortages, capacity warnings), and top health conditions/medications. Supports district and school-level views with month/quarter/year time ranges. Optional financial data integration. Used for strategic planning and compliance oversight.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by district ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "districtId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Time range for dashboard data",
                        "default": "MONTH",
                        "enum": [
                            "TODAY",
                            "WEEK",
                            "MONTH",
                            "QUARTER",
                            "YEAR"
                        ],
                        "name": "timeRange",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include compliance and regulatory metrics",
                        "default": true,
                        "name": "includeComplianceMetrics",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include financial/budget data",
                        "default": false,
                        "name": "includeFinancialData",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Dashboard",
                    "Admin",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Admin dashboard data retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/analytics/dashboard/nurse": {
            "get": {
                "summary": "Get nurse dashboard data",
                "operationId": "getApiV1AnalyticsDashboardNurse",
                "description": "Real-time operational dashboard for school nurses. Displays today's/this week's key metrics: total patients, active appointments, critical alerts, bed occupancy, average vital signs, and department status. Includes active health alerts (tachycardia, fever, hypoxemia, etc.) prioritized by severity. Shows upcoming tasks (medication administrations, screenings, follow-ups) with time and priority. Essential daily tool for nursing workflow management.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Time range for dashboard data",
                        "default": "TODAY",
                        "enum": [
                            "TODAY",
                            "WEEK",
                            "MONTH",
                            "QUARTER",
                            "YEAR"
                        ],
                        "name": "timeRange",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include active alerts and notifications",
                        "default": true,
                        "name": "includeAlerts",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include upcoming appointments and tasks",
                        "default": true,
                        "name": "includeUpcoming",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Dashboard",
                    "Nurse",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Nurse dashboard data retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/incidents/by-location": {
            "get": {
                "summary": "Get incidents by location",
                "operationId": "getApiV1AnalyticsIncidentsBylocation",
                "description": "Spatial analysis of incident distribution across school facilities. Identifies high-incident areas (playground, gymnasium, cafeteria, etc.) for targeted safety interventions. Optional heat map visualization for facilities planning. Used for facility risk assessment, supervision planning, and safety equipment placement. Supports location-specific filtering.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by specific location",
                        "name": "location",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include spatial heat map data",
                        "default": false,
                        "name": "includeHeatMap",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Incidents",
                    "Location",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Location-based incident data retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/incidents/trends": {
            "get": {
                "summary": "Get incident trends",
                "operationId": "getApiV1AnalyticsIncidentsTrends",
                "description": "Analyzes incident patterns over time with multiple grouping options (type, location, time of day, day of week, severity). Identifies high-risk areas, peak incident times, and seasonal patterns. Tracks incident rate trends (increasing/decreasing/stable). Used for safety planning, staff allocation, and preventive interventions. Supports filtering by incident type and severity.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Trend analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident type",
                        "name": "incidentType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity level",
                        "enum": [
                            "MINOR",
                            "MODERATE",
                            "SERIOUS",
                            "CRITICAL"
                        ],
                        "name": "severity",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Group incidents by field",
                        "default": "TYPE",
                        "enum": [
                            "TYPE",
                            "LOCATION",
                            "TIME_OF_DAY",
                            "DAY_OF_WEEK",
                            "SEVERITY"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Incidents",
                    "Trends",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Incident trends retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/medications/adherence": {
            "get": {
                "summary": "Get medication adherence rates",
                "operationId": "getApiV1AnalyticsMedicationsAdherence",
                "description": "Medication adherence monitoring and compliance tracking. Calculates adherence percentages for chronic medications, identifies students below adherence threshold, tracks missed doses, and analyzes adherence trends. Supports student-specific and medication-specific filtering. Critical for chronic disease management, parent communication about medication compliance, and health outcome optimization.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Adherence analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Adherence analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by medication ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "medicationId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "number",
                        "description": "Adherence threshold percentage for flagging",
                        "default": 80,
                        "minimum": 0,
                        "maximum": 100,
                        "name": "threshold",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Medications",
                    "Adherence",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medication adherence data retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/medications/usage": {
            "get": {
                "summary": "Get medication usage statistics",
                "operationId": "getApiV1AnalyticsMedicationsUsage",
                "description": "Comprehensive medication administration analytics. Tracks most-administered medications, usage by category (bronchodilators, stimulants, NSAIDs, etc.), administration frequency, and trends. Includes adherence rate calculations and common administration reasons. Essential for inventory management, controlled substance tracking, and identifying medication needs. Supports grouping by medication, category, student, or time.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by school ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Usage analysis start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Usage analysis end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by medication name",
                        "name": "medicationName",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by medication category",
                        "name": "category",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include adherence rate calculations",
                        "default": true,
                        "name": "includeAdherenceRate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Group usage by field",
                        "default": "MEDICATION",
                        "enum": [
                            "MEDICATION",
                            "CATEGORY",
                            "STUDENT",
                            "TIME"
                        ],
                        "name": "groupBy",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Medications",
                    "Usage",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medication usage statistics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/analytics/reports/{id}": {
            "get": {
                "summary": "Get generated report",
                "operationId": "getApiV1AnalyticsReportsId",
                "description": "Retrieves previously generated report by ID. Returns full report data including sections, findings, recommendations, charts, and tables. Supports metadata-only mode (includeData=false) for listing reports without downloading large datasets. Can override output format on retrieval. Used for accessing historical reports, compliance documentation, and scheduled report delivery.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full report data or just metadata",
                        "default": true,
                        "name": "includeData",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Override report format for this request",
                        "enum": [
                            "JSON",
                            "PDF",
                            "CSV",
                            "XLSX"
                        ],
                        "name": "format",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Report retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid report ID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Report not found"
                    }
                }
            }
        },
        "/api/v1/audit/logs/{id}": {
            "get": {
                "summary": "Get audit log by ID",
                "operationId": "getApiV1AuditLogsId",
                "description": "Returns detailed audit log entry including user, action, entity, changes, IP address, and timestamp. Used for investigating specific system events.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit log ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Audit",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit log retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Audit log not found"
                    }
                }
            }
        },
        "/api/v1/audit/session/{sessionId}": {
            "get": {
                "summary": "Get session audit trail",
                "operationId": "getApiV1AuditSessionSessionid",
                "description": "Returns complete audit trail for a user session. Tracks all actions performed during a session from login to logout including: entities accessed, modifications made, failed attempts, and timeline. Used for session-based security investigations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Audit",
                    "Sessions",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Session audit trail retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                }
            }
        },
        "/api/v1/communications/broadcasts/{id}": {
            "get": {
                "summary": "Get broadcast by ID",
                "operationId": "getApiV1CommunicationsBroadcastsId",
                "description": "**PHI Protected Endpoint** - Returns detailed broadcast information including message content, sender details, audience targeting criteria, recipient count, and delivery summary. Shows all channels used and aggregated delivery status.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broadcast message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Broadcast retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Not a broadcast message (single recipient)"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Broadcast not found"
                    }
                }
            }
        },
        "/api/v1/communications/delivery-status/{messageId}": {
            "get": {
                "summary": "Get message delivery status",
                "operationId": "getApiV1CommunicationsDeliverystatusMessageid",
                "description": "**PHI Protected Endpoint** - Returns detailed delivery status for a message. Shows status for each recipient/channel combination (PENDING, SENT, DELIVERED, FAILED, BOUNCED). Includes summary statistics, timestamps, failure reasons, and external tracking IDs. Essential for monitoring message delivery and troubleshooting issues.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Delivery",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Delivery status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Message not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/communications/messages/inbox": {
            "get": {
                "summary": "Get inbox messages for current user",
                "operationId": "getApiV1CommunicationsMessagesInbox",
                "description": "**PHI Protected Endpoint** - Returns messages where the current user is a recipient. Shows messages received across all channels. Includes delivery status and read/unread tracking. Paginated for performance.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Inbox messages retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/communications/messages/sent": {
            "get": {
                "summary": "Get sent messages for current user",
                "operationId": "getApiV1CommunicationsMessagesSent",
                "description": "**PHI Protected Endpoint** - Returns messages sent by the current user. Includes delivery statistics, recipient count, and overall delivery status. Useful for tracking message history and delivery success rates.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Sent messages retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/communications/messages/{id}": {
            "get": {
                "summary": "Get message by ID",
                "operationId": "getApiV1CommunicationsMessagesId",
                "description": "**PHI Protected Endpoint** - Returns detailed message information including sender details, template used, and all delivery records. Shows message content, attachments, priority, category, and delivery status across all channels.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Message retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Message not found"
                    }
                }
            },
            "put": {
                "summary": "Update message (draft/scheduled only)",
                "operationId": "putApiV1CommunicationsMessagesId",
                "description": "**PHI Protected Endpoint** - Updates message content or metadata. Only scheduled messages that have not yet been sent can be updated. Cannot update messages that have already been delivered. Sender must own the message. Used for editing drafts or rescheduling messages.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model187"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Message updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error or message already sent"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Not message owner"
                    },
                    "404": {
                        "description": "Message not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete message (cancel scheduled)",
                "operationId": "deleteApiV1CommunicationsMessagesId",
                "description": "**PHI Protected Endpoint** - Cancels a scheduled message before it is sent. Cannot delete messages that have already been sent. Sender must own the message. Historical records are preserved for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Message cancelled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Message already sent or cannot be deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Not message owner"
                    },
                    "404": {
                        "description": "Message not found"
                    }
                }
            }
        },
        "/api/v1/compliance/checklists/{id}": {
            "get": {
                "summary": "Get checklist by ID",
                "operationId": "getApiV1ComplianceChecklistsId",
                "description": "Returns detailed checklist item including requirement description, category, status, evidence of compliance, completion details, and due date. Used for checklist verification and documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Checklist item ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Checklists",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Checklist item retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Checklist item not found"
                    }
                }
            },
            "put": {
                "summary": "Update compliance checklist",
                "operationId": "putApiV1ComplianceChecklistsId",
                "description": "Updates checklist item status, evidence, or notes. Status progression: PENDING \u00e2\u2020\u2019 IN_PROGRESS \u00e2\u2020\u2019 COMPLETED/NOT_APPLICABLE/FAILED. Automatically records completion timestamp and user when marked COMPLETED. Evidence and notes support compliance documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Checklist item ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model189"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Checklists",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Checklist item updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Checklist item not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete checklist item",
                "operationId": "deleteApiV1ComplianceChecklistsId",
                "description": "Deletes compliance checklist item. Only items that are PENDING or NOT_APPLICABLE can be deleted. Completed items should be maintained for audit trail. Compliance Officer or Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Checklist item ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Checklists",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Checklist item deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Cannot delete completed checklist item"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer or Admin only"
                    },
                    "404": {
                        "description": "Checklist item not found"
                    }
                }
            }
        },
        "/api/v1/compliance/consents/forms": {
            "get": {
                "summary": "List consent forms",
                "operationId": "getApiV1ComplianceConsentsForms",
                "description": "Returns list of consent form templates. Supports filtering by active status. Consent types: HIPAA_AUTHORIZATION (PHI release), FERPA_RELEASE (education records), PHOTO_RELEASE, MEDICAL_TREATMENT, RESEARCH, EMERGENCY_CONTACT. Used for consent management and student enrollment.",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "isActive",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Consent forms retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Create consent form",
                "operationId": "postApiV1ComplianceConsentsForms",
                "description": "Creates new consent form template. Requires minimum 50 characters content for legal validity. Supports version numbering (1.0 format). Can set expiration date for time-limited consents. Automatically sets to active. Version-controlled for consent tracking. Admin only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model98"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Consent form created successfully"
                    },
                    "400": {
                        "description": "Validation error - Content too short or invalid version"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/compliance/policies/{policyId}": {
            "get": {
                "summary": "Get policy by ID",
                "operationId": "getApiV1CompliancePoliciesPolicyid",
                "description": "Returns detailed policy document including title, category, content, version, status, effective date, review date, approval details, and acknowledgment history. Used for policy viewing and compliance verification.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Policy ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "policyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Policies",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Policy retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Policy not found"
                    }
                }
            },
            "put": {
                "summary": "Update policy document",
                "operationId": "putApiV1CompliancePoliciesPolicyid",
                "description": "Updates policy status or approval details. Status workflow: DRAFT \u00e2\u2020\u2019 ACTIVE (requires approval) \u00e2\u2020\u2019 ARCHIVED/SUPERSEDED. Automatically records approval timestamp when activated. Cannot reactivate archived/superseded policies - create new version instead. Enforces policy lifecycle compliance. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Policy ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "policyId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model191"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Policies",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Policy updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid status transition or missing approval"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Policy not found"
                    }
                }
            }
        },
        "/api/v1/compliance/reports/{id}": {
            "get": {
                "summary": "Get compliance report by ID",
                "operationId": "getApiV1ComplianceReportsId",
                "description": "Returns detailed compliance report including title, description, type, status, period, findings, recommendations, checklist items, submission details, and review status. Used for report review and compliance documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Compliance report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance report retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Compliance report not found"
                    }
                }
            },
            "put": {
                "summary": "Update compliance report",
                "operationId": "putApiV1ComplianceReportsId",
                "description": "Updates compliance report status, findings, recommendations, or review details. Status changes: PENDING \u00e2\u2020\u2019 IN_PROGRESS \u00e2\u2020\u2019 COMPLIANT/NON_COMPLIANT/NEEDS_REVIEW. Automatically records submission timestamp when marked compliant. Tracks reviewer and review timestamp. Compliance Officer only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Compliance report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model194"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance report updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Compliance report not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete compliance report",
                "operationId": "deleteApiV1ComplianceReportsId",
                "description": "Deletes compliance report. Only draft reports or reports without submissions can be deleted. Submitted reports should be archived instead to maintain audit trail. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Compliance report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Compliance report deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Cannot delete submitted report - archive instead"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Compliance report not found"
                    }
                }
            }
        },
        "/api/v1/contacts/by-relation/{relationTo}": {
            "get": {
                "summary": "Get contacts by relation",
                "operationId": "getApiV1ContactsByrelationRelationto",
                "description": "Get all contacts related to a specific student or user",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "relationTo",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "enum": [
                            "guardian",
                            "staff",
                            "vendor",
                            "provider",
                            "other"
                        ],
                        "name": "type",
                        "in": "query"
                    }
                ],
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved related contacts",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Permission denied"
                    }
                }
            }
        },
        "/api/v1/documents/student/{studentId}": {
            "get": {
                "summary": "Get all documents for a student",
                "operationId": "getApiV1DocumentsStudentStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns all documents associated with a specific student including medical records, consent forms, incident reports, and health assessments. Ordered by creation date (newest first). Used for student file management and comprehensive record review. Access restricted to assigned nurse or admin. All access logged.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "Students",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student documents retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Must be assigned nurse or admin"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/audit-trail": {
            "get": {
                "summary": "Get document audit trail",
                "operationId": "getApiV1DocumentsIdAudittrail",
                "description": "**PHI PROTECTED ENDPOINT** - Returns complete audit trail for document: all access, modifications, signatures, shares, and deletions. Each entry includes action type, user ID, timestamp, IP address, and change details. Ordered chronologically (newest first). Max 500 entries. Critical for HIPAA compliance, security investigations, and legal requirements.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of audit entries to retrieve",
                        "default": 100,
                        "minimum": 1,
                        "maximum": 500,
                        "name": "limit",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Documents",
                    "Audit",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit trail retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/versions": {
            "get": {
                "summary": "Get document version history",
                "operationId": "getApiV1DocumentsIdVersions",
                "description": "**PHI PROTECTED ENDPOINT** - Returns complete version history for document. Each version includes file metadata, upload timestamp, uploader info, and version number. Ordered by version (newest first). Used for tracking document evolution, compliance auditing, and reverting to previous versions. Critical for policies and medical forms.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "Versioning",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Version history retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/download": {
            "get": {
                "summary": "Download document file",
                "operationId": "getApiV1DocumentsIdDownload",
                "description": "**PHI PROTECTED ENDPOINT** - Downloads document file and tracks access for HIPAA compliance. Updates lastAccessedAt and increments accessCount. Creates audit trail entry with IP address and PHI flag. Returns document metadata with file URL for client-side download. All downloads logged for security and compliance audits.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "FileOperations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Document file URL retrieved successfully with access logged",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient access level"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/signatures": {
            "get": {
                "summary": "Get all signatures for document",
                "operationId": "getApiV1DocumentsIdSignatures",
                "description": "**PHI PROTECTED ENDPOINT** - Returns all digital signatures applied to document. Includes signer details, role, timestamp, IP address, and signature data. Ordered by signature date (most recent first). Used for signature verification, compliance auditing, and legal documentation. Critical for consent forms and authorization documents.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Documents",
                    "Signatures",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Signatures retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/student/{studentId}": {
            "get": {
                "summary": "Get all emergency contacts for a student",
                "operationId": "getApiV1EmergencycontactsStudentStudentid",
                "description": "**PHI Protected Endpoint** - Returns all active emergency contacts for a student, ordered by priority (PRIMARY, SECONDARY, EMERGENCY_ONLY). Includes contact details, notification preferences, and pickup authorization status.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Emergency contacts retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-assessments/emergency/{studentId}": {
            "get": {
                "summary": "Get emergency notification history for student",
                "operationId": "getApiV1HealthassessmentsEmergencyStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns history of emergency notifications for a student including incident details, response times, and outcomes. Critical for pattern recognition and care planning.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Emergency",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Emergency history retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-assessments/medication-interactions/{studentId}": {
            "get": {
                "summary": "Check comprehensive medication interactions for student",
                "operationId": "getApiV1HealthassessmentsMedicationinteractionsStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Analyzes all current medications, supplements, and known allergies for potential interactions. Includes drug-drug, drug-food, and drug-condition interactions. More comprehensive than basic medication checking.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Medications",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medication interactions analyzed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-assessments/risk/{studentId}": {
            "get": {
                "summary": "Calculate health risk score for a student",
                "operationId": "getApiV1HealthassessmentsRiskStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns comprehensive health risk assessment including risk factors, chronic conditions impact, medication interactions, and recommendations. Used for care planning and intervention prioritization.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health risk assessment calculated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-assessments/screenings/{studentId}": {
            "get": {
                "summary": "Get screening history for a student",
                "operationId": "getApiV1HealthassessmentsScreeningsStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns complete screening history for a student including trends, follow-up status, and intervention outcomes. Used for longitudinal health monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Screenings",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Screening history retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-records/allergies/{id}": {
            "get": {
                "summary": "Get allergy by ID",
                "operationId": "getApiV1HealthrecordsAllergiesId",
                "description": "**CRITICAL PHI ENDPOINT** - Returns detailed allergy information including allergen, severity, typical reactions, and recommended treatment.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Allergies",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Allergy retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Allergy not found"
                    }
                }
            },
            "put": {
                "summary": "Update allergy information",
                "operationId": "putApiV1HealthrecordsAllergiesId",
                "description": "**CRITICAL PHI ENDPOINT** - Updates allergy details including severity changes, new reactions, or treatment protocols. All updates logged for safety audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model196"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Allergies",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Allergy updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Allergy not found"
                    }
                }
            },
            "delete": {
                "summary": "Remove allergy record",
                "operationId": "deleteApiV1HealthrecordsAllergiesId",
                "description": "**CRITICAL PHI ENDPOINT** - Removes allergy from active list (soft delete - archives for historical reference). Used when allergy is outgrown or misdiagnosed. Requires medical professional authorization. Logged for safety audit.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Allergies",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Allergy deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Medical professional authorization required"
                    },
                    "404": {
                        "description": "Allergy not found"
                    }
                }
            }
        },
        "/api/v1/health-records/conditions/{id}": {
            "get": {
                "summary": "Get chronic condition by ID",
                "operationId": "getApiV1HealthrecordsConditionsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns detailed chronic condition information including diagnosis date, severity, care plan, medications, restrictions, triggers, and review schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "ChronicConditions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Chronic condition retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Chronic condition not found"
                    }
                }
            },
            "put": {
                "summary": "Update chronic condition",
                "operationId": "putApiV1HealthrecordsConditionsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Updates condition status, severity, care plan, or management protocols. Used for periodic reviews and status changes (e.g., ACTIVE \u00e2\u2020\u2019 CONTROLLED). All updates logged with medical professional authorization.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model199"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "ChronicConditions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Chronic condition updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Chronic condition not found"
                    }
                }
            },
            "delete": {
                "summary": "Remove chronic condition",
                "operationId": "deleteApiV1HealthrecordsConditionsId",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Archives chronic condition (soft delete). Used when condition is cured or resolved. Historical record maintained for medical reference. Requires medical professional authorization.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "ChronicConditions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Chronic condition deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Medical professional authorization required"
                    },
                    "404": {
                        "description": "Chronic condition not found"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}": {
            "get": {
                "summary": "Get all health records for a student",
                "operationId": "getApiV1HealthrecordsStudentStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns comprehensive paginated health records for a student. Includes all medical history: checkups, illnesses, injuries, screenings, exams. Supports filtering by type, date range, and provider. All access is logged for HIPAA compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by record type",
                        "enum": [
                            "CHECKUP",
                            "VACCINATION",
                            "ILLNESS",
                            "INJURY",
                            "SCREENING",
                            "PHYSICAL_EXAM",
                            "MENTAL_HEALTH",
                            "DENTAL",
                            "VISION",
                            "HEARING"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "provider",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health records retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Must be assigned nurse or admin"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/vaccinations/{id}": {
            "get": {
                "summary": "Get vaccination by ID",
                "operationId": "getApiV1HealthrecordsVaccinationsId",
                "description": "**PHI Protected Endpoint** - Returns detailed vaccination record including administration details, lot number, manufacturer, dose sequence, and any reactions. Used for vaccine safety tracking and compliance documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Vaccination retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Vaccination not found"
                    }
                }
            },
            "put": {
                "summary": "Update vaccination record",
                "operationId": "putApiV1HealthrecordsVaccinationsId",
                "description": "**PHI Protected Endpoint** - Updates vaccination details such as dose completion, next due date, or adverse reactions. All updates logged for vaccine safety monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model200"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Vaccination updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Vaccination not found"
                    }
                }
            },
            "delete": {
                "summary": "Remove vaccination record",
                "operationId": "deleteApiV1HealthrecordsVaccinationsId",
                "description": "**PHI Protected Endpoint** - Archives vaccination record (soft delete). Used for data correction only. Historical record maintained for compliance. Requires medical professional authorization.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Vaccination deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Medical professional authorization required"
                    },
                    "404": {
                        "description": "Vaccination not found"
                    }
                }
            }
        },
        "/api/v1/incidents/student/{studentId}": {
            "get": {
                "summary": "Get all incidents for a student",
                "operationId": "getApiV1IncidentsStudentStudentid",
                "description": "**CRITICAL PHI ENDPOINT** - Returns complete incident history for a specific student with pagination. Includes all incident types, severities, dates, locations, outcomes, and follow-up status. Used for student health profiles, pattern analysis, emergency reference, and parent/guardian communications. Critical for identifying recurring safety issues or health concerns. All access is logged.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by reporter ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "reportedById",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident type",
                        "enum": [
                            "INJURY",
                            "ILLNESS",
                            "BEHAVIORAL",
                            "MEDICATION_ERROR",
                            "ALLERGIC_REACTION",
                            "EMERGENCY",
                            "OTHER"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity level",
                        "enum": [
                            "MINOR",
                            "MODERATE",
                            "SERIOUS",
                            "CRITICAL",
                            "LIFE_THREATENING"
                        ],
                        "name": "severity",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident status",
                        "enum": [
                            "REPORTED",
                            "UNDER_REVIEW",
                            "FOLLOW_UP_REQUIRED",
                            "RESOLVED",
                            "ARCHIVED"
                        ],
                        "name": "status",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date (ISO 8601)",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date (ISO 8601)",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by parent notification status",
                        "name": "parentNotified",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by follow-up requirement",
                        "name": "followUpRequired",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by incident location",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "location",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Incidents",
                    "Students",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student incidents retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/incidents/{id}/follow-ups": {
            "get": {
                "summary": "Get all follow-up actions for an incident",
                "operationId": "getApiV1IncidentsIdFollowups",
                "description": "**PHI Protected Endpoint** - Returns all follow-up actions for incident report including action details, priority, status (PENDING, IN_PROGRESS, COMPLETED, CANCELLED), due dates, assignments, and completion information. Ordered by due date. Used for incident resolution tracking, task management, and compliance monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "FollowUp",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Follow-up actions retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            },
            "post": {
                "summary": "Add follow-up action to incident",
                "operationId": "postApiV1IncidentsIdFollowups",
                "description": "**PHI Protected Endpoint** - Creates follow-up action for incident report with required fields: action description (5-500 chars), due date (must be future), and priority (LOW, MEDIUM, HIGH, URGENT). Optional: assigned user, notes. Actions start in PENDING status. Used for incident resolution tracking, compliance monitoring, and accountability. Urgent actions trigger notifications to assigned users. All actions are logged.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model118"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "FollowUp",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Follow-up action created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid action data or past due date"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            }
        },
        "/api/v1/incidents/{id}/evidence": {
            "get": {
                "summary": "Get all evidence for an incident",
                "operationId": "getApiV1IncidentsIdEvidence",
                "description": "**CRITICAL PHI ENDPOINT** - Returns all evidence attached to incident report categorized by type (photos, videos, attachments). Includes evidence URLs, counts, and metadata. Used for incident review, legal documentation, insurance claim processing, and parent communications. All access is logged for evidence chain of custody.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "Evidence",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Evidence retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            },
            "post": {
                "summary": "Add evidence to incident report",
                "operationId": "postApiV1IncidentsIdEvidence",
                "description": "**CRITICAL PHI ENDPOINT** - Adds photo, video, or document evidence to incident report. Supports up to 20 files per upload. Evidence types: photos (injury documentation, scene), videos (incident recording), attachments (medical reports, forms). All URLs are validated. Used for legal documentation, insurance claims, and comprehensive incident records. Evidence additions are logged for chain of custody and audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model119"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "Evidence",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Evidence added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid evidence URLs or type"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            }
        },
        "/api/v1/incidents/{id}/witnesses": {
            "get": {
                "summary": "Get all witness statements for an incident",
                "operationId": "getApiV1IncidentsIdWitnesses",
                "description": "**CRITICAL PHI ENDPOINT** - Returns all witness statements for incident report including witness details, statement text, verification status, and timestamps. Ordered chronologically. Used for incident investigation, legal documentation, and compliance reporting. All access is logged for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Incidents",
                    "Witnesses",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Witness statements retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            },
            "post": {
                "summary": "Add witness statement to incident",
                "operationId": "postApiV1IncidentsIdWitnesses",
                "description": "**CRITICAL PHI ENDPOINT** - Records witness statement for incident report. Witness types: STUDENT, STAFF, PARENT, OTHER. Captures: witness name, contact information, detailed statement (10-5000 chars), and statement date. Statements can be verified later by authorized personnel. Used for legal documentation, incident investigation, and compliance. Critical for behavioral incidents and serious injuries. All statements are logged and timestamped.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model120"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "Witnesses",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Witness statement added successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid witness statement data"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            }
        },
        "/api/v1/inventory/items/{id}": {
            "get": {
                "summary": "Get inventory item by ID",
                "operationId": "getApiV1InventoryItemsId",
                "description": "Returns detailed item information including current stock level, recent transactions (last 10), and maintenance history (last 5). Used for item detail views and stock verification.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory item UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Inventory",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Item retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            },
            "put": {
                "summary": "Update inventory item",
                "operationId": "putApiV1InventoryItemsId",
                "description": "Updates item details including name, category, cost, reorder levels, and location. Does not affect stock quantities - use stock adjustment endpoint for that. All updates are logged for audit trail. Can mark items as inactive for archival without deleting history.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory item UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model202"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Item updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete inventory item (soft delete)",
                "operationId": "deleteApiV1InventoryItemsId",
                "description": "Archives inventory item by marking as inactive. Does not physically delete - preserves all historical data for compliance and audit purposes. Item will no longer appear in active lists but remains accessible in reports and transaction history. Can be reactivated by updating isActive to true.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory item UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Inventory",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Item archived successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            }
        },
        "/api/v1/inventory/reports/usage": {
            "get": {
                "summary": "Get usage report for date range",
                "operationId": "getApiV1InventoryReportsUsage",
                "description": "Generates usage analysis report for specified period (defaults to last 30 days). Includes: (1) Usage Analytics - transaction count, total/average usage by item and category, (2) Inventory Turnover - turnover rate calculation (usage / average stock) for each item, (3) Period Summary - date range and duration. Used for: consumption forecasting, budget planning, reorder optimization, and identifying high-usage items.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Report start date (ISO 8601 format, defaults to 30 days ago)",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Report end date (ISO 8601 format, defaults to now)",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Inventory",
                    "Reports",
                    "Analytics",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Usage report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/inventory/stock/low": {
            "get": {
                "summary": "Get low stock alerts",
                "operationId": "getApiV1InventoryStockLow",
                "description": "Returns items requiring attention due to low or depleted stock. Two categories: (1) Low Stock - items at or below reorder level but not empty, (2) Out of Stock - items with zero quantity. Used for reorder notifications, dashboard alerts, and automated purchase order generation. Helps prevent stockouts of critical medical supplies.",
                "tags": [
                    "Inventory",
                    "Stock",
                    "Alerts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Stock alerts retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/inventory/suppliers/performance": {
            "get": {
                "summary": "Get supplier performance analytics",
                "operationId": "getApiV1InventorySuppliersPerformance",
                "description": "Returns supplier performance metrics including: item count (number of items supplied), average unit cost (cost analysis), total purchased (quantity ordered historically), total spent (dollar amount spent). Ordered by total spend (highest first). Used for vendor evaluation, contract negotiations, and supplier consolidation decisions.",
                "tags": [
                    "Inventory",
                    "Suppliers",
                    "Analytics",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Supplier performance retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/medications/logs/{studentId}": {
            "get": {
                "summary": "Get medication administration logs for a student",
                "operationId": "getApiV1MedicationsLogsStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns complete medication administration history for a student. Includes all doses given, who administered them, witnesses for controlled substances, and any adverse reactions. All access is audited.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Medications",
                    "Administration",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medication logs retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only view own patient logs unless admin"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/waitlist/{studentId}": {
            "get": {
                "summary": "Get waitlist status for student",
                "operationId": "getApiV1StudentmanagementWaitlistStudentid",
                "description": "Returns current waitlist positions and estimated wait times for all appointment types the student is waitlisted for.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Appointments",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Waitlist status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/students/grade/{grade}": {
            "get": {
                "summary": "Get students by grade",
                "operationId": "getApiV1StudentsGradeGrade",
                "description": "**PHI Protected Endpoint** - Returns all students in a specific grade level. Useful for grade-level health screenings and reports. Access is audited.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Grade level (e.g., \"K\", \"1\", \"2\", etc.)",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "grade",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Students retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No students found for this grade"
                    }
                }
            }
        },
        "/api/v1/students/search/{query}": {
            "get": {
                "summary": "Search students by name or ID",
                "operationId": "getApiV1StudentsSearchQuery",
                "description": "**PHI Protected Endpoint** - Searches students by name (first/last) or student ID. Returns partial matches. Useful for quick student lookup in emergency situations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query for student name or ID",
                        "minLength": 1,
                        "x-convert": {
                            "trim": true
                        },
                        "name": "query",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Search results returned successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Query must be at least 1 character"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/students/{id}/health-records": {
            "get": {
                "summary": "Get student health records",
                "operationId": "getApiV1StudentsIdHealthrecords",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns paginated list of all health records for a student including medications, allergies, immunizations, and visit logs. Full audit trail maintained. Requires assigned nurse or admin access.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Health records retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Must be assigned nurse or admin"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/students/{id}/mental-health-records": {
            "get": {
                "summary": "Get student mental health records",
                "operationId": "getApiV1StudentsIdMentalhealthrecords",
                "description": "**EXTREMELY SENSITIVE PHI ENDPOINT** - Returns paginated mental health records including counseling sessions, behavioral assessments, and crisis interventions. Extra protection due to stigma concerns. Strict access control - mental health specialist or admin only. All access logged for compliance and ethical review.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "Healthcare",
                    "MentalHealth",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Mental health records retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Mental health specialist or admin role required"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/system/integrations/{id}": {
            "get": {
                "summary": "Get integration details",
                "operationId": "getApiV1SystemIntegrationsId",
                "description": "**ADMIN ONLY** - Returns detailed integration configuration including name, type, endpoint, status, settings, sync frequency, and recent activity logs. Sensitive credentials (API keys, passwords) are masked for security. Includes last 5 log entries for troubleshooting. Used for integration configuration review and monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration configuration UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Integration retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Integration not found"
                    }
                }
            },
            "put": {
                "summary": "Update integration config",
                "operationId": "putApiV1SystemIntegrationsId",
                "description": "**ADMIN ONLY** - Updates integration configuration. Validates endpoint URLs if changed. Re-encrypts credentials if updated. Validates sync frequency (0 = manual only, >0 = automatic sync interval in minutes). Status changes: PENDING \u00e2\u2020\u2019 INACTIVE \u00e2\u2020\u2019 ACTIVE or ERROR. Connection is re-tested if credentials or endpoint changed. All configuration changes are logged for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration configuration UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model207"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Integration updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Integration not found"
                    }
                }
            },
            "delete": {
                "summary": "Remove integration",
                "operationId": "deleteApiV1SystemIntegrationsId",
                "description": "**ADMIN ONLY** - Deletes integration configuration and associated logs. WARNING: This action cannot be undone. Active integrations should be deactivated before deletion. Scheduled syncs will be cancelled. Historical sync logs will be removed. Consider deactivating instead of deleting to preserve audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration configuration UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Integration deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Cannot delete active integration - deactivate first"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Integration not found"
                    }
                }
            }
        },
        "/api/v1/system/schools/{schoolId}": {
            "get": {
                "summary": "Get school by ID",
                "operationId": "getApiV1SystemSchoolsSchoolid",
                "description": "Returns detailed school information including name, code, address, contact details, settings, and active status. Used for school profile viewing and configuration.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "School UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "System",
                    "Schools",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "School retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "School not found"
                    }
                }
            },
            "put": {
                "summary": "Update school settings",
                "operationId": "putApiV1SystemSchoolsSchoolid",
                "description": "**ADMIN/DISTRICT_ADMIN ONLY** - Updates school configuration including name, code, contact information, and school-specific settings. Validates phone and email formats. All updates are logged for audit trail. Used for maintaining accurate school information.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "School UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model209"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Schools",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "School updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid school data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or District Admin role required"
                    },
                    "404": {
                        "description": "School not found"
                    }
                }
            }
        },
        "/api/v1/system/sync/logs": {
            "get": {
                "summary": "Get sync logs",
                "operationId": "getApiV1SystemSyncLogs",
                "description": "**ADMIN ONLY** - Returns paginated integration operation logs for troubleshooting and audit trail. Logs include: sync operations, connection tests, configuration changes, errors, and warnings. Supports filtering by integration ID, status (success/failed), action type, and date range. Each log entry contains timestamp, action, status, duration, records processed, and error details. Required for HIPAA compliance auditing and operational monitoring.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of log entries per page",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by integration ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "integrationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by operation status",
                        "enum": [
                            "success",
                            "failed"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type (sync, test_connection, create, update, etc.)",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter logs after this date",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter logs before this date",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "tags": [
                    "System",
                    "Sync",
                    "Logs",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Sync logs retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/system/sync/status": {
            "get": {
                "summary": "Get sync status",
                "operationId": "getApiV1SystemSyncStatus",
                "description": "Returns recent synchronization sessions with status and statistics. Sync statuses: IDLE (no sync running), IN_PROGRESS (currently syncing), COMPLETED (last sync successful), FAILED (last sync failed). Includes session details: start time, completion time, records processed, success/failure counts, and error messages. Optionally filter by integration ID and status. Used for monitoring active syncs and reviewing sync history.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by integration ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "integrationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sync status",
                        "enum": [
                            "IDLE",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of recent sync sessions to return",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "System",
                    "Sync",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Sync status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/users/nurses/available": {
            "get": {
                "summary": "Get available nurses",
                "operationId": "getApiV1UsersNursesAvailable",
                "description": "Returns all active nurses available for student assignment.",
                "tags": [
                    "Users",
                    "Nurses",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Available nurses retrieved successfully",
                        "schema": {
                            "success": true,
                            "data": {
                                "nurses": "Array of nurse user objects"
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated"
                    }
                }
            }
        },
        "/api/v1/users/role/{role}": {
            "get": {
                "summary": "Get users by role",
                "operationId": "getApiV1UsersRoleRole",
                "description": "Returns all users with the specified role. Useful for populating dropdowns or assignment interfaces.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User role to filter by",
                        "enum": [
                            "ADMIN",
                            "NURSE",
                            "SCHOOL_ADMIN",
                            "DISTRICT_ADMIN",
                            "COUNSELOR",
                            "VIEWER"
                        ],
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid role specified"
                    },
                    "401": {
                        "description": "Not authenticated"
                    }
                }
            }
        },
        "/v1/system/admin/features/report": {
            "get": {
                "summary": "Generate comprehensive feature integration report",
                "operationId": "getV1SystemAdminFeaturesReport",
                "description": "Creates detailed report of all system features, usage statistics, and integration health",
                "tags": [
                    "system",
                    "monitoring",
                    "reporting"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature report generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Server error generating report"
                    }
                }
            }
        },
        "/v1/system/admin/features/status": {
            "get": {
                "summary": "Get status of all integrated system features",
                "operationId": "getV1SystemAdminFeaturesStatus",
                "description": "Returns availability and health status of healthcare, operations, analytics, and communication modules",
                "parameters": [
                    {
                        "type": "string",
                        "name": "Hidden Model",
                        "in": "query"
                    }
                ],
                "tags": [
                    "system",
                    "monitoring",
                    "features"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "403": {
                        "description": "Admin access required"
                    },
                    "500": {
                        "description": "Server error retrieving feature status"
                    }
                }
            }
        },
        "/api/v1/access-control/users/{userId}/sessions": {
            "get": {
                "summary": "Get user sessions",
                "operationId": "getApiV1AccesscontrolUsersUseridSessions",
                "description": "Returns all active sessions for a user. Users can view own sessions, admins can view any.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Sessions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns list of sessions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only view own sessions unless admin"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete all user sessions",
                "operationId": "deleteApiV1AccesscontrolUsersUseridSessions",
                "description": "Deletes all sessions for a user (force logout from all devices). Users can delete own sessions, admins can delete any.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Sessions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - All sessions deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only delete own sessions unless admin"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/access-control/users/{userId}/permissions": {
            "get": {
                "summary": "Get user permissions",
                "operationId": "getApiV1AccesscontrolUsersUseridPermissions",
                "description": "Returns all permissions for a user (aggregated from assigned roles). Users can view own permissions, admins can view any.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "User-Permissions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns user permissions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only view own permissions unless admin"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/access-control/users/{userId}/check": {
            "get": {
                "summary": "Check user permission",
                "operationId": "getApiV1AccesscontrolUsersUseridCheck",
                "description": "Checks if user has specific permission for a resource-action pair. Users can check own permissions, admins can check any.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource to check permission for",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "resource",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Action to check permission for",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "action",
                        "in": "query",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "User-Permissions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Returns hasPermission boolean",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only check own permissions unless admin"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/analytics/health-metrics/school/{schoolId}": {
            "get": {
                "summary": "Get school-wide health metrics",
                "operationId": "getApiV1AnalyticsHealthmetricsSchoolSchoolid",
                "description": "Comprehensive school-level health analytics dashboard. Includes population health summary, immunization compliance by vaccine and grade, incident analysis by type/location/time, chronic condition management, and medication usage patterns. Supports grade-level filtering and district-wide comparisons. Essential for school health program evaluation and resource planning.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "School ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "schoolId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Metrics start date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Metrics end date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by grade level",
                        "name": "gradeLevel",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include district-wide comparisons",
                        "default": true,
                        "name": "includeComparisons",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Health Metrics",
                    "Schools",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "School metrics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid school ID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions for school data"
                    },
                    "404": {
                        "description": "School not found"
                    }
                }
            }
        },
        "/api/v1/analytics/health-metrics/student/{studentId}": {
            "get": {
                "summary": "Get student health trends",
                "operationId": "getApiV1AnalyticsHealthmetricsStudentStudentid",
                "description": "**PHI ENDPOINT** - Returns detailed health trend data for individual student. Includes vital signs history, health visit patterns, medication adherence, chronic condition management, and growth metrics. Requires proper authorization and access logging per HIPAA. Used for personalized health tracking and care plan monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start date for student metrics",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End date for student metrics",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "boolean",
                        "description": "Include historical trend data",
                        "default": true,
                        "name": "includeHistory",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Analytics",
                    "Health Metrics",
                    "Students",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student health metrics retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid student ID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions for student data"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/appointments/nurse/{nurseId}/upcoming": {
            "get": {
                "summary": "Get upcoming appointments for a nurse",
                "operationId": "getApiV1AppointmentsNurseNurseidUpcoming",
                "description": "**PHI Protected Endpoint** - Returns upcoming appointments for a specific nurse, ordered by start time. Limited to future appointments only. Used for nurse dashboard \"Today's Schedule\" and \"Upcoming Appointments\" widgets. Includes student information for quick reference.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Nurse UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of appointments to return (default: 10)",
                        "minimum": 1,
                        "maximum": 50,
                        "name": "limit",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Upcoming appointments retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Nurse not found"
                    }
                }
            }
        },
        "/api/v1/appointments/nurse/{nurseId}/available-slots": {
            "get": {
                "summary": "Get available time slots for a nurse",
                "operationId": "getApiV1AppointmentsNurseNurseidAvailableslots",
                "description": "Returns available appointment slots for a nurse on a specified date. Calculates slots based on: (1) Nurse working hours/availability, (2) Existing appointments, (3) Buffer time between appointments (configurable), (4) Minimum/maximum slot duration. Used for appointment scheduling interfaces to show available times.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Nurse UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date to check availability (ISO 8601)",
                        "name": "date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Slot duration in minutes (default: 30)",
                        "minimum": 15,
                        "maximum": 120,
                        "name": "slotDuration",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Scheduling",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Available slots retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid date or parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Nurse not found"
                    }
                }
            }
        },
        "/api/v1/appointments/nurse/{nurseId}/calendar": {
            "get": {
                "summary": "Generate calendar export (iCal format)",
                "operationId": "getApiV1AppointmentsNurseNurseidCalendar",
                "description": "Generates iCalendar (.ics) file for nurse appointments compatible with Google Calendar, Outlook, Apple Calendar, and other iCal-compatible applications. Optionally filtered by date range. Includes appointment details (student name, type, location). Used for calendar integration and offline access to schedules.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Nurse UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "nurseId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start date for calendar export",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "End date for calendar export",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Calendar",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Calendar file generated successfully",
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Nurse not found"
                    }
                }
            }
        },
        "/api/v1/audit/data-access/{resourceType}/{resourceId}": {
            "get": {
                "summary": "Get resource access history",
                "operationId": "getApiV1AuditDataaccessResourcetypeResourceid",
                "description": "**PHI AUDIT ENDPOINT** - Returns complete access history for a specific resource (e.g., health record, medication record). Shows who accessed, when, what action (VIEW/EDIT/DELETE), and from where (IP address). Critical for PHI disclosure accounting as required by HIPAA. Used to answer \"Who accessed this student's records?\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource type",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "resourceType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "resourceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by entity type (e.g., STUDENT, HEALTH_RECORD, MEDICATION)",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "entityType",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type",
                        "enum": [
                            "CREATE",
                            "READ",
                            "VIEW",
                            "ACCESS",
                            "UPDATE",
                            "DELETE",
                            "LOGIN",
                            "LOGOUT",
                            "EXPORT",
                            "IMPORT",
                            "BACKUP",
                            "RESTORE",
                            "SECURITY_EVENT"
                        ],
                        "name": "action",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP address",
                        "x-format": {
                            "ip": {
                                "cidr": "optional"
                            }
                        },
                        "name": "ipAddress",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "DataAccess",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Data access history retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    }
                }
            }
        },
        "/api/v1/audit/user/{userId}/activity": {
            "get": {
                "summary": "Get user activity audit logs",
                "operationId": "getApiV1AuditUserUseridActivity",
                "description": "Returns paginated audit trail for specific user. Includes all actions performed (login, data access, modifications, exports), timestamps, entity types accessed, and success/failure status. Used for user activity monitoring and investigation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by start date",
                        "name": "startDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter by end date",
                        "name": "endDate",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Filter by action type",
                        "name": "action",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "Audit",
                    "Users",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "User activity retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/communications/broadcasts/{id}/recipients": {
            "get": {
                "summary": "Get broadcast recipients",
                "operationId": "getApiV1CommunicationsBroadcastsIdRecipients",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns paginated list of all recipients for a broadcast message. Shows delivery status for each recipient across all channels, contact information used, delivery timestamps, and failure reasons if applicable. Essential for delivery verification and troubleshooting. Access is strictly audited.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broadcast message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Recipients retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Broadcast not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/communications/broadcasts/{id}/delivery-report": {
            "get": {
                "summary": "Get broadcast delivery report",
                "operationId": "getApiV1CommunicationsBroadcastsIdDeliveryreport",
                "description": "**PHI Protected Endpoint** - Returns comprehensive delivery report for a broadcast. Includes overall summary (total, delivered, failed, pending), breakdown by channel (EMAIL, SMS, etc.), breakdown by recipient type (PARENT, EMERGENCY_CONTACT, etc.), and individual delivery records. Used for compliance reporting, delivery verification, and system monitoring.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broadcast message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Delivery report retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Broadcast not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/compliance/consents/forms/{id}": {
            "get": {
                "summary": "Get consent form by ID",
                "operationId": "getApiV1ComplianceConsentsFormsId",
                "description": "Returns detailed consent form including type, title, description, full content, version, active status, expiration date, and recent signatures. Used for displaying consent forms to parents/guardians.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Consent form ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Consent form retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Consent form not found"
                    }
                }
            }
        },
        "/api/v1/compliance/consents/student/{studentId}": {
            "get": {
                "summary": "Get student consents",
                "operationId": "getApiV1ComplianceConsentsStudentStudentid",
                "description": "Returns all consent signatures for a student. Includes consent form details, signatory information, signature date, withdrawal status, and digital signature data. Used for verifying student consent status and compliance documentation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "Students",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student consents retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-assessments/growth/{studentId}/analysis": {
            "get": {
                "summary": "Analyze growth trends for student",
                "operationId": "getApiV1HealthassessmentsGrowthStudentidAnalysis",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Provides comprehensive growth trend analysis including percentile tracking, velocity calculations, and clinical recommendations. Identifies concerning patterns like growth faltering or excessive weight gain.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "1year",
                        "enum": [
                            "6months",
                            "1year",
                            "2years",
                            "5years",
                            "all"
                        ],
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "name": "includePercentiles",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "name": "includeTrends",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "name": "compareToNorms",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Growth",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Growth analysis generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found or insufficient data"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-assessments/immunizations/{studentId}/forecast": {
            "get": {
                "summary": "Get immunization forecast for student",
                "operationId": "getApiV1HealthassessmentsImmunizationsStudentidForecast",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Generates immunization schedule based on current status, age, and CDC guidelines. Shows overdue, due soon, and future immunizations. Includes contraindication checking and catch-up schedules.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Number of days to forecast ahead",
                        "default": 90,
                        "minimum": 1,
                        "maximum": 365,
                        "name": "forecastPeriod",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "name": "includeOverdue",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "name": "includeFuture",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "all",
                        "enum": [
                            "infant",
                            "toddler",
                            "preschool",
                            "school-age",
                            "adolescent",
                            "all"
                        ],
                        "name": "ageGroup",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Immunizations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Immunization forecast generated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/summary": {
            "get": {
                "summary": "Get comprehensive medical summary",
                "operationId": "getApiV1HealthrecordsStudentStudentidSummary",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns complete medical overview: active allergies, chronic conditions, current medications, immunization status, recent vitals, and care plans. Used for dashboard display, emergency reference, and care coordination. Critical for emergency responders.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medical summary retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/vaccinations": {
            "get": {
                "summary": "Get all vaccinations for a student",
                "operationId": "getApiV1HealthrecordsStudentStudentidVaccinations",
                "description": "**PHI Protected Endpoint** - Returns immunization history with vaccine names, dates, lot numbers, and dose tracking. Used for compliance verification, school enrollment, and planning boosters. Includes CVX codes for standardized reporting.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Vaccinations retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/conditions": {
            "get": {
                "summary": "Get all chronic conditions for a student",
                "operationId": "getApiV1HealthrecordsStudentStudentidConditions",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns chronic/ongoing medical conditions (asthma, diabetes, epilepsy, etc.) with status (ACTIVE, CONTROLLED, IN_REMISSION, CURED), severity, care plans, and management protocols. Critical for daily care and emergency response.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "ChronicConditions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Chronic conditions retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/allergies": {
            "get": {
                "summary": "Get all allergies for a student",
                "operationId": "getApiV1HealthrecordsStudentStudentidAllergies",
                "description": "**CRITICAL PHI ENDPOINT** - Returns all known allergies for a student including severity levels (MILD, MODERATE, SEVERE, LIFE_THREATENING). Critical for medication administration and emergency response. Displayed prominently in student profile.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Allergies",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Allergies retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/immunization-status": {
            "get": {
                "summary": "Check immunization compliance status",
                "operationId": "getApiV1HealthrecordsStudentStudentidImmunizationstatus",
                "description": "Returns immunization compliance check against state/district requirements. Identifies missing or overdue vaccines, upcoming boosters, and overall compliance status. Used for school enrollment verification and public health reporting. No detailed PHI - just compliance status.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Immunization status retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/inventory/stock/history/{id}": {
            "get": {
                "summary": "Get stock transaction history for an item",
                "operationId": "getApiV1InventoryStockHistoryId",
                "description": "Returns complete transaction history for an inventory item with pagination. Each transaction includes: type (PURCHASE, USAGE, ADJUSTMENT, TRANSFER, DISPOSAL), quantity change, running stock total after transaction, performed by user, timestamp, batch number, expiration date (if applicable), and reason/notes. Used for: compliance audits, usage analysis, shrinkage investigation, and inventory reconciliation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory item UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Inventory",
                    "Stock",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Stock history retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/transcripts/{studentId}/history": {
            "get": {
                "summary": "Get complete academic history for student",
                "operationId": "getApiV1StudentmanagementTranscriptsStudentidHistory",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Returns comprehensive academic history including all transcripts, grades, courses, and academic achievements. Used for academic planning and college applications.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Academic Records",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Academic history retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/transcripts/{studentId}/trends": {
            "get": {
                "summary": "Analyze academic performance trends for student",
                "operationId": "getApiV1StudentmanagementTranscriptsStudentidTrends",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Analyzes academic performance over time including GPA trends, subject performance patterns, and attendance correlation. Provides insights for intervention planning.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Academic Records",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Performance trends analyzed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found or insufficient data"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/vitals/latest": {
            "get": {
                "summary": "Get latest vital signs",
                "operationId": "getApiV1HealthrecordsStudentStudentidVitalsLatest",
                "description": "**PHI Protected Endpoint** - Returns most recent vital signs for a student. Used for quick health status check and baseline comparison.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vitals",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Latest vital signs retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found or no vitals recorded"
                    }
                }
            }
        },
        "/api/v1/health-records/student/{studentId}/vitals/history": {
            "get": {
                "summary": "Get vital signs history",
                "operationId": "getApiV1HealthrecordsStudentStudentidVitalsHistory",
                "description": "**PHI Protected Endpoint** - Returns paginated history of vital sign measurements. Used for growth tracking, trend analysis, and identifying health concerns. Supports charting and visualization.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1,
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by record type",
                        "enum": [
                            "CHECKUP",
                            "VACCINATION",
                            "ILLNESS",
                            "INJURY",
                            "SCREENING",
                            "PHYSICAL_EXAM",
                            "MENTAL_HEALTH",
                            "DENTAL",
                            "VISION",
                            "HEARING"
                        ],
                        "name": "type",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateFrom",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "dateTo",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "provider",
                        "in": "query",
                        "required": false
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vitals",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Vital signs history retrieved successfully with pagination",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts": {
            "post": {
                "summary": "Create new emergency contact",
                "operationId": "postApiV1Emergencycontacts",
                "description": "**PHI Protected Endpoint** - Adds a new emergency contact for a student. Business rules: Maximum 2 PRIMARY contacts per student. Phone number required (minimum 10 digits). Email required if email notification channel is selected. Validates priority constraints to ensure student always has at least one PRIMARY contact.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model7"
                        }
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Emergency contact created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid contact data or business rule violation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "409": {
                        "description": "Conflict - Maximum PRIMARY contacts reached"
                    }
                }
            }
        },
        "/api/v1/health-records": {
            "post": {
                "summary": "Create new health record",
                "operationId": "postApiV1Healthrecords",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Creates new health record entry. Record types: CHECKUP, VACCINATION, ILLNESS, INJURY, SCREENING, PHYSICAL_EXAM, MENTAL_HEALTH, DENTAL, VISION, HEARING. Date cannot be future. All creation is logged for audit trail.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model9"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Health record created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid record data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/v1/communication/bulk-message": {
            "post": {
                "summary": "Send bulk message to multiple recipients",
                "operationId": "postV1CommunicationBulkmessage",
                "description": "Allows sending messages to groups of parents, students, or staff members",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Hidden%20Model"
                        }
                    }
                ],
                "tags": [
                    "communication",
                    "messaging"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk message sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid message data"
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "500": {
                        "description": "Server error sending messages"
                    }
                }
            }
        },
        "/api/v1/access-control/initialize-roles": {
            "post": {
                "summary": "Initialize default roles",
                "operationId": "postApiV1AccesscontrolInitializeroles",
                "description": "Creates default system roles and permissions. Admin only. Idempotent - safe to run multiple times.",
                "tags": [
                    "Access Control",
                    "Utilities",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Default roles initialized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        },
        "/api/v1/appointments/recurring": {
            "post": {
                "summary": "Create recurring appointments",
                "operationId": "postApiV1AppointmentsRecurring",
                "description": "**PHI Protected Endpoint** - Creates multiple appointments based on a recurrence pattern (DAILY, WEEKLY, MONTHLY). Supports configurable intervals, specific days of week, and maximum occurrences or end date. Each occurrence is validated for availability. Used for regular medication administration, ongoing therapy, or scheduled check-ups. Returns array of created appointments.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model24"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Recurring",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Recurring appointments created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid pattern or conflicts detected"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student or nurse not found"
                    },
                    "409": {
                        "description": "Conflict - Some time slots unavailable"
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "summary": "Login user",
                "operationId": "postApiV1AuthLogin",
                "description": "Authenticates user credentials and returns JWT token (24-hour expiration) with user profile.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model30"
                        }
                    }
                ],
                "tags": [
                    "Authentication",
                    "v1"
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "success": true,
                            "data": {
                                "token": "jwt.token.here",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "role": "NURSE"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "summary": "Refresh JWT token",
                "operationId": "postApiV1AuthRefresh",
                "description": "Exchanges existing token for a new one with extended expiration.",
                "tags": [
                    "Authentication",
                    "v1"
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "success": true,
                            "data": {
                                "token": "new.jwt.token",
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "role": "NURSE"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token"
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "summary": "Register a new user",
                "operationId": "postApiV1AuthRegister",
                "description": "Creates a new user account with the specified role. Password must be at least 8 characters. Returns JWT token and user object.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model31"
                        }
                    }
                ],
                "tags": [
                    "Authentication",
                    "v1"
                ],
                "security": [],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "success": true,
                            "data": {
                                "user": {
                                    "id": "uuid",
                                    "email": "user@example.com",
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "role": "NURSE"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "409": {
                        "description": "User already exists with this email"
                    }
                }
            }
        },
        "/api/v1/auth/verify": {
            "post": {
                "summary": "Verify JWT token",
                "operationId": "postApiV1AuthVerify",
                "description": "Validates JWT token and returns user information if token is valid.",
                "tags": [
                    "Authentication",
                    "v1"
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "success": true,
                            "data": {
                                "id": "uuid",
                                "email": "user@example.com",
                                "firstName": "John",
                                "lastName": "Doe",
                                "role": "NURSE"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token"
                    }
                }
            }
        },
        "/api/v1/compliance/consents": {
            "post": {
                "summary": "Record consent signature",
                "operationId": "postApiV1ComplianceConsents",
                "description": "**LEGAL COMPLIANCE ENDPOINT** - Records digital consent signature. Validates form is active and not expired. Validates relationship (Mother, Father, Parent, Legal Guardian, etc.). Records signatory name, relationship, optional digital signature image, IP address, and timestamp for legal validity. Prevents duplicate signatures. Complete audit trail maintained.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model58"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Consent recorded successfully"
                    },
                    "400": {
                        "description": "Validation error - Form inactive/expired or already signed"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Consent form or student not found"
                    }
                }
            }
        },
        "/api/v1/health-assessments/screenings": {
            "post": {
                "summary": "Record health screening results",
                "operationId": "postApiV1HealthassessmentsScreenings",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Records various types of health screening results (vision, hearing, scoliosis, dental, BMI). Includes pass/fail status, detailed results, follow-up recommendations, and parent notification requirements. Critical for early intervention.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model62"
                        }
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Screenings",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Health screening recorded successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/health-records/allergies": {
            "post": {
                "summary": "Add new allergy",
                "operationId": "postApiV1HealthrecordsAllergies",
                "description": "**CRITICAL PHI ENDPOINT** - Records new allergy for a student. Severity levels: MILD, MODERATE, SEVERE, LIFE_THREATENING. Can be verified by medical professional. Triggers safety alerts in medication system.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model64"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Allergies",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Allergy created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid allergy data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/conditions": {
            "post": {
                "summary": "Add new chronic condition",
                "operationId": "postApiV1HealthrecordsConditions",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Records new chronic condition diagnosis. Includes ICD-10 code, care plan, medications, activity restrictions, condition triggers, and review schedule. Used for ongoing care management and emergency preparedness.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model67"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "ChronicConditions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Chronic condition created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid condition data or ICD-10 code"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/vaccinations": {
            "post": {
                "summary": "Add new vaccination record",
                "operationId": "postApiV1HealthrecordsVaccinations",
                "description": "**PHI Protected Endpoint** - Records new vaccination/immunization. Includes CVX code, NDC code, lot number, manufacturer, dose tracking, administration route/site, and any adverse reactions. Used for immunization compliance and public health reporting.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model68"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vaccinations",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Vaccination created successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid vaccination data or date sequence"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/health-records/vitals": {
            "post": {
                "summary": "Record vital signs",
                "operationId": "postApiV1HealthrecordsVitals",
                "description": "**PHI Protected Endpoint** - Records vital signs: temperature (90-115\u00c2\u00b0F), blood pressure, heart rate (30-250 bpm), respiratory rate (5-60/min), oxygen saturation (70-100%), height (30-250 cm), weight (5-500 kg), BMI (auto-calculated). Used for health monitoring, screening, and trend analysis.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model69"
                        }
                    }
                ],
                "tags": [
                    "HealthRecords",
                    "Vitals",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Vital signs recorded successfully"
                    },
                    "400": {
                        "description": "Validation error - Vital signs out of acceptable range"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/medications/administration": {
            "post": {
                "summary": "Log medication administration",
                "operationId": "postApiV1MedicationsAdministration",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Records that a medication was administered to a student. Implements Five Rights validation including patient verification and allergy checking. Supports witness requirement for controlled substances (DEA Schedule I-II). Creates permanent audit trail for compliance. Requires NURSE role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model75"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Administration",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Medication administration logged successfully"
                    },
                    "400": {
                        "description": "Validation error or Five Rights check failed"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    }
                }
            }
        },
        "/api/v1/medications/adverse-reaction": {
            "post": {
                "summary": "Report an adverse medication reaction",
                "operationId": "postApiV1MedicationsAdversereaction",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Documents adverse reactions to medications. Requires parent notification flag for moderate or higher severity (moderate, severe, life-threatening). Includes severity classification, symptoms description, and actions taken. Critical for student safety. All reports are reviewed by medical staff.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model77"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Safety",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Adverse reaction reported successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    }
                }
            }
        },
        "/api/v1/medications/assign": {
            "post": {
                "summary": "Assign medication to a student",
                "operationId": "postApiV1MedicationsAssign",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Assigns a prescribed medication to a student. Implements Five Rights validation (Right Patient, Medication, Dose, Route, Time). Includes dosage format validation, frequency validation, and prescription number tracking. All assignments are audited.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model79"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Prescriptions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Medication assigned to student successfully"
                    },
                    "400": {
                        "description": "Validation error or student/medication not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    }
                }
            }
        },
        "/api/v1/student-management/waitlist": {
            "post": {
                "summary": "Add student to appointment waitlist",
                "operationId": "postApiV1StudentmanagementWaitlist",
                "description": "Adds student to waitlist for specific appointment types when no immediate slots are available. Includes priority levels and automatic notification when slots become available.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model84"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Appointments",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Student added to waitlist successfully"
                    },
                    "400": {
                        "description": "Validation error or student already on waitlist"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/system/grade-transition": {
            "post": {
                "summary": "Trigger grade transition",
                "operationId": "postApiV1SystemGradetransition",
                "description": "**ADMIN ONLY** - Performs end-of-year grade transition for all active students. Automatically advances students to next grade level based on predefined progression rules (K\u00e2\u2020\u20191, 1\u00e2\u2020\u20192, ..., 11\u00e2\u2020\u201912, 12\u00e2\u2020\u2019Graduate). DryRun mode previews changes without committing. Optionally filter by specific grades. Returns detailed results for each student including old grade, new grade, success status, and any errors. Creates audit trail entries. Use dryRun first to verify expected results.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model86"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Utilities",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Grade transition completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid transition parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/analytics/reports/custom": {
            "post": {
                "summary": "Generate custom report",
                "operationId": "postApiV1AnalyticsReportsCustom",
                "description": "Flexible custom report generation with multiple report types and formats. Supports: Health Metrics, Incident Analysis, Medication Usage, Appointment Summary, Compliance Status, Student Health Summary, and Immunization Reports. Output formats: JSON, PDF, CSV, XLSX. Configurable date ranges, filters (school, district, grade, students), and optional features (charts, trends, comparisons). Can schedule recurring reports and email to recipients. Generated reports are stored and accessible via report ID.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model93"
                        }
                    }
                ],
                "tags": [
                    "Analytics",
                    "Reports",
                    "Custom",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Custom report generated successfully"
                    },
                    "400": {
                        "description": "Invalid report parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Report generation failed"
                    }
                }
            }
        },
        "/api/v1/appointments/reminders/send": {
            "post": {
                "summary": "Process and send appointment reminders",
                "operationId": "postApiV1AppointmentsRemindersSend",
                "description": "Processes pending appointment reminders and sends them via configured channels (SMS, email). Typically called by scheduled job/cron. Sends reminders at configured intervals (24 hours, 1 hour, 15 minutes before appointment). Returns summary of sent reminders and any failures. Admin only.",
                "tags": [
                    "Appointments",
                    "Operations",
                    "Reminders",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Reminders processed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    }
                }
            }
        },
        "/api/v1/appointments/{id}/complete": {
            "post": {
                "summary": "Complete appointment",
                "operationId": "postApiV1AppointmentsIdComplete",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Marks appointment as COMPLETED with optional completion notes, outcomes, and follow-up requirements. Completion notes may contain detailed health information. If follow-up required, can specify suggested date. Updates appointment statistics and closes the appointment workflow. All completion data logged for medical records.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model94"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid completion data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    },
                    "409": {
                        "description": "Conflict - Appointment cannot be completed (wrong status)"
                    }
                }
            }
        },
        "/api/v1/appointments/{id}/no-show": {
            "post": {
                "summary": "Mark appointment as no-show",
                "operationId": "postApiV1AppointmentsIdNoshow",
                "description": "**PHI Protected Endpoint** - Marks appointment as NO_SHOW when student fails to attend. Updates statistics for no-show tracking and reporting. Used for compliance reporting and identifying students who may need additional outreach. Triggers follow-up workflows if configured.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment marked as no-show successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    },
                    "409": {
                        "description": "Conflict - Appointment status does not allow no-show marking"
                    }
                }
            }
        },
        "/api/v1/appointments/{id}/cancel": {
            "post": {
                "summary": "Cancel appointment",
                "operationId": "postApiV1AppointmentsIdCancel",
                "description": "**PHI Protected Endpoint** - Cancels an appointment with required reason (5-500 characters). Updates status to CANCELLED, cancels scheduled reminders, and optionally triggers waitlist processing to fill the slot. Cancellation is permanent but logged for audit trail. Notification sent to student emergency contacts.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model95"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment cancelled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Reason required or invalid"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    },
                    "409": {
                        "description": "Conflict - Appointment already completed or cannot be cancelled"
                    }
                }
            }
        },
        "/api/v1/appointments/{id}/start": {
            "post": {
                "summary": "Start appointment (transition to IN_PROGRESS)",
                "operationId": "postApiV1AppointmentsIdStart",
                "description": "**PHI Protected Endpoint** - Transitions appointment from SCHEDULED to IN_PROGRESS status when student arrives and appointment begins. Validates appointment is scheduled for current time (within 15 minutes). Used to track actual appointment flow and calculate time metrics.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Appointment started successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Appointment not found"
                    },
                    "409": {
                        "description": "Conflict - Appointment cannot be started (wrong status or time)"
                    }
                }
            }
        },
        "/api/v1/audit/security-analysis/run": {
            "post": {
                "summary": "Run security analysis",
                "operationId": "postApiV1AuditSecurityanalysisRun",
                "description": "**SECURITY CRITICAL** - Triggers on-demand comprehensive security analysis. Analyzes audit logs for security threats, generates detailed report with risk scores, identifies high-risk users, and provides actionable recommendations. Results saved for compliance documentation. Admin/Security Officer only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model96"
                        }
                    }
                ],
                "tags": [
                    "Audit",
                    "Security",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Security analysis completed and report generated"
                    },
                    "400": {
                        "description": "Validation error - Invalid analysis parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin or Security Officer only"
                    }
                }
            }
        },
        "/api/v1/compliance/reports/generate": {
            "post": {
                "summary": "Generate automated compliance report",
                "operationId": "postApiV1ComplianceReportsGenerate",
                "description": "Automatically generates compliance report by analyzing system data. Collects audit logs, PHI access patterns, security events, policy acknowledgments, and consent records. Includes automated findings and recommendations based on compliance rules. Supports custom date ranges or predefined periods. Compliance Officer only.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model100"
                        }
                    }
                ],
                "tags": [
                    "Compliance",
                    "Reports",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Compliance report generated successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid generation parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Compliance Officer only"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/share": {
            "post": {
                "summary": "Share document with users",
                "operationId": "postApiV1DocumentsIdShare",
                "description": "**PHI PROTECTED ENDPOINT** - Shares document with specified users (nurses, parents, administrators). Validates document is not ARCHIVED or EXPIRED. Records sharing action in audit trail with recipient list. Used for distributing medical reports, incident reports, and health updates. Max 50 recipients per request. Requires appropriate permissions.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model101"
                        }
                    }
                ],
                "tags": [
                    "Documents",
                    "Sharing",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Document shared successfully with audit entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid recipients or unshareable document"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Cannot share archived/expired documents"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/documents/{id}/sign": {
            "post": {
                "summary": "E-sign document",
                "operationId": "postApiV1DocumentsIdSign",
                "description": "**CRITICAL PHI ENDPOINT** - Applies digital signature to document for legal compliance. Validates document can be signed (status must be DRAFT or PENDING, not expired). Records signer ID, role, timestamp, IP address, and optional signature image data. Automatically changes status to APPROVED. Creates audit trail entry. Used for consent forms, medical authorizations, incident reports, and policy acknowledgments. Legally binding.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model102"
                        }
                    }
                ],
                "tags": [
                    "Documents",
                    "Signatures",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Document signed successfully with signature record created"
                    },
                    "400": {
                        "description": "Validation error - Document cannot be signed (archived/expired)"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Insufficient signing authority"
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/{id}/notify": {
            "post": {
                "summary": "Send notification to specific contact",
                "operationId": "postApiV1EmergencycontactsIdNotify",
                "description": "**PHI Protected Endpoint** - Sends notification to a specific emergency contact through specified channels. Used for targeted communications (e.g., medication reminders to primary guardian, appointment confirmations). Returns delivery status for each channel attempted. All notifications logged for compliance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency contact UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model108"
                        }
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Notifications",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Notification sent (check result for delivery status)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid notification data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Contact not found or inactive"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/{id}/verify": {
            "post": {
                "summary": "Verify emergency contact information",
                "operationId": "postApiV1EmergencycontactsIdVerify",
                "description": "**PHI Protected Endpoint** - Sends verification code to emergency contact via chosen method (SMS, email, or voice). Used to confirm contact information is current and accurate. Critical for ensuring emergency communications reach the right person. Verification status is tracked for compliance and quality assurance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency contact UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model109"
                        }
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Verification code sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid method or contact details unavailable"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            }
        },
        "/api/v1/health-assessments/emergency/notify": {
            "post": {
                "summary": "Send emergency health notification",
                "operationId": "postApiV1HealthassessmentsEmergencyNotify",
                "description": "**CRITICAL PHI ENDPOINT** - Triggers emergency notification system for urgent health situations. Automatically contacts parents, emergency contacts, and medical staff based on severity. Creates incident report and audit trail. Used for medical emergencies, allergic reactions, and serious injuries.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model115"
                        }
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Emergency",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Emergency notification sent successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "500": {
                        "description": "Internal server error - Emergency protocols activated"
                    }
                }
            }
        },
        "/api/v1/health-assessments/growth/{studentId}": {
            "post": {
                "summary": "Record growth measurement for student",
                "operationId": "postApiV1HealthassessmentsGrowthStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Records height, weight, BMI, and other growth measurements. Automatically calculates percentiles and flags concerning trends. Supports head circumference for younger students. Critical for monitoring developmental health.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model116"
                        }
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Growth",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Growth measurement recorded successfully"
                    },
                    "400": {
                        "description": "Validation error or measurement outside normal ranges"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/incidents/{id}/notify": {
            "post": {
                "summary": "Send parent notification for incident",
                "operationId": "postApiV1IncidentsIdNotify",
                "description": "**CRITICAL PHI ENDPOINT** - Sends automated notification to parent/guardian about incident via specified method (EMAIL, SMS, PHONE, IN_PERSON, LETTER). Retrieves emergency contacts from student profile. Sends standardized incident alert including student name, incident type, severity, date/time, and contact instructions. Updates incident record with notification status. Used for emergency communications and legal compliance. All notifications are logged.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Incident report ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model122"
                        }
                    }
                ],
                "tags": [
                    "Incidents",
                    "Notifications",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Parent notification sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid notification method or missing emergency contacts"
                    },
                    "401": {
                        "description": "Unauthorized - JWT token required"
                    },
                    "404": {
                        "description": "Incident report not found"
                    }
                }
            }
        },
        "/api/v1/inventory/stock/adjust": {
            "post": {
                "summary": "Adjust stock levels (add/remove)",
                "operationId": "postApiV1InventoryStockAdjust",
                "description": "Manually adjusts stock quantity for corrections, waste disposal, transfers, or usage. Positive values add stock, negative values remove. Creates audit trail transaction with: (1) Adjustment amount, (2) Reason (required), (3) Performed by (auto-captured from JWT), (4) Previous and new stock levels. Cannot be used for purchase orders - use purchase order workflow instead. All adjustments are permanent and logged.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model123"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Stock",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Stock adjusted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid quantity or missing reason"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            }
        },
        "/api/v1/inventory/stock/count": {
            "post": {
                "summary": "Record physical stock count",
                "operationId": "postApiV1InventoryStockCount",
                "description": "Records results of physical inventory count and automatically adjusts stock if discrepancy found. Compares counted quantity to system quantity and creates adjustment transaction if different. Used for: (1) Regular inventory audits, (2) Compliance verification, (3) Shrinkage detection, (4) Expiration management. All counts are logged with performer, date, and notes for audit compliance.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model124"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Stock",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Stock count recorded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid count quantity"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                }
            }
        },
        "/api/v1/student-management/barcode/scan": {
            "post": {
                "summary": "Scan and decode barcode for student/medication identification",
                "operationId": "postApiV1StudentmanagementBarcodeScan",
                "description": "Scans various barcode formats (Code 128, QR, Data Matrix) to identify students, medications, or equipment. Returns decoded information and associated records. Used for quick identification and medication administration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model125"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Barcode",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Barcode scanned and decoded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid barcode format or unrecognized code"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Barcode not found in system"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/barcode/verify-medication": {
            "post": {
                "summary": "Verify medication administration using three-point barcode verification",
                "operationId": "postApiV1StudentmanagementBarcodeVerifymedication",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Implements five rights of medication administration using barcode verification: Right Patient (student barcode), Right Medication (medication barcode), and Right Person (nurse barcode). Critical safety feature for medication administration.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model126"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Barcode",
                    "Medications",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Medication administration verified successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Verification failed - barcode mismatch or safety violation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "404": {
                        "description": "Student, medication, or nurse not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/grade-transitions/bulk": {
            "post": {
                "summary": "Perform bulk grade transition for end of school year",
                "operationId": "postApiV1StudentmanagementGradetransitionsBulk",
                "description": "Processes grade level transitions for all eligible students. Includes promotion criteria validation, retention decisions, and graduation processing. Can be run in dry-run mode for testing. Requires ADMIN role.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model129"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Administration",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Bulk grade transition completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error or transition criteria not met"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires ADMIN role"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/photos/search": {
            "post": {
                "summary": "Search for student by photo using facial recognition",
                "operationId": "postApiV1StudentmanagementPhotosSearch",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Uses facial recognition to identify students from uploaded photos. Returns potential matches with confidence scores. Used for student identification in emergency situations or when student ID is unknown.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model130"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Photo search completed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid image format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/photos/{studentId}": {
            "post": {
                "summary": "Upload student photo",
                "operationId": "postApiV1StudentmanagementPhotosStudentid",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Uploads and stores student photo with metadata. Includes facial recognition indexing for identification purposes. Requires NURSE or ADMIN role. All photo uploads are audited.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model134"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Student photo uploaded successfully"
                    },
                    "400": {
                        "description": "Validation error or invalid image format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/students/{id}/deactivate": {
            "post": {
                "summary": "Deactivate student",
                "operationId": "postApiV1StudentsIdDeactivate",
                "description": "**PHI Protected Endpoint** - Soft-deletes a student (withdrawal, transfer, graduation). Requires detailed reason for audit trail. Does not delete historical health records - maintains complete history for compliance. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model135"
                        }
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student deactivated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Reason required"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Student not found"
                    }
                }
            }
        },
        "/api/v1/students/{id}/transfer": {
            "post": {
                "summary": "Transfer student to different nurse",
                "operationId": "postApiV1StudentsIdTransfer",
                "description": "**PHI Protected Endpoint** - Reassigns a student to a different nurse. Requires admin role. Creates audit trail entry for care handoff. Previous nurse retains read-only access to historical records.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model136"
                        }
                    }
                ],
                "tags": [
                    "Students",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student transferred successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid nurse ID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Student or nurse not found"
                    }
                }
            }
        },
        "/api/v1/system/sync/students": {
            "post": {
                "summary": "Sync student data from SIS",
                "operationId": "postApiV1SystemSyncStudents",
                "description": "**ADMIN ONLY** - Pulls student data from Student Information System. Full sync imports all students, incremental sync imports only changed records. Optionally filter by grade level. Creates new student records if auto-create enabled, updates existing records based on conflict resolution strategy. Returns sync session with statistics (processed, created, updated, skipped, failed). Sync runs asynchronously for large datasets. Use sync status endpoint to monitor progress.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model137"
                        }
                    }
                ],
                "tags": [
                    "System",
                    "Sync",
                    "Students",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Student sync initiated successfully"
                    },
                    "400": {
                        "description": "Validation error - Integration must be SIS type or not configured"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Integration not found"
                    }
                }
            }
        },
        "/api/v1/users/{id}/reactivate": {
            "post": {
                "summary": "Reactivate user",
                "operationId": "postApiV1UsersIdReactivate",
                "description": "**ADMIN ONLY** - Reactivates a previously deactivated user account. Requires ADMIN or DISTRICT_ADMIN role.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User reactivated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/users/{id}/reset-password": {
            "post": {
                "summary": "Reset user password",
                "operationId": "postApiV1UsersIdResetpassword",
                "description": "**ADMIN ONLY** - Resets user password without requiring current password. Requires ADMIN or DISTRICT_ADMIN role.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model138"
                        }
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Insufficient permissions to reset passwords"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/users/{id}/change-password": {
            "post": {
                "summary": "Change user password",
                "operationId": "postApiV1UsersIdChangepassword",
                "description": "Allows users to change their own password (requires current password). Admins can change any user password.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model139"
                        }
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Current password is incorrect or validation error"
                    },
                    "403": {
                        "description": "You can only change your own password"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/v1/users/{id}/deactivate": {
            "post": {
                "summary": "Deactivate user",
                "operationId": "postApiV1UsersIdDeactivate",
                "description": "**ADMIN ONLY** - Deactivates a user account. Users cannot deactivate themselves. Requires ADMIN or DISTRICT_ADMIN role.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID identifier",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Users",
                    "v1"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deactivated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Cannot deactivate your own account"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/v1/system/auth/mfa/setup": {
            "post": {
                "summary": "Setup multi-factor authentication for user",
                "operationId": "postV1SystemAuthMfaSetup",
                "description": "Initializes MFA for the authenticated user using TOTP, SMS, or email methods",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Hidden Model"
                        }
                    }
                ],
                "tags": [
                    "system",
                    "authentication",
                    "mfa"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MFA setup successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid MFA setup data"
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "409": {
                        "description": "MFA already configured"
                    },
                    "500": {
                        "description": "Server error during MFA setup"
                    }
                }
            }
        },
        "/v1/system/auth/mfa/verify": {
            "post": {
                "summary": "Verify MFA authentication code",
                "operationId": "postV1SystemAuthMfaVerify",
                "description": "Validates MFA code for TOTP, SMS, or backup codes",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Hidden Model"
                        }
                    }
                ],
                "tags": [
                    "system",
                    "authentication",
                    "mfa"
                ],
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MFA verification successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid MFA code"
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "403": {
                        "description": "MFA verification failed"
                    },
                    "500": {
                        "description": "Server error during MFA verification"
                    }
                }
            }
        },
        "/api/v1/communications/broadcasts/{id}/cancel": {
            "post": {
                "summary": "Cancel scheduled broadcast",
                "operationId": "postApiV1CommunicationsBroadcastsIdCancel",
                "description": "**PHI Protected Endpoint** - Cancels a scheduled broadcast before it is sent. Cannot cancel broadcasts that have already been sent or are currently being sent. Sender must own the broadcast. All pending deliveries are cancelled and status updated for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Broadcast message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Communications",
                    "Broadcasts",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Broadcast cancelled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Broadcast already sent or cannot be cancelled"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Not broadcast owner"
                    },
                    "404": {
                        "description": "Broadcast not found"
                    }
                }
            }
        },
        "/api/v1/communications/messages/{id}/reply": {
            "post": {
                "summary": "Reply to a message",
                "operationId": "postApiV1CommunicationsMessagesIdReply",
                "description": "**PHI Protected Endpoint** - Creates a reply to an existing message. Reply is sent to the original message sender. Subject is automatically prefixed with \"Re:\". Inherits category from original message. Supports all standard communication channels.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model143"
                        }
                    }
                ],
                "tags": [
                    "Communications",
                    "Messages",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Reply sent successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Original message not found"
                    }
                }
            }
        },
        "/api/v1/compliance/policies/{policyId}/acknowledge": {
            "post": {
                "summary": "Acknowledge policy",
                "operationId": "postApiV1CompliancePoliciesPolicyidAcknowledge",
                "description": "**COMPLIANCE REQUIRED** - Records staff acknowledgment of policy. Required for HIPAA/FERPA training compliance. Only ACTIVE policies can be acknowledged. Records user, timestamp, and IP address for audit trail. Prevents duplicate acknowledgments. Used for tracking staff training completion.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Policy ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "policyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Policies",
                    "Training",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Policy acknowledged successfully"
                    },
                    "400": {
                        "description": "Policy not active or already acknowledged"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Policy not found"
                    }
                }
            }
        },
        "/api/v1/documents/templates/{templateId}/create": {
            "post": {
                "summary": "Create document from template",
                "operationId": "postApiV1DocumentsTemplatesTemplateidCreate",
                "description": "**PHI PROTECTED ENDPOINT** - Generates new document from template with pre-filled data. Merges template structure with provided field values. Used for rapid creation of consent forms, health assessments, and incident reports. Validates required template fields. Creates document in DRAFT status. Maintains reference to source template.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template document UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "templateId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model145"
                        }
                    }
                ],
                "tags": [
                    "Documents",
                    "Templates",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Document created from template successfully"
                    },
                    "400": {
                        "description": "Validation error - Invalid template data or missing required fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Template not found or student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/emergency-contacts/student/{studentId}/notify": {
            "post": {
                "summary": "Send emergency notification to all contacts for a student",
                "operationId": "postApiV1EmergencycontactsStudentStudentidNotify",
                "description": "**CRITICAL PHI ENDPOINT** - Sends emergency notification to all active contacts for a student through specified channels (SMS, email, voice). Contacts are notified in priority order. Returns success/failure status for each contact and channel. Used for medical emergencies, incidents, and urgent health communications. All notifications are logged for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model108"
                        }
                    }
                ],
                "tags": [
                    "EmergencyContacts",
                    "Notifications",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Notifications sent (check individual results for delivery status)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid notification data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Student not found or no emergency contacts available"
                    }
                }
            }
        },
        "/api/v1/health-assessments/medication-interactions/{studentId}/check": {
            "post": {
                "summary": "Check interactions for a potential new medication",
                "operationId": "postApiV1HealthassessmentsMedicationinteractionsStudentidCheck",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Validates potential interactions before adding a new medication to student's regimen. Includes severity assessment, clinical significance, and management recommendations.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model146"
                        }
                    }
                ],
                "tags": [
                    "Health Assessments",
                    "Medications",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "New medication interactions checked successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/student-management/transcripts/{studentId}/import": {
            "post": {
                "summary": "Import academic transcript for student",
                "operationId": "postApiV1StudentmanagementTranscriptsStudentidImport",
                "description": "**HIGHLY SENSITIVE PHI ENDPOINT** - Imports academic transcript data including grades, courses, GPA, and attendance records. Validates transcript format and calculates academic metrics. Requires ADMIN or COUNSELOR role.",
                "parameters": [
                    {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        },
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model151"
                        }
                    }
                ],
                "tags": [
                    "Student Management",
                    "Operations",
                    "Academic Records",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Academic transcript imported successfully"
                    },
                    "400": {
                        "description": "Validation error or invalid transcript format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires ADMIN or COUNSELOR role"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/system/integrations/{id}/test": {
            "post": {
                "summary": "Test integration connection",
                "operationId": "postApiV1SystemIntegrationsIdTest",
                "description": "**ADMIN ONLY** - Tests integration connectivity and authentication. Validates credentials without modifying data. Returns response time, connection status, and integration-specific details (API version, record counts, etc.). Temporarily sets status to TESTING during test. Updates status to ACTIVE on success or ERROR on failure. Logs test results for troubleshooting. Required before activating new integrations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Integration configuration UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "System",
                    "Integrations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Connection test completed (check success field for result)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin role required"
                    },
                    "404": {
                        "description": "Integration not found"
                    }
                }
            }
        },
        "/api/v1/access-control/roles/{roleId}/permissions/{permissionId}": {
            "post": {
                "summary": "Assign permission to role",
                "operationId": "postApiV1AccesscontrolRolesRoleidPermissionsPermissionid",
                "description": "Assigns a permission to a role. Admin only. Creates role-permission relationship.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Role-Permissions",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - Permission assigned to role"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Role or permission not found"
                    },
                    "409": {
                        "description": "Conflict - Permission already assigned to role"
                    }
                }
            },
            "delete": {
                "summary": "Remove permission from role",
                "operationId": "deleteApiV1AccesscontrolRolesRoleidPermissionsPermissionid",
                "description": "Removes a permission from a role. Admin only. Deletes role-permission relationship.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Role-Permissions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Permission removed from role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Role, permission, or assignment not found"
                    }
                }
            }
        },
        "/api/v1/access-control/users/{userId}/roles/{roleId}": {
            "post": {
                "summary": "Assign role to user",
                "operationId": "postApiV1AccesscontrolUsersUseridRolesRoleid",
                "description": "Assigns a role to a user. Admin only. Creates user-role relationship.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "User-Roles",
                    "v1"
                ],
                "responses": {
                    "201": {
                        "description": "Created - Role assigned to user"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "User or role not found"
                    },
                    "409": {
                        "description": "Conflict - Role already assigned to user"
                    }
                }
            },
            "delete": {
                "summary": "Remove role from user",
                "operationId": "deleteApiV1AccesscontrolUsersUseridRolesRoleid",
                "description": "Removes a role from a user. Admin only. Deletes user-role relationship.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "User-Roles",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Role removed from user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "User, role, or assignment not found"
                    }
                }
            }
        },
        "/api/v1/access-control/security-incidents/{id}": {
            "put": {
                "summary": "Update security incident",
                "operationId": "putApiV1AccesscontrolSecurityincidentsId",
                "description": "Updates security incident details (status, severity, notes, etc.). Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Security incident UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model183"
                        }
                    }
                ],
                "tags": [
                    "Access Control",
                    "Security Incidents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Incident updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "Incident not found"
                    }
                }
            }
        },
        "/api/v1/inventory/suppliers/{id}": {
            "put": {
                "summary": "Update supplier/vendor",
                "operationId": "putApiV1InventorySuppliersId",
                "description": "Updates vendor information including contact details, address, payment terms, rating, and active status. Can deactivate vendors by setting isActive to false - inactive vendors cannot be used for new purchase orders but historical data is preserved. All updates are logged for audit trail.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier/vendor UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model203"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Suppliers",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Supplier updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid update data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                }
            }
        },
        "/api/v1/medications/inventory/{id}": {
            "put": {
                "summary": "Update medication inventory quantity",
                "operationId": "putApiV1MedicationsInventoryId",
                "description": "Adjusts inventory quantity for corrections, transfers, or disposal. Requires reason and adjustment type (correction, waste, transfer, expired) for complete audit trail. Prevents negative quantities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory item UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model204"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Inventory",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Inventory quantity updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error or would result in negative quantity"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE or ADMIN role"
                    },
                    "404": {
                        "description": "Inventory item not found"
                    }
                }
            }
        },
        "/api/v1/compliance/consents/{signatureId}/withdraw": {
            "put": {
                "summary": "Withdraw consent",
                "operationId": "putApiV1ComplianceConsentsSignatureidWithdraw",
                "description": "**LEGAL COMPLIANCE ENDPOINT** - Withdraws previously given consent. Records withdrawal timestamp and user for complete audit trail. Consent signature is preserved for legal record. Prevents duplicate withdrawal. Used when parent/guardian revokes consent. System must respect withdrawal immediately.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Consent signature ID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "signatureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Compliance",
                    "Consents",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Consent withdrawn successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Consent already withdrawn"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Consent signature not found"
                    }
                }
            }
        },
        "/api/v1/inventory/orders/{id}/receive": {
            "put": {
                "summary": "Receive purchase order and update stock",
                "operationId": "putApiV1InventoryOrdersIdReceive",
                "description": "Updates purchase order status when items are received. Status transitions: PENDING \u00e2\u2020\u2019 APPROVED \u00e2\u2020\u2019 ORDERED \u00e2\u2020\u2019 PARTIALLY_RECEIVED/RECEIVED or CANCELLED. Setting to RECEIVED automatically updates stock levels for all items in the order. Validates status transition workflow to prevent invalid state changes. Records received date (defaults to now). Used for receiving workflow and inventory replenishment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase order UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model211"
                        }
                    }
                ],
                "tags": [
                    "Inventory",
                    "Purchase Orders",
                    "Operations",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Purchase order status updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid status transition"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Purchase order not found"
                    }
                }
            }
        },
        "/api/v1/medications/student-medication/{id}/deactivate": {
            "put": {
                "summary": "Deactivate student medication assignment",
                "operationId": "putApiV1MedicationsStudentmedicationIdDeactivate",
                "description": "**PHI Protected Endpoint** - Discontinues a medication for a student. Requires detailed reason and deactivation type for audit trail. Does not delete historical records - maintains complete medication history for safety.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student medication assignment UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model212"
                        }
                    }
                ],
                "tags": [
                    "Medications",
                    "Prescriptions",
                    "Healthcare",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student medication deactivated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error or medication assignment not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Requires NURSE role"
                    },
                    "404": {
                        "description": "Student medication assignment not found"
                    }
                }
            }
        },
        "/api/v1/access-control/ip-restrictions/{id}": {
            "delete": {
                "summary": "Remove IP restriction",
                "operationId": "deleteApiV1AccesscontrolIprestrictionsId",
                "description": "Deletes an IP allow/deny rule. Admin only.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "IP restriction UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "IP Restrictions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - IP restriction removed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    },
                    "404": {
                        "description": "IP restriction not found"
                    }
                }
            }
        },
        "/api/v1/access-control/sessions/{token}": {
            "delete": {
                "summary": "Delete session",
                "operationId": "deleteApiV1AccesscontrolSessionsToken",
                "description": "Deletes a specific session by token. Users can delete own sessions, admins can delete any.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "x-convert": {
                            "trim": true
                        },
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Access Control",
                    "Sessions",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Success - Session deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Can only delete own sessions unless admin"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                }
            }
        },
        "/api/v1/appointments/waitlist/{id}": {
            "delete": {
                "summary": "Remove student from waitlist",
                "operationId": "deleteApiV1AppointmentsWaitlistId",
                "description": "**PHI Protected Endpoint** - Removes student from waitlist with optional reason (e.g., \"Appointment scheduled\", \"No longer needed\", \"Student transferred\"). Updates waitlist status to CANCELLED. All removals are logged for compliance and quality tracking.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Waitlist entry UUID",
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model213"
                        }
                    }
                ],
                "tags": [
                    "Appointments",
                    "Operations",
                    "Waitlist",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Student removed from waitlist successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Waitlist entry not found"
                    }
                }
            }
        },
        "/api/v1/audit/logs/archive": {
            "delete": {
                "summary": "Archive old audit logs",
                "operationId": "deleteApiV1AuditLogsArchive",
                "description": "**COMPLIANCE CRITICAL** - Archives audit logs older than specified days (minimum 90 days for HIPAA compliance). Moves logs to long-term storage while maintaining compliance with data retention requirements. Supports dry-run mode for testing. Admin only. Cannot delete logs newer than 90 days to maintain required audit trail.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/Model214"
                        }
                    }
                ],
                "tags": [
                    "Audit",
                    "Archive",
                    "Compliance",
                    "v1"
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs archived successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error - Invalid archive parameters or retention violation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Admin only"
                    }
                }
            }
        }
    },
    "definitions": {
        "Model1": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "OK"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-10-23T22:38:14.617Z",
                    "x-format": {
                        "isoDate": true
                    }
                },
                "uptime": {
                    "type": "number",
                    "example": 123.45
                },
                "environment": {
                    "type": "string",
                    "example": "development"
                }
            }
        },
        "priority": {
            "type": "string",
            "description": "Appointment priority level",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model2": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "description": "Student UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "nurseId": {
                    "type": "string",
                    "description": "Nurse UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Appointment type (e.g., \"Checkup\", \"Medication\", \"Emergency\")",
                    "x-convert": {
                        "trim": true
                    }
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Appointment start time (ISO 8601, future date required)"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Appointment end time (ISO 8601, must be after start time)"
                },
                "duration": {
                    "type": "integer",
                    "description": "Appointment duration in minutes (15-120, default: 30)",
                    "minimum": 15,
                    "maximum": 120
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for appointment",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/priority"
                },
                "isFollowUp": {
                    "type": "boolean",
                    "description": "Whether this is a follow-up appointment"
                },
                "parentAppointmentId": {
                    "type": "string",
                    "description": "Parent appointment UUID if this is a follow-up",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "studentId",
                "nurseId",
                "type",
                "startTime"
            ]
        },
        "type": {
            "type": "string",
            "enum": [
                "guardian",
                "staff",
                "vendor",
                "provider",
                "other"
            ]
        },
        "customFields": {
            "type": "object"
        },
        "Model3": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                },
                "type": {
                    "$ref": "#/definitions/type"
                },
                "organization": {
                    "type": "string",
                    "maxLength": 200
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                },
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "city": {
                    "type": "string",
                    "maxLength": 100
                },
                "state": {
                    "type": "string",
                    "maxLength": 50
                },
                "zip": {
                    "type": "string",
                    "maxLength": 20
                },
                "relationTo": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "relationshipType": {
                    "type": "string",
                    "maxLength": 50
                },
                "customFields": {
                    "$ref": "#/definitions/customFields"
                },
                "isActive": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                }
            },
            "required": [
                "firstName",
                "lastName",
                "type"
            ]
        },
        "category": {
            "type": "string",
            "description": "Document category",
            "enum": [
                "MEDICAL_RECORD",
                "CONSENT_FORM",
                "POLICY",
                "INCIDENT_REPORT",
                "TRAINING",
                "ADMINISTRATIVE",
                "STUDENT_FILE",
                "INSURANCE",
                "OTHER"
            ]
        },
        "tags": {
            "type": "array",
            "description": "Document tags for categorization",
            "maxItems": 20,
            "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "x-convert": {
                    "trim": true
                }
            }
        },
        "templateData": {
            "type": "object",
            "description": "Template-specific data for form generation"
        },
        "accessLevel": {
            "type": "string",
            "description": "Document access level",
            "enum": [
                "PUBLIC",
                "STAFF_ONLY",
                "ADMIN_ONLY",
                "RESTRICTED"
            ]
        },
        "Model4": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Document title",
                    "minLength": 3,
                    "maxLength": 300,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Document description",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "category": {
                    "$ref": "#/definitions/category"
                },
                "fileType": {
                    "type": "string",
                    "description": "File type/extension (e.g., pdf, docx, jpg)",
                    "minLength": 2,
                    "maxLength": 10,
                    "x-convert": {
                        "trim": true
                    }
                },
                "fileName": {
                    "type": "string",
                    "description": "Original filename",
                    "minLength": 1,
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                },
                "fileSize": {
                    "type": "integer",
                    "description": "File size in bytes (max 100MB)",
                    "minimum": 0,
                    "maximum": 100000000
                },
                "fileUrl": {
                    "type": "string",
                    "description": "Storage URL for the file",
                    "x-format": {
                        "uri": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "description": "Associated student ID (if student-specific document)",
                    "x-format": {
                        "guid": true
                    }
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "Whether this is a template document"
                },
                "templateData": {
                    "$ref": "#/definitions/templateData"
                },
                "accessLevel": {
                    "$ref": "#/definitions/accessLevel"
                },
                "retentionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Document retention/expiration date"
                },
                "containsPHI": {
                    "type": "boolean",
                    "description": "Whether document contains Protected Health Information"
                }
            },
            "required": [
                "title",
                "category",
                "fileType",
                "fileName",
                "fileSize",
                "fileUrl"
            ]
        },
        "Model5": {
            "type": "string",
            "description": "Contact priority level",
            "enum": [
                "PRIMARY",
                "SECONDARY",
                "EMERGENCY_ONLY"
            ]
        },
        "preferredContactMethod": {
            "type": "string",
            "description": "Preferred method of contact",
            "enum": [
                "SMS",
                "EMAIL",
                "VOICE",
                "ANY"
            ]
        },
        "Model6": {
            "type": "string",
            "enum": [
                "sms",
                "email",
                "voice"
            ]
        },
        "notificationChannels": {
            "type": "array",
            "description": "Enabled notification channels",
            "items": {
                "$ref": "#/definitions/Model6"
            }
        },
        "Model7": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "description": "Student UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "firstName": {
                    "type": "string",
                    "description": "Contact first name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "Contact last name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "relationship": {
                    "type": "string",
                    "description": "Relationship to student (e.g., \"Mother\", \"Father\", \"Guardian\")",
                    "x-convert": {
                        "trim": true
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Contact phone number",
                    "pattern": "^[\\d\\s\\-().+]+$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "email": {
                    "type": "string",
                    "description": "Contact email address",
                    "x-format": {
                        "email": true
                    }
                },
                "address": {
                    "type": "string",
                    "description": "Contact physical address",
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model5"
                },
                "preferredContactMethod": {
                    "$ref": "#/definitions/preferredContactMethod"
                },
                "notificationChannels": {
                    "$ref": "#/definitions/notificationChannels"
                },
                "canPickupStudent": {
                    "type": "boolean",
                    "description": "Whether contact is authorized to pick up student"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes about the contact",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "studentId",
                "firstName",
                "lastName",
                "relationship",
                "phoneNumber",
                "priority"
            ]
        },
        "Model8": {
            "type": "string",
            "enum": [
                "CHECKUP",
                "VACCINATION",
                "ILLNESS",
                "INJURY",
                "SCREENING",
                "PHYSICAL_EXAM",
                "MENTAL_HEALTH",
                "DENTAL",
                "VISION",
                "HEARING"
            ]
        },
        "vital": {
            "type": "object"
        },
        "attachments": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "Model9": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model8"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "vital": {
                    "$ref": "#/definitions/vital"
                },
                "provider": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "attachments": {
                    "$ref": "#/definitions/attachments"
                }
            },
            "required": [
                "studentId",
                "type",
                "date",
                "description"
            ]
        },
        "Model10": {
            "type": "string",
            "description": "Incident type",
            "enum": [
                "INJURY",
                "ILLNESS",
                "BEHAVIORAL",
                "MEDICATION_ERROR",
                "ALLERGIC_REACTION",
                "EMERGENCY",
                "OTHER"
            ]
        },
        "severity": {
            "type": "string",
            "description": "Incident severity level",
            "enum": [
                "MINOR",
                "MODERATE",
                "SERIOUS",
                "CRITICAL",
                "LIFE_THREATENING"
            ]
        },
        "status": {
            "type": "string",
            "description": "Incident status",
            "default": "REPORTED",
            "enum": [
                "REPORTED",
                "UNDER_REVIEW",
                "FOLLOW_UP_REQUIRED",
                "RESOLVED",
                "ARCHIVED"
            ]
        },
        "witnesses": {
            "type": "array",
            "description": "List of witness names",
            "items": {
                "type": "string",
                "x-convert": {
                    "trim": true
                }
            }
        },
        "parentNotificationMethod": {
            "type": "string",
            "description": "Method used to notify parent",
            "enum": [
                "EMAIL",
                "SMS",
                "PHONE",
                "IN_PERSON",
                "LETTER"
            ]
        },
        "Model11": {
            "type": "array",
            "description": "Attachment URLs",
            "items": {
                "type": "string",
                "x-format": {
                    "uri": true
                }
            }
        },
        "evidencePhotos": {
            "type": "array",
            "description": "Photo evidence URLs",
            "items": {
                "type": "string",
                "x-format": {
                    "uri": true
                }
            }
        },
        "evidenceVideos": {
            "type": "array",
            "description": "Video evidence URLs",
            "items": {
                "type": "string",
                "x-format": {
                    "uri": true
                }
            }
        },
        "insuranceClaimStatus": {
            "type": "string",
            "description": "Insurance claim status",
            "enum": [
                "NOT_FILED",
                "FILED",
                "PENDING",
                "APPROVED",
                "DENIED",
                "CLOSED"
            ]
        },
        "legalComplianceStatus": {
            "type": "string",
            "description": "Legal compliance status",
            "enum": [
                "PENDING",
                "COMPLIANT",
                "NON_COMPLIANT",
                "UNDER_REVIEW"
            ]
        },
        "Model12": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "description": "Student involved in incident",
                    "x-format": {
                        "guid": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model10"
                },
                "severity": {
                    "$ref": "#/definitions/severity"
                },
                "status": {
                    "$ref": "#/definitions/status"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed incident description",
                    "minLength": 10,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Location where incident occurred",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "actionsTaken": {
                    "type": "string",
                    "description": "Immediate actions taken",
                    "minLength": 5,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "occurredAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the incident occurred"
                },
                "witnesses": {
                    "$ref": "#/definitions/witnesses"
                },
                "parentNotified": {
                    "type": "boolean",
                    "description": "Parent notification status",
                    "default": false
                },
                "parentNotificationMethod": {
                    "$ref": "#/definitions/parentNotificationMethod"
                },
                "followUpRequired": {
                    "type": "boolean",
                    "description": "Whether follow-up is required",
                    "default": false
                },
                "followUpNotes": {
                    "type": "string",
                    "description": "Follow-up notes",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "attachments": {
                    "$ref": "#/definitions/Model11"
                },
                "evidencePhotos": {
                    "$ref": "#/definitions/evidencePhotos"
                },
                "evidenceVideos": {
                    "$ref": "#/definitions/evidenceVideos"
                },
                "insuranceClaimNumber": {
                    "type": "string",
                    "description": "Insurance claim number",
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "insuranceClaimStatus": {
                    "$ref": "#/definitions/insuranceClaimStatus"
                },
                "legalComplianceStatus": {
                    "$ref": "#/definitions/legalComplianceStatus"
                }
            },
            "required": [
                "studentId",
                "type",
                "severity",
                "description",
                "location",
                "actionsTaken",
                "occurredAt"
            ]
        },
        "dosageForm": {
            "type": "string",
            "enum": [
                "Tablet",
                "Capsule",
                "Liquid",
                "Injection",
                "Topical",
                "Inhaler",
                "Drops",
                "Patch",
                "Suppository",
                "Powder",
                "Cream",
                "Ointment",
                "Gel",
                "Spray",
                "Lozenge"
            ],
            "x-convert": {
                "trim": true
            }
        },
        "Model13": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "genericName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "dosageForm": {
                    "$ref": "#/definitions/dosageForm"
                },
                "strength": {
                    "type": "string",
                    "pattern": "^[0-9]+(\\.[0-9]+)?\\s*(mg|g|mcg|ml|L|units?|mEq|%)$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "manufacturer": {
                    "type": "string",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "ndc": {
                    "type": "string",
                    "pattern": "^[0-9]{5}-([0-9]{3,4})-[0-9]{2}$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "isControlled": {
                    "type": "boolean",
                    "default": false
                },
                "deaSchedule": {
                    "type": "string"
                },
                "requiresWitness": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "dosageForm",
                "strength",
                "deaSchedule"
            ]
        },
        "gender": {
            "type": "string",
            "description": "Student gender",
            "enum": [
                "Male",
                "Female",
                "Other",
                "Prefer not to say"
            ]
        },
        "bloodType": {
            "type": "string",
            "description": "Blood type",
            "enum": [
                "A+",
                "A-",
                "B+",
                "B-",
                "AB+",
                "AB-",
                "O+",
                "O-"
            ]
        },
        "primaryContact": {
            "type": "object",
            "description": "Primary emergency contact",
            "properties": {
                "name": {
                    "type": "string"
                },
                "relationship": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                }
            },
            "required": [
                "name",
                "relationship",
                "phone"
            ]
        },
        "Model14": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "description": "Student first name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "Student last name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "dateOfBirth": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Student date of birth (ISO 8601 format)"
                },
                "grade": {
                    "type": "string",
                    "description": "Grade level (e.g., \"K\", \"1\", \"2\", etc.)",
                    "x-convert": {
                        "trim": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "description": "School-assigned student ID number",
                    "x-convert": {
                        "trim": true
                    }
                },
                "gender": {
                    "$ref": "#/definitions/gender"
                },
                "bloodType": {
                    "$ref": "#/definitions/bloodType"
                },
                "primaryContact": {
                    "$ref": "#/definitions/primaryContact"
                },
                "schoolId": {
                    "type": "string",
                    "description": "School UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "nurseId": {
                    "type": "string",
                    "description": "Assigned nurse UUID",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "firstName",
                "lastName",
                "dateOfBirth"
            ]
        },
        "role": {
            "type": "string",
            "description": "User role",
            "enum": [
                "ADMIN",
                "NURSE",
                "SCHOOL_ADMIN",
                "DISTRICT_ADMIN",
                "COUNSELOR",
                "VIEWER"
            ]
        },
        "Model15": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email address",
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "case": "lower",
                        "trim": true
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password (minimum 8 characters)",
                    "minLength": 8
                },
                "firstName": {
                    "type": "string",
                    "description": "First name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "role": {
                    "$ref": "#/definitions/role"
                }
            },
            "required": [
                "email",
                "password",
                "firstName",
                "lastName",
                "role"
            ]
        },
        "Hidden Model": {
            "type": "object"
        },
        "Model16": {
            "type": "string",
            "description": "IP restriction type",
            "enum": [
                "ALLOW",
                "DENY"
            ]
        },
        "Model17": {
            "type": "object",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "IP address or CIDR range",
                    "x-format": {
                        "ip": {
                            "cidr": "optional",
                            "version": [
                                "ipv4",
                                "ipv6"
                            ]
                        }
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model16"
                },
                "description": {
                    "type": "string",
                    "description": "Restriction description",
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expiration timestamp"
                }
            },
            "required": [
                "ipAddress",
                "type"
            ]
        },
        "action": {
            "type": "string",
            "description": "Action type",
            "enum": [
                "create",
                "read",
                "update",
                "delete",
                "list",
                "execute"
            ],
            "x-convert": {
                "trim": true
            }
        },
        "Model18": {
            "type": "object",
            "properties": {
                "resource": {
                    "type": "string",
                    "description": "Resource name (e.g., \"users\", \"medications\")",
                    "minLength": 2,
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "action": {
                    "$ref": "#/definitions/action"
                },
                "description": {
                    "type": "string",
                    "description": "Permission description",
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "resource",
                "action"
            ]
        },
        "permissions": {
            "type": "array",
            "description": "Array of permission UUIDs to assign to this role",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "Model19": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Role name",
                    "minLength": 2,
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Role description",
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                },
                "permissions": {
                    "$ref": "#/definitions/permissions"
                }
            },
            "required": [
                "name"
            ]
        },
        "Model20": {
            "type": "string",
            "description": "Security incident type",
            "enum": [
                "UNAUTHORIZED_ACCESS",
                "FAILED_LOGIN",
                "BRUTE_FORCE",
                "IP_BLOCKED",
                "SUSPICIOUS_ACTIVITY",
                "DATA_BREACH",
                "MALWARE",
                "PHISHING",
                "OTHER"
            ]
        },
        "Model21": {
            "type": "string",
            "description": "Security incident severity",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
            ]
        },
        "metadata": {
            "type": "object",
            "description": "Additional incident metadata"
        },
        "Model22": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/Model20"
                },
                "severity": {
                    "$ref": "#/definitions/Model21"
                },
                "description": {
                    "type": "string",
                    "description": "Incident description",
                    "minLength": 10,
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address associated with incident",
                    "x-format": {
                        "ip": {
                            "cidr": "optional",
                            "version": [
                                "ipv4",
                                "ipv6"
                            ]
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "description": "User ID associated with incident",
                    "x-format": {
                        "guid": true
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/metadata"
                }
            },
            "required": [
                "type",
                "severity",
                "description"
            ]
        },
        "Model23": {
            "type": "string",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "baseData": {
            "type": "object",
            "description": "Base appointment data to be repeated",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "nurseId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "type": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "duration": {
                    "type": "integer",
                    "minimum": 15,
                    "maximum": 120
                },
                "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model23"
                }
            },
            "required": [
                "studentId",
                "nurseId",
                "type",
                "startTime"
            ]
        },
        "frequency": {
            "type": "string",
            "description": "Recurrence frequency",
            "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY"
            ]
        },
        "daysOfWeek": {
            "type": "array",
            "description": "Days of week for WEEKLY pattern (0=Sunday, 6=Saturday)",
            "items": {
                "type": "integer",
                "minimum": 0,
                "maximum": 6
            }
        },
        "recurrencePattern": {
            "type": "object",
            "description": "Recurrence pattern configuration",
            "properties": {
                "frequency": {
                    "$ref": "#/definitions/frequency"
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval between occurrences (e.g., every 2 weeks)",
                    "minimum": 1,
                    "maximum": 12
                },
                "daysOfWeek": {
                    "$ref": "#/definitions/daysOfWeek"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date for recurrence"
                },
                "occurrences": {
                    "type": "integer",
                    "description": "Maximum number of occurrences",
                    "minimum": 1,
                    "maximum": 52
                }
            },
            "required": [
                "frequency"
            ]
        },
        "Model24": {
            "type": "object",
            "properties": {
                "baseData": {
                    "$ref": "#/definitions/baseData"
                },
                "recurrencePattern": {
                    "$ref": "#/definitions/recurrencePattern"
                }
            },
            "required": [
                "baseData",
                "recurrencePattern"
            ]
        },
        "Model25": {
            "type": "string",
            "description": "Waitlist priority",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "preferredDates": {
            "type": "array",
            "description": "Preferred appointment dates",
            "items": {
                "type": "string",
                "format": "date-time"
            }
        },
        "Model26": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "description": "Student UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "nurseId": {
                    "type": "string",
                    "description": "Preferred nurse UUID (optional)",
                    "x-format": {
                        "guid": true
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Appointment type needed",
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model25"
                },
                "preferredDates": {
                    "$ref": "#/definitions/preferredDates"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes or requirements",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "studentId",
                "type"
            ]
        },
        "Model27": {
            "type": "string",
            "description": "Action type",
            "enum": [
                "CREATE",
                "READ",
                "VIEW",
                "ACCESS",
                "UPDATE",
                "DELETE",
                "LOGIN",
                "LOGOUT",
                "EXPORT",
                "IMPORT",
                "BACKUP",
                "RESTORE",
                "SECURITY_EVENT"
            ]
        },
        "changes": {
            "type": "object",
            "description": "Details of changes or action metadata"
        },
        "Model28": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "User ID (null for system actions)",
                    "x-format": {
                        "guid": true
                    }
                },
                "action": {
                    "$ref": "#/definitions/Model27"
                },
                "entityType": {
                    "type": "string",
                    "description": "Entity type being acted upon",
                    "x-convert": {
                        "trim": true
                    }
                },
                "entityId": {
                    "type": "string",
                    "description": "Entity ID if applicable",
                    "x-convert": {
                        "trim": true
                    }
                },
                "changes": {
                    "$ref": "#/definitions/changes"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address of request",
                    "x-format": {
                        "ip": {
                            "cidr": "optional"
                        }
                    }
                },
                "userAgent": {
                    "type": "string",
                    "description": "Browser user agent",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "action",
                "entityType"
            ]
        },
        "accessType": {
            "type": "string",
            "description": "Type of access",
            "enum": [
                "VIEW",
                "EDIT",
                "EXPORT",
                "PRINT",
                "DELETE"
            ]
        },
        "dataCategory": {
            "type": "string",
            "description": "Category of PHI data",
            "enum": [
                "HEALTH_RECORD",
                "MEDICATION",
                "ALLERGY",
                "CHRONIC_CONDITION",
                "VACCINATION",
                "MENTAL_HEALTH",
                "EMERGENCY_CONTACT",
                "FULL_PROFILE"
            ]
        },
        "Model29": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "User accessing PHI",
                    "x-format": {
                        "guid": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "description": "Student whose PHI is being accessed",
                    "x-format": {
                        "guid": true
                    }
                },
                "accessType": {
                    "$ref": "#/definitions/accessType"
                },
                "dataCategory": {
                    "$ref": "#/definitions/dataCategory"
                },
                "entityType": {
                    "type": "string",
                    "description": "Specific entity type",
                    "x-convert": {
                        "trim": true
                    }
                },
                "entityId": {
                    "type": "string",
                    "description": "Specific entity ID",
                    "x-convert": {
                        "trim": true
                    }
                },
                "success": {
                    "type": "boolean",
                    "description": "Whether access was successful",
                    "default": true
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error message if access failed",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "userId",
                "studentId",
                "accessType",
                "dataCategory",
                "entityType"
            ]
        },
        "Model30": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email address",
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "case": "lower",
                        "trim": true
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password"
                }
            },
            "required": [
                "email",
                "password"
            ]
        },
        "Model31": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email address",
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "case": "lower",
                        "trim": true
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password (minimum 8 characters)",
                    "minLength": 8
                },
                "firstName": {
                    "type": "string",
                    "description": "First name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "role": {
                    "$ref": "#/definitions/role"
                }
            },
            "required": [
                "email",
                "password",
                "firstName",
                "lastName",
                "role"
            ]
        },
        "Model32": {
            "type": "string",
            "enum": [
                "K",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12"
            ]
        },
        "grades": {
            "type": "array",
            "description": "Filter by grade levels",
            "items": {
                "$ref": "#/definitions/Model32"
            }
        },
        "nurseIds": {
            "type": "array",
            "description": "Filter by assigned nurse IDs",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "studentIds": {
            "type": "array",
            "description": "Specific student IDs (max 1000)",
            "maxItems": 1000,
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "schoolIds": {
            "type": "array",
            "description": "Filter by school IDs",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "audience": {
            "type": "object",
            "description": "Audience targeting criteria",
            "properties": {
                "grades": {
                    "$ref": "#/definitions/grades"
                },
                "nurseIds": {
                    "$ref": "#/definitions/nurseIds"
                },
                "studentIds": {
                    "$ref": "#/definitions/studentIds"
                },
                "includeEmergencyContacts": {
                    "type": "boolean",
                    "description": "Include students emergency contacts",
                    "default": false
                },
                "includeParents": {
                    "type": "boolean",
                    "description": "Include student parents/guardians",
                    "default": false
                },
                "schoolIds": {
                    "$ref": "#/definitions/schoolIds"
                }
            }
        },
        "Model33": {
            "type": "string",
            "enum": [
                "EMAIL",
                "SMS",
                "PUSH_NOTIFICATION",
                "VOICE"
            ]
        },
        "channels": {
            "type": "array",
            "description": "Communication channels to use",
            "minItems": 1,
            "x-constraint": {
                "unique": true
            },
            "items": {
                "$ref": "#/definitions/Model33"
            }
        },
        "Model34": {
            "type": "string",
            "description": "Message priority level",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model35": {
            "type": "string",
            "description": "Message category",
            "enum": [
                "EMERGENCY",
                "HEALTH_UPDATE",
                "APPOINTMENT_REMINDER",
                "MEDICATION_REMINDER",
                "GENERAL",
                "INCIDENT_NOTIFICATION",
                "COMPLIANCE"
            ]
        },
        "Model36": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "x-format": {
                        "uri": true
                    }
                },
                "mimeType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "maximum": 10485760,
                    "x-constraint": {
                        "sign": "positive"
                    }
                }
            },
            "required": [
                "filename",
                "url",
                "mimeType",
                "size"
            ]
        },
        "Model37": {
            "type": "array",
            "description": "Message attachments (max 5, 10MB each)",
            "maxItems": 5,
            "items": {
                "$ref": "#/definitions/Model36"
            }
        },
        "Model38": {
            "type": "object",
            "properties": {
                "audience": {
                    "$ref": "#/definitions/audience"
                },
                "channels": {
                    "$ref": "#/definitions/channels"
                },
                "subject": {
                    "type": "string",
                    "description": "Broadcast subject (required for EMAIL channel)",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Broadcast message content",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model34"
                },
                "category": {
                    "$ref": "#/definitions/Model35"
                },
                "templateId": {
                    "type": "string",
                    "description": "Optional template ID to use",
                    "x-format": {
                        "guid": true
                    }
                },
                "scheduledAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Schedule broadcast for future delivery"
                },
                "attachments": {
                    "$ref": "#/definitions/Model37"
                }
            },
            "required": [
                "audience",
                "channels",
                "content",
                "priority",
                "category"
            ]
        },
        "Model39": {
            "type": "string",
            "enum": [
                "STUDENT",
                "EMERGENCY_CONTACT",
                "PARENT",
                "NURSE",
                "ADMIN"
            ]
        },
        "Model40": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/Model39"
                },
                "id": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "pattern": "^\\+?[1-9]\\d{1,14}$"
                },
                "pushToken": {
                    "type": "string"
                }
            },
            "required": [
                "type",
                "id"
            ]
        },
        "recipients": {
            "type": "array",
            "description": "Array of message recipients (max 100 for direct messages)",
            "minItems": 1,
            "maxItems": 100,
            "items": {
                "$ref": "#/definitions/Model40"
            }
        },
        "Model41": {
            "type": "string",
            "enum": [
                "EMAIL",
                "SMS",
                "PUSH_NOTIFICATION",
                "VOICE"
            ]
        },
        "Model42": {
            "type": "array",
            "description": "Communication channels to use",
            "minItems": 1,
            "x-constraint": {
                "unique": true
            },
            "items": {
                "$ref": "#/definitions/Model41"
            }
        },
        "Model43": {
            "type": "string",
            "description": "Message priority level",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model44": {
            "type": "string",
            "description": "Message category",
            "enum": [
                "EMERGENCY",
                "HEALTH_UPDATE",
                "APPOINTMENT_REMINDER",
                "MEDICATION_REMINDER",
                "GENERAL",
                "INCIDENT_NOTIFICATION",
                "COMPLIANCE"
            ]
        },
        "Model45": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "x-format": {
                        "uri": true
                    }
                },
                "mimeType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "maximum": 10485760,
                    "x-constraint": {
                        "sign": "positive"
                    }
                }
            },
            "required": [
                "filename",
                "url",
                "mimeType",
                "size"
            ]
        },
        "Model46": {
            "type": "array",
            "description": "Message attachments (max 5, 10MB each)",
            "maxItems": 5,
            "items": {
                "$ref": "#/definitions/Model45"
            }
        },
        "Model47": {
            "type": "object",
            "properties": {
                "recipients": {
                    "$ref": "#/definitions/recipients"
                },
                "channels": {
                    "$ref": "#/definitions/Model42"
                },
                "subject": {
                    "type": "string",
                    "description": "Message subject (required for EMAIL channel)",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Message content",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model43"
                },
                "category": {
                    "$ref": "#/definitions/Model44"
                },
                "templateId": {
                    "type": "string",
                    "description": "Optional template ID to use",
                    "x-format": {
                        "guid": true
                    }
                },
                "scheduledAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Schedule message for future delivery"
                },
                "attachments": {
                    "$ref": "#/definitions/Model46"
                }
            },
            "required": [
                "recipients",
                "channels",
                "content",
                "priority",
                "category"
            ]
        },
        "recipientType": {
            "type": "string",
            "description": "Type of recipients",
            "enum": [
                "ALL_PARENTS",
                "SPECIFIC_USERS",
                "STUDENT_PARENTS",
                "GRADE_LEVEL",
                "CUSTOM_GROUP"
            ]
        },
        "recipientIds": {
            "type": "array",
            "description": "Specific recipient IDs (required for SPECIFIC_USERS type)",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "Model48": {
            "type": "array",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "gradeLevel": {
            "type": "string",
            "enum": [
                "K",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12"
            ]
        },
        "Model49": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "recipientFilter": {
            "type": "object",
            "description": "Advanced recipient filtering",
            "properties": {
                "studentIds": {
                    "$ref": "#/definitions/Model48"
                },
                "gradeLevel": {
                    "$ref": "#/definitions/gradeLevel"
                },
                "schoolId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "tags": {
                    "$ref": "#/definitions/Model49"
                }
            }
        },
        "Model50": {
            "type": "string",
            "enum": [
                "EMAIL",
                "SMS",
                "PUSH",
                "PORTAL"
            ]
        },
        "Model51": {
            "type": "array",
            "description": "Delivery channels",
            "minItems": 1,
            "x-constraint": {
                "unique": true
            },
            "items": {
                "$ref": "#/definitions/Model50"
            }
        },
        "Model52": {
            "type": "string",
            "description": "Message priority",
            "default": "NORMAL",
            "enum": [
                "LOW",
                "NORMAL",
                "HIGH"
            ]
        },
        "templateVariables": {
            "type": "object",
            "description": "Variables for template substitution"
        },
        "throttle": {
            "type": "object",
            "description": "Rate limiting configuration",
            "properties": {
                "maxPerMinute": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000
                },
                "maxPerHour": {
                    "type": "integer",
                    "default": 1000,
                    "minimum": 1,
                    "maximum": 10000
                }
            }
        },
        "Model53": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "description": "Scheduled message subject",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "body": {
                    "type": "string",
                    "description": "Scheduled message body",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "recipientType": {
                    "$ref": "#/definitions/recipientType"
                },
                "recipientIds": {
                    "$ref": "#/definitions/recipientIds"
                },
                "recipientFilter": {
                    "$ref": "#/definitions/recipientFilter"
                },
                "channels": {
                    "$ref": "#/definitions/Model51"
                },
                "scheduledFor": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When to send the message"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for scheduled time",
                    "default": "America/New_York"
                },
                "priority": {
                    "$ref": "#/definitions/Model52"
                },
                "templateId": {
                    "type": "string",
                    "description": "Template ID to use",
                    "x-format": {
                        "guid": true
                    }
                },
                "templateVariables": {
                    "$ref": "#/definitions/templateVariables"
                },
                "throttle": {
                    "$ref": "#/definitions/throttle"
                },
                "schoolId": {
                    "type": "string",
                    "description": "School ID for multi-tenant support",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "subject",
                "body",
                "recipientType",
                "recipientIds",
                "channels",
                "scheduledFor"
            ]
        },
        "Model54": {
            "type": "string",
            "description": "Primary message type for this template",
            "enum": [
                "EMAIL",
                "SMS",
                "PUSH_NOTIFICATION",
                "VOICE"
            ]
        },
        "Model55": {
            "type": "string",
            "description": "Template category",
            "enum": [
                "EMERGENCY",
                "HEALTH_UPDATE",
                "APPOINTMENT_REMINDER",
                "MEDICATION_REMINDER",
                "GENERAL",
                "INCIDENT_NOTIFICATION",
                "COMPLIANCE"
            ]
        },
        "variables": {
            "type": "array",
            "description": "List of variable names used in the template",
            "items": {
                "type": "string"
            }
        },
        "Model56": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Template name",
                    "minLength": 3,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "Template subject (for EMAIL templates)",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Template content with variables like {{studentName}}",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model54"
                },
                "category": {
                    "$ref": "#/definitions/Model55"
                },
                "variables": {
                    "$ref": "#/definitions/variables"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether template is active",
                    "default": true
                }
            },
            "required": [
                "name",
                "content",
                "type",
                "category"
            ]
        },
        "Model57": {
            "type": "object",
            "properties": {
                "requirement": {
                    "type": "string",
                    "description": "Compliance requirement description",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of requirement",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "category": {
                    "type": "string",
                    "description": "Requirement category (e.g., HIPAA_PRIVACY, HIPAA_SECURITY, FERPA)",
                    "x-convert": {
                        "trim": true
                    }
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Requirement due date"
                },
                "reportId": {
                    "type": "string",
                    "description": "Associated compliance report ID",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "requirement",
                "category"
            ]
        },
        "relationship": {
            "type": "string",
            "description": "Relationship to student",
            "enum": [
                "Mother",
                "Father",
                "Parent",
                "Legal Guardian",
                "Foster Parent",
                "Grandparent",
                "Stepparent",
                "Other Authorized Adult"
            ]
        },
        "Model58": {
            "type": "object",
            "properties": {
                "consentFormId": {
                    "type": "string",
                    "description": "Consent form to sign",
                    "x-format": {
                        "guid": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "description": "Student for whom consent is given",
                    "x-format": {
                        "guid": true
                    }
                },
                "signedBy": {
                    "type": "string",
                    "description": "Name of person signing consent",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "relationship": {
                    "$ref": "#/definitions/relationship"
                },
                "signatureData": {
                    "type": "string",
                    "description": "Digital signature data (base64 encoded image)",
                    "maxLength": 100000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "consentFormId",
                "studentId",
                "signedBy",
                "relationship"
            ]
        },
        "Model59": {
            "type": "string",
            "description": "Policy category",
            "enum": [
                "HIPAA_PRIVACY",
                "HIPAA_SECURITY",
                "FERPA",
                "DATA_RETENTION",
                "INCIDENT_RESPONSE",
                "ACCESS_CONTROL",
                "TRAINING",
                "GENERAL"
            ]
        },
        "Model60": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Policy title",
                    "minLength": 5,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "category": {
                    "$ref": "#/definitions/Model59"
                },
                "content": {
                    "type": "string",
                    "description": "Full policy content (minimum 100 characters)",
                    "minLength": 100,
                    "maxLength": 100000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version number (e.g., 1.0, 2.1.3)",
                    "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "effectiveDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Policy effective date"
                },
                "reviewDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Next policy review date"
                }
            },
            "required": [
                "title",
                "category",
                "content",
                "effectiveDate"
            ]
        },
        "reportType": {
            "type": "string",
            "description": "Type of compliance report",
            "enum": [
                "HIPAA",
                "FERPA",
                "PRIVACY",
                "SECURITY",
                "BREACH",
                "RISK_ASSESSMENT",
                "TRAINING",
                "AUDIT",
                "GENERAL"
            ]
        },
        "period": {
            "type": "string",
            "description": "Reporting period",
            "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "ANNUAL"
            ]
        },
        "Model61": {
            "type": "object",
            "properties": {
                "reportType": {
                    "$ref": "#/definitions/reportType"
                },
                "title": {
                    "type": "string",
                    "description": "Report title",
                    "minLength": 5,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Report description",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "period": {
                    "$ref": "#/definitions/period"
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Report due date"
                }
            },
            "required": [
                "reportType",
                "title",
                "period"
            ]
        },
        "screeningType": {
            "type": "string",
            "enum": [
                "vision",
                "hearing",
                "scoliosis",
                "dental",
                "bmi",
                "blood-pressure",
                "general-physical",
                "developmental"
            ]
        },
        "measurements": {
            "type": "object"
        },
        "abnormalFindings": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "results": {
            "type": "object",
            "properties": {
                "passed": {
                    "type": "boolean"
                },
                "measurements": {
                    "$ref": "#/definitions/measurements"
                },
                "observations": {
                    "type": "string",
                    "maxLength": 1000
                },
                "abnormalFindings": {
                    "$ref": "#/definitions/abnormalFindings"
                },
                "referralNeeded": {
                    "type": "boolean",
                    "default": false
                }
            },
            "required": [
                "passed"
            ]
        },
        "recommendations": {
            "type": "array",
            "items": {
                "type": "string",
                "maxLength": 200
            }
        },
        "urgency": {
            "type": "string",
            "default": "low",
            "enum": [
                "low",
                "medium",
                "high"
            ]
        },
        "Model62": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "screeningType": {
                    "$ref": "#/definitions/screeningType"
                },
                "results": {
                    "$ref": "#/definitions/results"
                },
                "recommendations": {
                    "$ref": "#/definitions/recommendations"
                },
                "followUpRequired": {
                    "type": "boolean",
                    "default": false
                },
                "followUpDate": {
                    "type": "string",
                    "format": "date"
                },
                "screeningDate": {
                    "type": "string",
                    "format": "date",
                    "description": "current date",
                    "default": "2025-10-23T22:46:22.166Z"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000
                },
                "parentNotificationRequired": {
                    "type": "boolean",
                    "default": false
                },
                "urgency": {
                    "$ref": "#/definitions/urgency"
                }
            },
            "required": [
                "studentId",
                "screeningType",
                "results",
                "followUpDate"
            ]
        },
        "Model63": {
            "type": "string",
            "enum": [
                "MILD",
                "MODERATE",
                "SEVERE",
                "LIFE_THREATENING"
            ]
        },
        "Model64": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "allergen": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "severity": {
                    "$ref": "#/definitions/Model63"
                },
                "reaction": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "treatment": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "verified": {
                    "type": "boolean"
                },
                "verifiedBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "studentId",
                "allergen",
                "severity"
            ]
        },
        "Model65": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "CONTROLLED",
                "IN_REMISSION",
                "CURED"
            ]
        },
        "Model66": {
            "type": "string",
            "enum": [
                "MILD",
                "MODERATE",
                "SEVERE",
                "CRITICAL"
            ]
        },
        "medications": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "restrictions": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "triggers": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "Model67": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "condition": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "diagnosisDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "$ref": "#/definitions/Model65"
                },
                "severity": {
                    "$ref": "#/definitions/Model66"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "carePlan": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "medications": {
                    "$ref": "#/definitions/medications"
                },
                "restrictions": {
                    "$ref": "#/definitions/restrictions"
                },
                "triggers": {
                    "$ref": "#/definitions/triggers"
                },
                "diagnosedBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastReviewDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "nextReviewDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "icdCode": {
                    "type": "string",
                    "pattern": "^[A-Z]\\d{2}",
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "studentId",
                "condition",
                "diagnosisDate"
            ]
        },
        "site": {
            "type": "string",
            "enum": [
                "LEFT_ARM",
                "RIGHT_ARM",
                "LEFT_THIGH",
                "RIGHT_THIGH",
                "ORAL",
                "NASAL"
            ]
        },
        "route": {
            "type": "string",
            "enum": [
                "IM",
                "SC",
                "ID",
                "ORAL",
                "NASAL",
                "IV"
            ]
        },
        "Model68": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "vaccineName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "administrationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "administeredBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "cvxCode": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "ndcCode": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "lotNumber": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "manufacturer": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "doseNumber": {
                    "type": "integer",
                    "minimum": 1
                },
                "totalDoses": {
                    "type": "integer",
                    "minimum": 1
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "nextDueDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "site": {
                    "$ref": "#/definitions/site"
                },
                "route": {
                    "$ref": "#/definitions/route"
                },
                "dosageAmount": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "reactions": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "studentId",
                "vaccineName",
                "administrationDate",
                "administeredBy"
            ]
        },
        "vitals": {
            "type": "object",
            "properties": {
                "temperature": {
                    "type": "number",
                    "minimum": 90,
                    "maximum": 115
                },
                "bloodPressureSystolic": {
                    "type": "number",
                    "minimum": 50,
                    "maximum": 250
                },
                "bloodPressureDiastolic": {
                    "type": "number",
                    "minimum": 30,
                    "maximum": 150
                },
                "heartRate": {
                    "type": "number",
                    "minimum": 30,
                    "maximum": 250
                },
                "respiratoryRate": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 60
                },
                "oxygenSaturation": {
                    "type": "number",
                    "minimum": 70,
                    "maximum": 100
                },
                "height": {
                    "type": "number",
                    "minimum": 30,
                    "maximum": 250
                },
                "weight": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 500
                },
                "bmi": {
                    "type": "number",
                    "minimum": 10,
                    "maximum": 80
                }
            }
        },
        "Model69": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "recordedBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "vitals": {
                    "$ref": "#/definitions/vitals"
                }
            },
            "required": [
                "studentId",
                "recordedBy",
                "vitals"
            ]
        },
        "Model70": {
            "type": "string",
            "description": "Item category (MEDICATION, MEDICAL_SUPPLY, EQUIPMENT, etc.)",
            "enum": [
                "MEDICATION",
                "MEDICAL_SUPPLY",
                "EQUIPMENT",
                "FIRST_AID",
                "OFFICE_SUPPLY",
                "PPE",
                "OTHER"
            ]
        },
        "Model71": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Item name (1-200 characters)",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "category": {
                    "$ref": "#/definitions/Model70"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed item description (max 1000 characters)",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "sku": {
                    "type": "string",
                    "description": "Stock Keeping Unit / Product Code",
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "supplier": {
                    "type": "string",
                    "description": "Primary supplier/vendor name",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "unitCost": {
                    "type": "number",
                    "description": "Cost per unit in dollars (max $999,999.99)",
                    "minimum": 0,
                    "maximum": 999999.99,
                    "x-constraint": {
                        "precision": 2
                    }
                },
                "reorderLevel": {
                    "type": "integer",
                    "description": "Stock level that triggers reorder alert",
                    "minimum": 0,
                    "maximum": 1000000
                },
                "reorderQuantity": {
                    "type": "integer",
                    "description": "Quantity to order when reorder level is reached",
                    "minimum": 1,
                    "maximum": 1000000
                },
                "location": {
                    "type": "string",
                    "description": "Storage location (e.g., \"Nurse Office - Cabinet A\")",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes or special handling instructions",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "name",
                "category",
                "reorderLevel",
                "reorderQuantity"
            ]
        },
        "Model72": {
            "type": "object",
            "properties": {
                "inventoryItemId": {
                    "type": "string",
                    "description": "Inventory item UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "quantity": {
                    "type": "integer",
                    "description": "Quantity to order",
                    "minimum": 1,
                    "maximum": 1000000
                },
                "unitCost": {
                    "type": "number",
                    "description": "Cost per unit for this order",
                    "minimum": 0,
                    "maximum": 999999.99,
                    "x-constraint": {
                        "precision": 2
                    }
                }
            },
            "required": [
                "inventoryItemId",
                "quantity",
                "unitCost"
            ]
        },
        "items": {
            "type": "array",
            "description": "Array of items to order (1-100 items)",
            "minItems": 1,
            "maxItems": 100,
            "items": {
                "$ref": "#/definitions/Model72"
            }
        },
        "Model73": {
            "type": "object",
            "properties": {
                "orderNumber": {
                    "type": "string",
                    "description": "Unique purchase order number (e.g., PO-2024-001)",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "vendorId": {
                    "type": "string",
                    "description": "Vendor/supplier UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "orderDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Order date (ISO 8601 format)"
                },
                "expectedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expected delivery date (ISO 8601 format)"
                },
                "notes": {
                    "type": "string",
                    "description": "Order notes or special instructions",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "items": {
                    "$ref": "#/definitions/items"
                }
            },
            "required": [
                "orderNumber",
                "vendorId",
                "orderDate",
                "items"
            ]
        },
        "Model74": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Vendor/supplier name (1-200 characters)",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "contactName": {
                    "type": "string",
                    "description": "Primary contact person name",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "email": {
                    "type": "string",
                    "description": "Contact email address",
                    "maxLength": 200,
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "trim": true
                    }
                },
                "phone": {
                    "type": "string",
                    "description": "Contact phone number",
                    "maxLength": 50,
                    "pattern": "^[\\d\\s\\-\\(\\)\\+\\.ext]+$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "address": {
                    "type": "string",
                    "description": "Business address",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "website": {
                    "type": "string",
                    "description": "Company website URL",
                    "maxLength": 200,
                    "x-format": {
                        "uri": true
                    },
                    "x-convert": {
                        "trim": true
                    }
                },
                "taxId": {
                    "type": "string",
                    "description": "Tax ID / EIN",
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "paymentTerms": {
                    "type": "string",
                    "description": "Payment terms (e.g., \"Net 30\", \"Due on receipt\")",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Supplier notes",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "rating": {
                    "type": "number",
                    "description": "Supplier rating (1-5 stars)",
                    "minimum": 1,
                    "maximum": 5
                }
            },
            "required": [
                "name"
            ]
        },
        "Model75": {
            "type": "object",
            "properties": {
                "studentMedicationId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "dosageGiven": {
                    "type": "string",
                    "pattern": "^[0-9]+(\\.[0-9]+)?\\s*(mg|g|mcg|ml|L|units?|tablets?|capsules?|drops?|puff|patch|spray|application|mEq|%)$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "timeGiven": {
                    "type": "string",
                    "format": "date-time"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "sideEffects": {
                    "type": "string",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "deviceId": {
                    "type": "string",
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "witnessId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "witnessName": {
                    "type": "string",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "patientVerified": {
                    "type": "boolean",
                    "default": true
                },
                "allergyChecked": {
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "studentMedicationId",
                "dosageGiven",
                "timeGiven"
            ]
        },
        "Model76": {
            "type": "string",
            "enum": [
                "MILD",
                "MODERATE",
                "SEVERE",
                "LIFE_THREATENING"
            ]
        },
        "Model77": {
            "type": "object",
            "properties": {
                "studentMedicationId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "severity": {
                    "$ref": "#/definitions/Model76"
                },
                "reaction": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "actionTaken": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "reportedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "emergencyServicesContacted": {
                    "type": "string"
                },
                "parentNotified": {
                    "type": "string"
                }
            },
            "required": [
                "studentMedicationId",
                "severity",
                "reaction",
                "actionTaken",
                "reportedAt",
                "emergencyServicesContacted",
                "parentNotified"
            ]
        },
        "Model78": {
            "type": "string",
            "enum": [
                "Oral",
                "Sublingual",
                "Topical",
                "Intravenous",
                "Intramuscular",
                "Subcutaneous",
                "Inhalation",
                "Ophthalmic",
                "Otic",
                "Nasal",
                "Rectal",
                "Transdermal"
            ],
            "x-convert": {
                "trim": true
            }
        },
        "Model79": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "medicationId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "dosage": {
                    "type": "string",
                    "pattern": "^[0-9]+(\\.[0-9]+)?\\s*(mg|g|mcg|ml|L|units?|tablets?|capsules?|drops?|puff|patch|spray|application|mEq|%)$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "frequency": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "route": {
                    "$ref": "#/definitions/Model78"
                },
                "instructions": {
                    "type": "string",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "prescribedBy": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "prescriptionNumber": {
                    "type": "string",
                    "pattern": "^[A-Z0-9]{6,20}$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "refillsRemaining": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "maximum": 12
                }
            },
            "required": [
                "studentId",
                "medicationId",
                "dosage",
                "frequency",
                "route",
                "startDate",
                "prescribedBy"
            ]
        },
        "Model80": {
            "type": "object",
            "properties": {
                "medicationId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "batchNumber": {
                    "type": "string",
                    "pattern": "^[A-Z0-9-]{3,50}$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100000
                },
                "reorderLevel": {
                    "type": "integer",
                    "default": 10,
                    "minimum": 0,
                    "maximum": 10000
                },
                "costPerUnit": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100000,
                    "x-constraint": {
                        "precision": 4
                    }
                },
                "supplier": {
                    "type": "string",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "location": {
                    "type": "string",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "medicationId",
                "batchNumber",
                "expirationDate",
                "quantity"
            ]
        },
        "appointmentType": {
            "type": "string",
            "enum": [
                "health-screening",
                "nurse-visit",
                "counselor-meeting",
                "principal-meeting",
                "parent-conference",
                "special-education",
                "speech-therapy",
                "occupational-therapy",
                "physical-therapy",
                "psychological-evaluation"
            ]
        },
        "Model81": {
            "type": "string",
            "default": "medium",
            "enum": [
                "low",
                "medium",
                "high",
                "urgent"
            ]
        },
        "dayOfWeek": {
            "type": "string",
            "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday"
            ]
        },
        "Model82": {
            "type": "object",
            "properties": {
                "dayOfWeek": {
                    "$ref": "#/definitions/dayOfWeek"
                },
                "startTime": {
                    "type": "string",
                    "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                },
                "endTime": {
                    "type": "string",
                    "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                }
            },
            "required": [
                "dayOfWeek",
                "startTime",
                "endTime"
            ]
        },
        "preferredTimeSlots": {
            "type": "array",
            "maxItems": 10,
            "items": {
                "$ref": "#/definitions/Model82"
            }
        },
        "parentNotificationPreference": {
            "type": "string",
            "default": "email",
            "enum": [
                "email",
                "phone",
                "text",
                "app-notification"
            ]
        },
        "Model83": {
            "type": "string",
            "enum": [
                "wheelchair-accessible",
                "interpreter-needed",
                "quiet-environment",
                "extended-time",
                "parent-present"
            ]
        },
        "specialAccommodations": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Model83"
            }
        },
        "Model84": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "appointmentType": {
                    "$ref": "#/definitions/appointmentType"
                },
                "priority": {
                    "$ref": "#/definitions/Model81"
                },
                "preferredTimeSlots": {
                    "$ref": "#/definitions/preferredTimeSlots"
                },
                "requestedBy": {
                    "type": "string",
                    "description": "ID of person making the waitlist request",
                    "x-format": {
                        "guid": true
                    }
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for appointment request",
                    "maxLength": 500
                },
                "urgencyNotes": {
                    "type": "string",
                    "maxLength": 200
                },
                "parentNotificationPreference": {
                    "$ref": "#/definitions/parentNotificationPreference"
                },
                "estimatedDuration": {
                    "type": "number",
                    "description": "Estimated appointment duration in minutes",
                    "default": 30,
                    "minimum": 15,
                    "maximum": 180
                },
                "specialAccommodations": {
                    "$ref": "#/definitions/specialAccommodations"
                }
            },
            "required": [
                "studentId",
                "appointmentType",
                "urgencyNotes"
            ]
        },
        "Model85": {
            "type": "array",
            "description": "Optional: transition only specific grades",
            "items": {
                "type": "string"
            }
        },
        "Model86": {
            "type": "object",
            "description": "Grade transition parameters",
            "properties": {
                "effectiveDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when grade transition becomes effective",
                    "default": "2025-10-23T22:38:14.051Z"
                },
                "dryRun": {
                    "type": "boolean",
                    "description": "Preview mode - no changes will be saved",
                    "default": false
                },
                "grades": {
                    "$ref": "#/definitions/Model85"
                }
            }
        },
        "Model87": {
            "type": "string",
            "description": "Integration type",
            "enum": [
                "SIS",
                "EMAIL",
                "SMS",
                "STORAGE",
                "AUTHENTICATION",
                "EHR",
                "PHARMACY",
                "LABORATORY",
                "INSURANCE",
                "PARENT_PORTAL",
                "HEALTH_APP",
                "GOVERNMENT_REPORTING"
            ]
        },
        "settings": {
            "type": "object",
            "description": "Integration-specific configuration settings",
            "example": {
                "apiVersion": "2.0",
                "timeout": 30000,
                "retryAttempts": 3
            }
        },
        "Model88": {
            "type": "object",
            "description": "Integration configuration data",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Integration name",
                    "example": "PowerSchool SIS Integration",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model87"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Integration API endpoint URL",
                    "example": "https://api.powerschool.com/v1",
                    "maxLength": 500,
                    "x-format": {
                        "uri": true
                    }
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key for authentication",
                    "maxLength": 500
                },
                "username": {
                    "type": "string",
                    "description": "Username for authentication",
                    "maxLength": 200
                },
                "password": {
                    "type": "string",
                    "description": "Password for authentication (will be encrypted)",
                    "maxLength": 500
                },
                "clientId": {
                    "type": "string",
                    "description": "OAuth client ID",
                    "maxLength": 200
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth client secret (will be encrypted)",
                    "maxLength": 500
                },
                "settings": {
                    "$ref": "#/definitions/settings"
                },
                "syncFrequency": {
                    "type": "integer",
                    "description": "Sync frequency in minutes (0 for manual only)",
                    "default": 0,
                    "minimum": 0
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the integration is active",
                    "default": false
                }
            },
            "required": [
                "name",
                "type"
            ]
        },
        "Model89": {
            "type": "string",
            "description": "Type of report to generate",
            "enum": [
                "HEALTH_METRICS",
                "INCIDENT_ANALYSIS",
                "MEDICATION_USAGE",
                "APPOINTMENT_SUMMARY",
                "COMPLIANCE_STATUS",
                "STUDENT_HEALTH_SUMMARY",
                "IMMUNIZATION_REPORT",
                "CUSTOM"
            ]
        },
        "format": {
            "type": "string",
            "description": "Report output format",
            "default": "JSON",
            "enum": [
                "JSON",
                "PDF",
                "CSV",
                "XLSX"
            ]
        },
        "Model90": {
            "type": "array",
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "filters": {
            "type": "object",
            "description": "Additional report filters and options",
            "properties": {
                "schoolId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "districtId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "gradeLevel": {
                    "type": "string"
                },
                "studentIds": {
                    "$ref": "#/definitions/Model90"
                },
                "includeCharts": {
                    "type": "boolean",
                    "default": true
                },
                "includeTrends": {
                    "type": "boolean",
                    "default": true
                },
                "includeComparisons": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Model91": {
            "type": "array",
            "description": "Email addresses to send report to",
            "items": {
                "type": "string",
                "x-format": {
                    "email": true
                }
            }
        },
        "Model92": {
            "type": "string",
            "enum": [
                "ONCE",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY"
            ]
        },
        "schedule": {
            "type": "object",
            "description": "Schedule for recurring reports",
            "properties": {
                "frequency": {
                    "$ref": "#/definitions/Model92"
                },
                "nextRun": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Model93": {
            "type": "object",
            "properties": {
                "reportName": {
                    "type": "string",
                    "description": "Report name/title",
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                },
                "reportType": {
                    "$ref": "#/definitions/Model89"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Report period start date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Report period end date"
                },
                "format": {
                    "$ref": "#/definitions/format"
                },
                "filters": {
                    "$ref": "#/definitions/filters"
                },
                "recipients": {
                    "$ref": "#/definitions/Model91"
                },
                "schedule": {
                    "$ref": "#/definitions/schedule"
                }
            },
            "required": [
                "reportName",
                "reportType",
                "startDate",
                "endDate"
            ]
        },
        "Model94": {
            "type": "object",
            "properties": {
                "notes": {
                    "type": "string",
                    "description": "Completion notes",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "outcomes": {
                    "type": "string",
                    "description": "Appointment outcomes and results",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "followUpRequired": {
                    "type": "boolean",
                    "description": "Whether a follow-up appointment is needed"
                },
                "followUpDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Suggested follow-up date"
                }
            }
        },
        "Model95": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for cancellation (5-500 characters)",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "reason"
            ]
        },
        "analysisType": {
            "type": "string",
            "description": "Type of security analysis to perform",
            "default": "COMPREHENSIVE",
            "enum": [
                "SUSPICIOUS_LOGINS",
                "UNUSUAL_PHI_ACCESS",
                "AFTER_HOURS_ACCESS",
                "DATA_EXFILTRATION",
                "COMPREHENSIVE"
            ]
        },
        "Model96": {
            "type": "object",
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Analysis start date"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Analysis end date"
                },
                "analysisType": {
                    "$ref": "#/definitions/analysisType"
                }
            },
            "required": [
                "startDate",
                "endDate"
            ]
        },
        "Model97": {
            "type": "string",
            "description": "Consent form type",
            "enum": [
                "HIPAA_AUTHORIZATION",
                "FERPA_RELEASE",
                "PHOTO_RELEASE",
                "MEDICAL_TREATMENT",
                "RESEARCH",
                "EMERGENCY_CONTACT",
                "GENERAL"
            ]
        },
        "Model98": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/Model97"
                },
                "title": {
                    "type": "string",
                    "description": "Consent form title",
                    "minLength": 5,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Consent form description",
                    "minLength": 20,
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Full consent form content (minimum 50 characters for legal validity)",
                    "minLength": 50,
                    "maxLength": 50000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version number (e.g., 1.0, 2.1.3)",
                    "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Consent expiration date"
                }
            },
            "required": [
                "type",
                "title",
                "description",
                "content"
            ]
        },
        "Model99": {
            "type": "string",
            "description": "Type of report to generate",
            "enum": [
                "HIPAA",
                "FERPA",
                "PRIVACY",
                "SECURITY",
                "BREACH",
                "RISK_ASSESSMENT",
                "TRAINING",
                "AUDIT",
                "GENERAL"
            ]
        },
        "Model100": {
            "type": "object",
            "properties": {
                "reportType": {
                    "$ref": "#/definitions/Model99"
                },
                "period": {
                    "$ref": "#/definitions/period"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Custom start date (overrides period)"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Custom end date (overrides period)"
                },
                "includeRecommendations": {
                    "type": "boolean",
                    "description": "Include automated recommendations",
                    "default": true
                }
            },
            "required": [
                "reportType",
                "period"
            ]
        },
        "sharedWith": {
            "type": "array",
            "description": "Array of user IDs to share document with",
            "minItems": 1,
            "maxItems": 50,
            "items": {
                "type": "string",
                "x-format": {
                    "guid": true
                }
            }
        },
        "Model101": {
            "type": "object",
            "properties": {
                "sharedWith": {
                    "$ref": "#/definitions/sharedWith"
                }
            },
            "required": [
                "sharedWith"
            ]
        },
        "Model102": {
            "type": "object",
            "properties": {
                "signatureData": {
                    "type": "string",
                    "description": "Digital signature data (base64 encoded image or cryptographic signature)",
                    "maxLength": 10000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "signedByRole": {
                    "type": "string",
                    "description": "Role/title of the signer (e.g., School Nurse, Parent, Administrator)",
                    "minLength": 2,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "signedByRole"
            ]
        },
        "Model103": {
            "type": "string",
            "description": "Type of notification",
            "enum": [
                "emergency",
                "health",
                "medication",
                "general"
            ]
        },
        "Model104": {
            "type": "string",
            "description": "Notification priority level",
            "enum": [
                "low",
                "medium",
                "high",
                "critical"
            ]
        },
        "Model105": {
            "type": "string",
            "enum": [
                "sms",
                "email",
                "voice"
            ]
        },
        "Model106": {
            "type": "array",
            "description": "Notification channels to use",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/Model105"
            }
        },
        "Model107": {
            "type": "array",
            "description": "File attachment URLs",
            "items": {
                "type": "string"
            }
        },
        "Model108": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Notification message content",
                    "minLength": 10,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "type": {
                    "$ref": "#/definitions/Model103"
                },
                "priority": {
                    "$ref": "#/definitions/Model104"
                },
                "studentId": {
                    "type": "string",
                    "description": "Student UUID",
                    "x-format": {
                        "guid": true
                    }
                },
                "channels": {
                    "$ref": "#/definitions/Model106"
                },
                "attachments": {
                    "$ref": "#/definitions/Model107"
                }
            },
            "required": [
                "message",
                "type",
                "priority",
                "studentId",
                "channels"
            ]
        },
        "method": {
            "type": "string",
            "description": "Verification method",
            "enum": [
                "sms",
                "email",
                "voice"
            ]
        },
        "Model109": {
            "type": "object",
            "properties": {
                "method": {
                    "$ref": "#/definitions/method"
                }
            },
            "required": [
                "method"
            ]
        },
        "emergencyType": {
            "type": "string",
            "enum": [
                "medical-emergency",
                "allergic-reaction",
                "injury-serious",
                "injury-minor",
                "behavioral-crisis",
                "medication-error",
                "seizure",
                "asthma-attack",
                "diabetic-emergency",
                "mental-health-crisis",
                "other"
            ]
        },
        "Model110": {
            "type": "string",
            "enum": [
                "low",
                "medium",
                "high",
                "critical"
            ]
        },
        "immediateActions": {
            "type": "array",
            "description": "Immediate actions taken",
            "minItems": 1,
            "items": {
                "type": "string",
                "maxLength": 200
            }
        },
        "consciousnessLevel": {
            "type": "string",
            "enum": [
                "alert",
                "drowsy",
                "confused",
                "unconscious"
            ]
        },
        "Model111": {
            "type": "object",
            "properties": {
                "bloodPressure": {
                    "type": "string",
                    "pattern": "^\\d{2,3}\\/\\d{2,3}$"
                },
                "heartRate": {
                    "type": "number",
                    "minimum": 30,
                    "maximum": 200
                },
                "respiratoryRate": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 50
                },
                "temperature": {
                    "type": "number",
                    "minimum": 95,
                    "maximum": 110
                },
                "oxygenSaturation": {
                    "type": "number",
                    "minimum": 70,
                    "maximum": 100
                },
                "consciousnessLevel": {
                    "$ref": "#/definitions/consciousnessLevel"
                }
            }
        },
        "Model112": {
            "type": "string",
            "enum": [
                "parents-guardians",
                "emergency-contacts",
                "medical-staff",
                "administration",
                "district-office",
                "ems",
                "police"
            ]
        },
        "notifyContacts": {
            "type": "array",
            "default": [
                "parents-guardians"
            ],
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/Model112"
            }
        },
        "Model113": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "contactInfo": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "role"
            ]
        },
        "Model114": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Model113"
            }
        },
        "Model115": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "description": "Student ID if emergency involves a specific student",
                    "x-format": {
                        "guid": true
                    }
                },
                "emergencyType": {
                    "$ref": "#/definitions/emergencyType"
                },
                "severity": {
                    "$ref": "#/definitions/Model110"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the emergency situation",
                    "minLength": 10,
                    "maxLength": 1000
                },
                "location": {
                    "type": "string",
                    "description": "Specific location where emergency occurred",
                    "minLength": 3,
                    "maxLength": 200
                },
                "immediateActions": {
                    "$ref": "#/definitions/immediateActions"
                },
                "vitals": {
                    "$ref": "#/definitions/Model111"
                },
                "notifyContacts": {
                    "$ref": "#/definitions/notifyContacts"
                },
                "followUpRequired": {
                    "type": "boolean",
                    "default": true
                },
                "incidentReportNumber": {
                    "type": "string",
                    "description": "Reference to related incident report"
                },
                "witnesses": {
                    "$ref": "#/definitions/Model114"
                }
            },
            "required": [
                "emergencyType",
                "severity",
                "description",
                "location"
            ]
        },
        "measurementMethod": {
            "type": "string",
            "default": "digital-scale",
            "enum": [
                "digital-scale",
                "mechanical-scale",
                "stadiometer",
                "measuring-tape",
                "portable-scale"
            ]
        },
        "Model116": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "description": "Height in centimeters",
                    "minimum": 20,
                    "maximum": 250,
                    "x-constraint": {
                        "precision": 2,
                        "sign": "positive"
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight in kilograms",
                    "minimum": 1,
                    "maximum": 300,
                    "x-constraint": {
                        "precision": 2,
                        "sign": "positive"
                    }
                },
                "bmi": {
                    "type": "number",
                    "description": "BMI - will be calculated if not provided",
                    "minimum": 8,
                    "maximum": 60,
                    "x-constraint": {
                        "precision": 2,
                        "sign": "positive"
                    }
                },
                "headCircumference": {
                    "type": "number",
                    "description": "Head circumference in centimeters (typically for ages 0-3)",
                    "minimum": 25,
                    "maximum": 70,
                    "x-constraint": {
                        "precision": 2,
                        "sign": "positive"
                    }
                },
                "measurementDate": {
                    "type": "string",
                    "format": "date",
                    "description": "current date",
                    "default": "2025-10-23T22:46:22.247Z"
                },
                "measurementMethod": {
                    "$ref": "#/definitions/measurementMethod"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 500
                },
                "witnessed": {
                    "type": "boolean",
                    "default": false
                },
                "witnessId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "height",
                "weight",
                "witnessId"
            ]
        },
        "Model117": {
            "type": "string",
            "description": "Action priority level",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model118": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Follow-up action description",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Action due date"
                },
                "priority": {
                    "$ref": "#/definitions/Model117"
                },
                "assignedTo": {
                    "type": "string",
                    "description": "User ID assigned to action",
                    "x-format": {
                        "guid": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Additional action notes",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "action",
                "dueDate",
                "priority"
            ]
        },
        "evidenceType": {
            "type": "string",
            "description": "Type of evidence",
            "enum": [
                "photo",
                "video",
                "attachment"
            ]
        },
        "evidenceUrls": {
            "type": "array",
            "description": "Evidence file URLs",
            "minItems": 1,
            "maxItems": 20,
            "items": {
                "type": "string",
                "x-format": {
                    "uri": true
                }
            }
        },
        "Model119": {
            "type": "object",
            "properties": {
                "evidenceType": {
                    "$ref": "#/definitions/evidenceType"
                },
                "evidenceUrls": {
                    "$ref": "#/definitions/evidenceUrls"
                },
                "description": {
                    "type": "string",
                    "description": "Evidence description",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "evidenceType",
                "evidenceUrls"
            ]
        },
        "witnessType": {
            "type": "string",
            "description": "Type of witness",
            "enum": [
                "STUDENT",
                "STAFF",
                "PARENT",
                "OTHER"
            ]
        },
        "Model120": {
            "type": "object",
            "properties": {
                "witnessName": {
                    "type": "string",
                    "description": "Witness full name",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "witnessType": {
                    "$ref": "#/definitions/witnessType"
                },
                "witnessContact": {
                    "type": "string",
                    "description": "Witness contact information",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "statement": {
                    "type": "string",
                    "description": "Witness statement",
                    "minLength": 10,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "statementDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When statement was given"
                }
            },
            "required": [
                "witnessName",
                "witnessType",
                "statement"
            ]
        },
        "Model121": {
            "type": "string",
            "description": "Notification method",
            "enum": [
                "EMAIL",
                "SMS",
                "PHONE",
                "IN_PERSON",
                "LETTER"
            ]
        },
        "Model122": {
            "type": "object",
            "properties": {
                "method": {
                    "$ref": "#/definitions/Model121"
                },
                "recipientName": {
                    "type": "string",
                    "description": "Recipient name",
                    "x-convert": {
                        "trim": true
                    }
                },
                "recipientContact": {
                    "type": "string",
                    "description": "Recipient contact",
                    "x-convert": {
                        "trim": true
                    }
                },
                "customMessage": {
                    "type": "string",
                    "description": "Custom notification message",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "method"
            ]
        },
        "Model123": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "integer",
                    "description": "Quantity adjustment (positive = add, negative = remove, cannot be 0)",
                    "minimum": -1000000,
                    "maximum": 1000000
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for stock adjustment (5-500 characters)",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "quantity",
                "reason"
            ]
        },
        "Model124": {
            "type": "object",
            "properties": {
                "countedQuantity": {
                    "type": "integer",
                    "description": "Actual quantity counted during physical inventory",
                    "minimum": 0,
                    "maximum": 1000000
                },
                "notes": {
                    "type": "string",
                    "description": "Stock count notes or observations",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "countedQuantity"
            ]
        },
        "scanType": {
            "type": "string",
            "default": "general",
            "enum": [
                "student",
                "medication",
                "equipment",
                "general"
            ]
        },
        "Model125": {
            "type": "object",
            "properties": {
                "barcodeString": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500
                },
                "scanType": {
                    "$ref": "#/definitions/scanType"
                }
            },
            "required": [
                "barcodeString"
            ]
        },
        "verificationMode": {
            "type": "string",
            "default": "standard",
            "enum": [
                "standard",
                "emergency",
                "override"
            ]
        },
        "Model126": {
            "type": "object",
            "properties": {
                "studentBarcode": {
                    "type": "string",
                    "description": "Student identification barcode",
                    "minLength": 1,
                    "maxLength": 200
                },
                "medicationBarcode": {
                    "type": "string",
                    "description": "Medication package barcode",
                    "minLength": 1,
                    "maxLength": 200
                },
                "nurseBarcode": {
                    "type": "string",
                    "description": "Nurse identification barcode",
                    "minLength": 1,
                    "maxLength": 200
                },
                "administrationTime": {
                    "type": "string",
                    "format": "date",
                    "description": "current time",
                    "default": "2025-10-23T22:46:22.259Z"
                },
                "verificationMode": {
                    "$ref": "#/definitions/verificationMode"
                },
                "witnessBarcode": {
                    "type": "string",
                    "description": "Witness barcode for controlled substances",
                    "minLength": 1,
                    "maxLength": 200
                },
                "notes": {
                    "type": "string",
                    "description": "Additional verification notes",
                    "maxLength": 500
                }
            },
            "required": [
                "studentBarcode",
                "medicationBarcode",
                "nurseBarcode"
            ]
        },
        "requiredCredits": {
            "type": "object",
            "properties": {
                "english": {
                    "type": "number",
                    "default": 4,
                    "minimum": 0
                },
                "math": {
                    "type": "number",
                    "default": 4,
                    "minimum": 0
                },
                "science": {
                    "type": "number",
                    "default": 3,
                    "minimum": 0
                },
                "socialStudies": {
                    "type": "number",
                    "default": 3,
                    "minimum": 0
                },
                "total": {
                    "type": "number",
                    "default": 22,
                    "minimum": 0
                }
            }
        },
        "Model127": {
            "type": "string",
            "enum": [
                "iep-accommodation",
                "ell-support",
                "medical-leave",
                "family-circumstances"
            ]
        },
        "specialConsiderations": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Model127"
            }
        },
        "criteria": {
            "type": "object",
            "properties": {
                "minimumAttendance": {
                    "type": "number",
                    "description": "Minimum attendance percentage required for promotion",
                    "default": 90,
                    "minimum": 0,
                    "maximum": 100
                },
                "minimumGPA": {
                    "type": "number",
                    "description": "Minimum GPA required for promotion",
                    "default": 2,
                    "minimum": 0,
                    "maximum": 4
                },
                "requiredCredits": {
                    "$ref": "#/definitions/requiredCredits"
                },
                "specialConsiderations": {
                    "$ref": "#/definitions/specialConsiderations"
                }
            }
        },
        "emailTemplate": {
            "type": "string",
            "enum": [
                "promotion",
                "retention",
                "graduation"
            ]
        },
        "notifications": {
            "type": "object",
            "default": {},
            "properties": {
                "notifyParents": {
                    "type": "boolean",
                    "default": true
                },
                "notifyStudents": {
                    "type": "boolean",
                    "default": true
                },
                "notifyTeachers": {
                    "type": "boolean",
                    "default": true
                },
                "emailTemplate": {
                    "$ref": "#/definitions/emailTemplate"
                }
            }
        },
        "decision": {
            "type": "string",
            "enum": [
                "promote",
                "retain",
                "graduate"
            ]
        },
        "Model128": {
            "type": "object",
            "properties": {
                "studentId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "decision": {
                    "$ref": "#/definitions/decision"
                },
                "reason": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 500
                },
                "approvedBy": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "studentId",
                "decision",
                "reason",
                "approvedBy"
            ]
        },
        "overrides": {
            "type": "array",
            "description": "Manual overrides for specific students",
            "items": {
                "$ref": "#/definitions/Model128"
            }
        },
        "Model129": {
            "type": "object",
            "properties": {
                "effectiveDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date when grade transitions take effect"
                },
                "dryRun": {
                    "type": "boolean",
                    "description": "Whether to perform actual transitions or just simulation",
                    "default": true
                },
                "criteria": {
                    "$ref": "#/definitions/criteria"
                },
                "notifications": {
                    "$ref": "#/definitions/notifications"
                },
                "overrides": {
                    "$ref": "#/definitions/overrides"
                }
            },
            "required": [
                "effectiveDate"
            ]
        },
        "searchScope": {
            "type": "string",
            "default": "current-school",
            "enum": [
                "current-school",
                "district",
                "all"
            ]
        },
        "Model130": {
            "type": "object",
            "properties": {
                "imageData": {
                    "type": "string",
                    "description": "Base64 encoded image data to search for"
                },
                "threshold": {
                    "type": "number",
                    "description": "Confidence threshold for facial recognition matches",
                    "default": 0.85,
                    "minimum": 0.1,
                    "maximum": 1
                },
                "maxResults": {
                    "type": "number",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 20
                },
                "includeInactive": {
                    "type": "boolean",
                    "description": "Whether to include inactive students in search",
                    "default": false
                },
                "searchScope": {
                    "$ref": "#/definitions/searchScope"
                }
            },
            "required": [
                "imageData"
            ]
        },
        "imageFormat": {
            "type": "string",
            "default": "jpeg",
            "enum": [
                "jpeg",
                "jpg",
                "png",
                "gif"
            ]
        },
        "Model131": {
            "type": "array",
            "maxItems": 10,
            "items": {
                "type": "string",
                "maxLength": 50
            }
        },
        "Model132": {
            "type": "object",
            "properties": {
                "capturedDate": {
                    "type": "string",
                    "format": "date",
                    "description": "current date",
                    "default": "2025-10-23T22:46:22.274Z"
                },
                "capturedBy": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "deviceInfo": {
                    "type": "string",
                    "maxLength": 200
                },
                "location": {
                    "type": "string",
                    "maxLength": 100
                },
                "tags": {
                    "$ref": "#/definitions/Model131"
                }
            }
        },
        "Model133": {
            "type": "object",
            "properties": {
                "viewableByParents": {
                    "type": "boolean",
                    "default": true
                },
                "viewableByStaff": {
                    "type": "boolean",
                    "default": true
                },
                "useForIdentification": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Model134": {
            "type": "object",
            "properties": {
                "imageData": {
                    "type": "string",
                    "description": "Base64 encoded image data"
                },
                "imageFormat": {
                    "$ref": "#/definitions/imageFormat"
                },
                "metadata": {
                    "$ref": "#/definitions/Model132"
                },
                "replaceExisting": {
                    "type": "boolean",
                    "description": "Whether to replace existing photo or create new version",
                    "default": false
                },
                "permissions": {
                    "$ref": "#/definitions/Model133"
                }
            },
            "required": [
                "imageData"
            ]
        },
        "Model135": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deactivating student",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            },
            "required": [
                "reason"
            ]
        },
        "Model136": {
            "type": "object",
            "properties": {
                "nurseId": {
                    "type": "string",
                    "description": "New nurse UUID to assign student to",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "required": [
                "nurseId"
            ]
        },
        "Model137": {
            "type": "object",
            "description": "Student data synchronization parameters",
            "properties": {
                "integrationId": {
                    "type": "string",
                    "description": "Integration configuration ID to use for sync",
                    "x-format": {
                        "guid": true
                    }
                },
                "grade": {
                    "type": "string",
                    "description": "Optional: sync only students in specific grade"
                },
                "fullSync": {
                    "type": "boolean",
                    "description": "Perform full sync (true) or incremental sync (false)",
                    "default": false
                },
                "modifiedSince": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional: sync only records modified since this date"
                }
            },
            "required": [
                "integrationId"
            ]
        },
        "Model138": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string",
                    "description": "New password to set",
                    "minLength": 8
                }
            },
            "required": [
                "newPassword"
            ]
        },
        "Model139": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "type": "string",
                    "description": "Current password"
                },
                "newPassword": {
                    "type": "string",
                    "description": "New password",
                    "minLength": 8
                }
            },
            "required": [
                "currentPassword",
                "newPassword"
            ]
        },
        "Model140": {
            "type": "string",
            "enum": [
                "EMAIL",
                "SMS",
                "PUSH_NOTIFICATION",
                "VOICE"
            ]
        },
        "Model141": {
            "type": "array",
            "description": "Communication channels to use for reply",
            "default": [
                "EMAIL"
            ],
            "minItems": 1,
            "x-constraint": {
                "unique": true
            },
            "items": {
                "$ref": "#/definitions/Model140"
            }
        },
        "Model142": {
            "type": "string",
            "description": "Reply message priority",
            "default": "MEDIUM",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model143": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Reply message content",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "channels": {
                    "$ref": "#/definitions/Model141"
                },
                "priority": {
                    "$ref": "#/definitions/Model142"
                }
            },
            "required": [
                "content"
            ]
        },
        "Model144": {
            "type": "object",
            "description": "Data to populate template fields"
        },
        "Model145": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Title for the new document",
                    "minLength": 3,
                    "maxLength": 300,
                    "x-convert": {
                        "trim": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "description": "Associated student ID",
                    "x-format": {
                        "guid": true
                    }
                },
                "templateData": {
                    "$ref": "#/definitions/Model144"
                }
            },
            "required": [
                "title"
            ]
        },
        "Model146": {
            "type": "object",
            "properties": {
                "medicationName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200
                },
                "dosage": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                }
            },
            "required": [
                "medicationName"
            ]
        },
        "semester": {
            "type": "string",
            "default": "year",
            "enum": [
                "fall",
                "spring",
                "summer",
                "year"
            ]
        },
        "transcriptSource": {
            "type": "string",
            "enum": [
                "previous-school",
                "district-transfer",
                "homeschool",
                "international",
                "manual-entry"
            ]
        },
        "previousSchool": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 200
                },
                "address": {
                    "type": "string",
                    "maxLength": 500
                },
                "phone": {
                    "type": "string",
                    "pattern": "^[\\+]?[1-9][\\d]{0,15}$"
                },
                "principalName": {
                    "type": "string",
                    "maxLength": 100
                }
            },
            "required": [
                "name"
            ]
        },
        "grade": {
            "type": "string",
            "enum": [
                "A+",
                "A",
                "A-",
                "B+",
                "B",
                "B-",
                "C+",
                "C",
                "C-",
                "D+",
                "D",
                "D-",
                "F",
                "P",
                "NP",
                "I",
                "W"
            ]
        },
        "Model147": {
            "type": "string",
            "enum": [
                "fall",
                "spring",
                "summer"
            ]
        },
        "Model148": {
            "type": "object",
            "properties": {
                "courseCode": {
                    "type": "string",
                    "maxLength": 20
                },
                "courseName": {
                    "type": "string",
                    "maxLength": 200
                },
                "creditHours": {
                    "type": "number",
                    "x-constraint": {
                        "precision": 2,
                        "sign": "positive"
                    }
                },
                "grade": {
                    "$ref": "#/definitions/grade"
                },
                "gradePoints": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 4,
                    "x-constraint": {
                        "precision": 2
                    }
                },
                "semester": {
                    "$ref": "#/definitions/Model147"
                },
                "teacherName": {
                    "type": "string",
                    "maxLength": 100
                },
                "isHonors": {
                    "type": "boolean",
                    "default": false
                },
                "isAP": {
                    "type": "boolean",
                    "default": false
                },
                "isDualEnrollment": {
                    "type": "boolean",
                    "default": false
                }
            },
            "required": [
                "courseCode",
                "courseName",
                "creditHours",
                "grade",
                "gradePoints",
                "semester"
            ]
        },
        "Model149": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/Model148"
            }
        },
        "gpa": {
            "type": "object",
            "properties": {
                "cumulative": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 4,
                    "x-constraint": {
                        "precision": 3
                    }
                },
                "weighted": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 5,
                    "x-constraint": {
                        "precision": 3
                    }
                },
                "unweighted": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 4,
                    "x-constraint": {
                        "precision": 3
                    }
                },
                "classRank": {
                    "type": "number",
                    "x-constraint": {
                        "sign": "positive"
                    }
                },
                "classSize": {
                    "type": "number",
                    "x-constraint": {
                        "sign": "positive"
                    }
                }
            },
            "required": [
                "cumulative"
            ]
        },
        "attendanceRecord": {
            "type": "object",
            "properties": {
                "daysPresent": {
                    "type": "number",
                    "minimum": 0
                },
                "daysAbsent": {
                    "type": "number",
                    "minimum": 0
                },
                "daysExcused": {
                    "type": "number",
                    "minimum": 0
                },
                "tardies": {
                    "type": "number",
                    "minimum": 0
                }
            },
            "required": [
                "daysPresent",
                "daysAbsent"
            ]
        },
        "testName": {
            "type": "string",
            "enum": [
                "SAT",
                "ACT",
                "PSAT",
                "AP",
                "State-Test",
                "Other"
            ]
        },
        "Model150": {
            "type": "object",
            "properties": {
                "testName": {
                    "$ref": "#/definitions/testName"
                },
                "subject": {
                    "type": "string",
                    "maxLength": 100
                },
                "score": {
                    "type": "number"
                },
                "maxScore": {
                    "type": "number"
                },
                "percentile": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 100
                },
                "testDate": {
                    "type": "string",
                    "format": "date"
                }
            },
            "required": [
                "testName",
                "score",
                "maxScore",
                "testDate"
            ]
        },
        "testScores": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Model150"
            }
        },
        "verificationDocuments": {
            "type": "array",
            "description": "Base64 encoded verification documents (transcripts, report cards)",
            "maxItems": 5,
            "items": {
                "type": "string"
            }
        },
        "Model151": {
            "type": "object",
            "properties": {
                "schoolYear": {
                    "type": "string",
                    "description": "Academic year in format YYYY-YYYY (e.g., 2023-2024)",
                    "pattern": "^\\d{4}-\\d{4}$"
                },
                "semester": {
                    "$ref": "#/definitions/semester"
                },
                "transcriptSource": {
                    "$ref": "#/definitions/transcriptSource"
                },
                "previousSchool": {
                    "$ref": "#/definitions/previousSchool"
                },
                "grades": {
                    "$ref": "#/definitions/Model149"
                },
                "gpa": {
                    "$ref": "#/definitions/gpa"
                },
                "attendanceRecord": {
                    "$ref": "#/definitions/attendanceRecord"
                },
                "testScores": {
                    "$ref": "#/definitions/testScores"
                },
                "verificationDocuments": {
                    "$ref": "#/definitions/verificationDocuments"
                }
            },
            "required": [
                "schoolYear",
                "transcriptSource",
                "previousSchool",
                "grades",
                "gpa"
            ]
        },
        "Model152": {
            "type": "string",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model153": {
            "type": "string",
            "description": "Can only manually set to SCHEDULED or RESCHEDULED",
            "enum": [
                "SCHEDULED",
                "RESCHEDULED"
            ]
        },
        "Model154": {
            "type": "object",
            "properties": {
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "duration": {
                    "type": "integer",
                    "minimum": 15,
                    "maximum": 120
                },
                "type": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model152"
                },
                "status": {
                    "$ref": "#/definitions/Model153"
                }
            }
        },
        "Model155": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20
                },
                "type": {
                    "$ref": "#/definitions/type"
                },
                "organization": {
                    "type": "string",
                    "maxLength": 200
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                },
                "address": {
                    "type": "string",
                    "maxLength": 255
                },
                "city": {
                    "type": "string",
                    "maxLength": 100
                },
                "state": {
                    "type": "string",
                    "maxLength": 50
                },
                "zip": {
                    "type": "string",
                    "maxLength": 20
                },
                "relationTo": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "relationshipType": {
                    "type": "string",
                    "maxLength": 50
                },
                "customFields": {
                    "$ref": "#/definitions/customFields"
                },
                "isActive": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                }
            }
        },
        "Model156": {
            "type": "string",
            "description": "Document status",
            "enum": [
                "DRAFT",
                "PENDING",
                "APPROVED",
                "REJECTED",
                "ARCHIVED",
                "EXPIRED"
            ]
        },
        "Model157": {
            "type": "array",
            "description": "Document tags",
            "maxItems": 20,
            "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "x-convert": {
                    "trim": true
                }
            }
        },
        "Model158": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Document title",
                    "minLength": 3,
                    "maxLength": 300,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Document description",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "status": {
                    "$ref": "#/definitions/Model156"
                },
                "tags": {
                    "$ref": "#/definitions/Model157"
                },
                "retentionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Document retention/expiration date"
                },
                "accessLevel": {
                    "$ref": "#/definitions/accessLevel"
                }
            }
        },
        "Model159": {
            "type": "string",
            "enum": [
                "PRIMARY",
                "SECONDARY",
                "EMERGENCY_ONLY"
            ]
        },
        "Model160": {
            "type": "string",
            "enum": [
                "SMS",
                "EMAIL",
                "VOICE",
                "ANY"
            ]
        },
        "verificationStatus": {
            "type": "string",
            "enum": [
                "UNVERIFIED",
                "PENDING",
                "VERIFIED",
                "FAILED"
            ]
        },
        "Model161": {
            "type": "string",
            "enum": [
                "sms",
                "email",
                "voice"
            ]
        },
        "Model162": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Model161"
            }
        },
        "Model163": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "relationship": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "phoneNumber": {
                    "type": "string",
                    "pattern": "^[\\d\\s\\-().+]+$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                },
                "address": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model159"
                },
                "isActive": {
                    "type": "boolean"
                },
                "preferredContactMethod": {
                    "$ref": "#/definitions/Model160"
                },
                "verificationStatus": {
                    "$ref": "#/definitions/verificationStatus"
                },
                "notificationChannels": {
                    "$ref": "#/definitions/Model162"
                },
                "canPickupStudent": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "Model164": {
            "type": "string",
            "enum": [
                "CHECKUP",
                "VACCINATION",
                "ILLNESS",
                "INJURY",
                "SCREENING",
                "PHYSICAL_EXAM",
                "MENTAL_HEALTH",
                "DENTAL",
                "VISION",
                "HEARING"
            ]
        },
        "Model165": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/Model164"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "vital": {
                    "$ref": "#/definitions/vital"
                },
                "provider": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "attachments": {
                    "$ref": "#/definitions/attachments"
                }
            }
        },
        "Model166": {
            "type": "string",
            "description": "Incident type",
            "enum": [
                "INJURY",
                "ILLNESS",
                "BEHAVIORAL",
                "MEDICATION_ERROR",
                "ALLERGIC_REACTION",
                "EMERGENCY",
                "OTHER"
            ]
        },
        "Model167": {
            "type": "string",
            "description": "Incident status",
            "enum": [
                "REPORTED",
                "UNDER_REVIEW",
                "FOLLOW_UP_REQUIRED",
                "RESOLVED",
                "ARCHIVED"
            ]
        },
        "Model168": {
            "type": "array",
            "description": "Attachment URLs",
            "items": {
                "type": "string",
                "x-format": {
                    "uri": true
                }
            }
        },
        "Model169": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/Model166"
                },
                "severity": {
                    "$ref": "#/definitions/severity"
                },
                "status": {
                    "$ref": "#/definitions/Model167"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed incident description",
                    "minLength": 10,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Location where incident occurred",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "actionsTaken": {
                    "type": "string",
                    "description": "Immediate actions taken",
                    "minLength": 5,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "occurredAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the incident occurred"
                },
                "witnesses": {
                    "$ref": "#/definitions/witnesses"
                },
                "parentNotified": {
                    "type": "boolean",
                    "description": "Parent notification status"
                },
                "parentNotificationMethod": {
                    "$ref": "#/definitions/parentNotificationMethod"
                },
                "followUpRequired": {
                    "type": "boolean",
                    "description": "Whether follow-up is required"
                },
                "followUpNotes": {
                    "type": "string",
                    "description": "Follow-up notes",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "attachments": {
                    "$ref": "#/definitions/Model168"
                },
                "evidencePhotos": {
                    "$ref": "#/definitions/evidencePhotos"
                },
                "evidenceVideos": {
                    "$ref": "#/definitions/evidenceVideos"
                },
                "insuranceClaimNumber": {
                    "type": "string",
                    "description": "Insurance claim number",
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "insuranceClaimStatus": {
                    "$ref": "#/definitions/insuranceClaimStatus"
                },
                "legalComplianceStatus": {
                    "$ref": "#/definitions/legalComplianceStatus"
                }
            }
        },
        "Model170": {
            "type": "string",
            "enum": [
                "Male",
                "Female",
                "Other",
                "Prefer not to say"
            ]
        },
        "Model171": {
            "type": "string",
            "enum": [
                "A+",
                "A-",
                "B+",
                "B-",
                "AB+",
                "AB-",
                "O+",
                "O-"
            ]
        },
        "Model172": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "relationship": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "x-format": {
                        "email": true
                    }
                }
            },
            "required": [
                "name",
                "relationship",
                "phone"
            ]
        },
        "Model173": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "dateOfBirth": {
                    "type": "string",
                    "format": "date-time"
                },
                "grade": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "studentId": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "gender": {
                    "$ref": "#/definitions/Model170"
                },
                "bloodType": {
                    "$ref": "#/definitions/Model171"
                },
                "primaryContact": {
                    "$ref": "#/definitions/Model172"
                },
                "schoolId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "nurseId": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                },
                "isActive": {
                    "type": "boolean"
                }
            }
        },
        "Model174": {
            "type": "object",
            "description": "System configuration settings as key-value pairs",
            "example": {
                "smtp.host": "smtp.example.com",
                "smtp.port": 587,
                "session.timeout": 3600,
                "security.mfaRequired": true
            }
        },
        "Model175": {
            "type": "object",
            "properties": {
                "settings": {
                    "$ref": "#/definitions/Model174"
                }
            },
            "required": [
                "settings"
            ]
        },
        "Model176": {
            "type": "string",
            "description": "Feature flag identifier",
            "enum": [
                "MEDICATION_MANAGEMENT",
                "INCIDENT_REPORTING",
                "PARENT_PORTAL",
                "MOBILE_APP",
                "ANALYTICS_DASHBOARD",
                "INTEGRATION_SIS",
                "AUTOMATED_NOTIFICATIONS"
            ]
        },
        "features": {
            "type": "array",
            "description": "Array of feature flags to enable",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/Model176"
            }
        },
        "Model177": {
            "type": "object",
            "properties": {
                "features": {
                    "$ref": "#/definitions/features"
                }
            },
            "required": [
                "features"
            ]
        },
        "Model178": {
            "type": "string",
            "description": "User role (admin only)",
            "enum": [
                "ADMIN",
                "NURSE",
                "SCHOOL_ADMIN",
                "DISTRICT_ADMIN",
                "COUNSELOR",
                "VIEWER"
            ]
        },
        "Model179": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email address",
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "case": "lower",
                        "trim": true
                    }
                },
                "firstName": {
                    "type": "string",
                    "description": "First name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name",
                    "minLength": 1,
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "role": {
                    "$ref": "#/definitions/Model178"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Active status (admin only)"
                }
            }
        },
        "Model180": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Role name",
                    "minLength": 2,
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Role description",
                    "maxLength": 255,
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "Model181": {
            "type": "string",
            "description": "Security incident status",
            "enum": [
                "OPEN",
                "INVESTIGATING",
                "RESOLVED",
                "CLOSED",
                "FALSE_POSITIVE"
            ]
        },
        "Model182": {
            "type": "string",
            "description": "Security incident severity",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
            ]
        },
        "Model183": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/Model181"
                },
                "severity": {
                    "$ref": "#/definitions/Model182"
                },
                "description": {
                    "type": "string",
                    "description": "Updated incident description",
                    "minLength": 10,
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Investigation notes",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "resolvedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Resolution timestamp"
                },
                "resolvedBy": {
                    "type": "string",
                    "description": "User who resolved the incident",
                    "x-format": {
                        "guid": true
                    }
                }
            }
        },
        "Model184": {
            "type": "string",
            "description": "Updated message priority",
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "URGENT"
            ]
        },
        "Model185": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "x-format": {
                        "uri": true
                    }
                },
                "mimeType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "maximum": 10485760,
                    "x-constraint": {
                        "sign": "positive"
                    }
                }
            },
            "required": [
                "filename",
                "url",
                "mimeType",
                "size"
            ]
        },
        "Model186": {
            "type": "array",
            "description": "Updated message attachments",
            "maxItems": 5,
            "items": {
                "$ref": "#/definitions/Model185"
            }
        },
        "Model187": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "description": "Updated message subject",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Updated message content",
                    "minLength": 1,
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "priority": {
                    "$ref": "#/definitions/Model184"
                },
                "scheduledAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated scheduled delivery time"
                },
                "attachments": {
                    "$ref": "#/definitions/Model186"
                }
            }
        },
        "Model188": {
            "type": "string",
            "description": "Update checklist item status",
            "enum": [
                "PENDING",
                "IN_PROGRESS",
                "COMPLETED",
                "NOT_APPLICABLE",
                "FAILED"
            ]
        },
        "Model189": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/Model188"
                },
                "evidence": {
                    "type": "string",
                    "description": "Evidence of compliance",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "completedBy": {
                    "type": "string",
                    "description": "User who completed the item",
                    "x-format": {
                        "guid": true
                    }
                }
            }
        },
        "Model190": {
            "type": "string",
            "description": "Update policy status",
            "enum": [
                "DRAFT",
                "ACTIVE",
                "ARCHIVED",
                "SUPERSEDED"
            ]
        },
        "Model191": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/Model190"
                },
                "approvedBy": {
                    "type": "string",
                    "description": "User who approved the policy",
                    "x-format": {
                        "guid": true
                    }
                },
                "reviewDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Next review date"
                }
            }
        },
        "Model192": {
            "type": "string",
            "description": "Update compliance status",
            "enum": [
                "PENDING",
                "IN_PROGRESS",
                "COMPLIANT",
                "NON_COMPLIANT",
                "NEEDS_REVIEW"
            ]
        },
        "findings": {
            "type": "object",
            "description": "Compliance findings"
        },
        "Model193": {
            "type": "array",
            "description": "Compliance recommendations",
            "items": {
                "type": "string"
            }
        },
        "Model194": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/Model192"
                },
                "findings": {
                    "$ref": "#/definitions/findings"
                },
                "recommendations": {
                    "$ref": "#/definitions/Model193"
                },
                "submittedBy": {
                    "type": "string",
                    "description": "User who submitted the report",
                    "x-format": {
                        "guid": true
                    }
                },
                "reviewedBy": {
                    "type": "string",
                    "description": "User who reviewed the report",
                    "x-format": {
                        "guid": true
                    }
                }
            }
        },
        "Model195": {
            "type": "string",
            "enum": [
                "MILD",
                "MODERATE",
                "SEVERE",
                "LIFE_THREATENING"
            ]
        },
        "Model196": {
            "type": "object",
            "properties": {
                "allergen": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "severity": {
                    "$ref": "#/definitions/Model195"
                },
                "reaction": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "treatment": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "verified": {
                    "type": "boolean"
                },
                "verifiedBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "Model197": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "CONTROLLED",
                "IN_REMISSION",
                "CURED"
            ]
        },
        "Model198": {
            "type": "string",
            "enum": [
                "MILD",
                "MODERATE",
                "SEVERE",
                "CRITICAL"
            ]
        },
        "Model199": {
            "type": "object",
            "properties": {
                "condition": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "diagnosisDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "$ref": "#/definitions/Model197"
                },
                "severity": {
                    "$ref": "#/definitions/Model198"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "carePlan": {
                    "type": "string",
                    "maxLength": 5000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "medications": {
                    "$ref": "#/definitions/medications"
                },
                "restrictions": {
                    "$ref": "#/definitions/restrictions"
                },
                "triggers": {
                    "$ref": "#/definitions/triggers"
                },
                "diagnosedBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "lastReviewDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "nextReviewDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "icdCode": {
                    "type": "string",
                    "pattern": "^[A-Z]\\d{2}",
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "Model200": {
            "type": "object",
            "properties": {
                "vaccineName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "administrationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "administeredBy": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "cvxCode": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "ndcCode": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "lotNumber": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "manufacturer": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "doseNumber": {
                    "type": "integer",
                    "minimum": 1
                },
                "totalDoses": {
                    "type": "integer",
                    "minimum": 1
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "nextDueDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "site": {
                    "$ref": "#/definitions/site"
                },
                "route": {
                    "$ref": "#/definitions/route"
                },
                "dosageAmount": {
                    "type": "string",
                    "x-convert": {
                        "trim": true
                    }
                },
                "reactions": {
                    "type": "string",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "Model201": {
            "type": "string",
            "description": "Item category",
            "enum": [
                "MEDICATION",
                "MEDICAL_SUPPLY",
                "EQUIPMENT",
                "FIRST_AID",
                "OFFICE_SUPPLY",
                "PPE",
                "OTHER"
            ]
        },
        "Model202": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Item name (1-200 characters)",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "category": {
                    "$ref": "#/definitions/Model201"
                },
                "description": {
                    "type": "string",
                    "description": "Item description",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "sku": {
                    "type": "string",
                    "description": "SKU / Product Code",
                    "maxLength": 100,
                    "x-convert": {
                        "trim": true
                    }
                },
                "supplier": {
                    "type": "string",
                    "description": "Supplier name",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "unitCost": {
                    "type": "number",
                    "description": "Cost per unit",
                    "minimum": 0,
                    "maximum": 999999.99,
                    "x-constraint": {
                        "precision": 2
                    }
                },
                "reorderLevel": {
                    "type": "integer",
                    "description": "Reorder trigger level",
                    "minimum": 0,
                    "maximum": 1000000
                },
                "reorderQuantity": {
                    "type": "integer",
                    "description": "Reorder quantity",
                    "minimum": 1,
                    "maximum": 1000000
                },
                "location": {
                    "type": "string",
                    "description": "Storage location",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Notes",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Active status (false = archived)"
                }
            }
        },
        "Model203": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Vendor/supplier name",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "contactName": {
                    "type": "string",
                    "description": "Contact person name",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "email": {
                    "type": "string",
                    "description": "Contact email",
                    "maxLength": 200,
                    "x-format": {
                        "email": true
                    },
                    "x-convert": {
                        "trim": true
                    }
                },
                "phone": {
                    "type": "string",
                    "description": "Contact phone",
                    "maxLength": 50,
                    "pattern": "^[\\d\\s\\-\\(\\)\\+\\.ext]+$",
                    "x-convert": {
                        "trim": true
                    }
                },
                "address": {
                    "type": "string",
                    "description": "Address",
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "website": {
                    "type": "string",
                    "description": "Website URL",
                    "maxLength": 200,
                    "x-format": {
                        "uri": true
                    },
                    "x-convert": {
                        "trim": true
                    }
                },
                "taxId": {
                    "type": "string",
                    "description": "Tax ID",
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "paymentTerms": {
                    "type": "string",
                    "description": "Payment terms",
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "notes": {
                    "type": "string",
                    "description": "Notes",
                    "maxLength": 1000,
                    "x-convert": {
                        "trim": true
                    }
                },
                "rating": {
                    "type": "number",
                    "description": "Rating (1-5)",
                    "minimum": 1,
                    "maximum": 5
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Active status"
                }
            }
        },
        "adjustmentType": {
            "type": "string",
            "enum": [
                "CORRECTION",
                "DISPOSAL",
                "TRANSFER",
                "ADMINISTRATION",
                "EXPIRED",
                "LOST",
                "DAMAGED",
                "RETURNED"
            ]
        },
        "Model204": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100000
                },
                "reason": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "adjustmentType": {
                    "$ref": "#/definitions/adjustmentType"
                }
            },
            "required": [
                "quantity",
                "reason",
                "adjustmentType"
            ]
        },
        "Model205": {
            "type": "object",
            "description": "Integration-specific configuration settings"
        },
        "Model206": {
            "type": "string",
            "description": "Integration status",
            "enum": [
                "ACTIVE",
                "INACTIVE",
                "ERROR",
                "PENDING"
            ]
        },
        "Model207": {
            "type": "object",
            "description": "At least one field must be provided for update",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Integration name",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Integration API endpoint URL",
                    "maxLength": 500,
                    "x-format": {
                        "uri": true
                    }
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key for authentication",
                    "maxLength": 500
                },
                "username": {
                    "type": "string",
                    "description": "Username for authentication",
                    "maxLength": 200
                },
                "password": {
                    "type": "string",
                    "description": "Password for authentication (will be encrypted)",
                    "maxLength": 500
                },
                "clientId": {
                    "type": "string",
                    "description": "OAuth client ID",
                    "maxLength": 200
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth client secret (will be encrypted)",
                    "maxLength": 500
                },
                "settings": {
                    "$ref": "#/definitions/Model205"
                },
                "syncFrequency": {
                    "type": "integer",
                    "description": "Sync frequency in minutes",
                    "minimum": 0
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the integration is active"
                },
                "status": {
                    "$ref": "#/definitions/Model206"
                }
            }
        },
        "Model208": {
            "type": "object",
            "description": "School-specific settings"
        },
        "Model209": {
            "type": "object",
            "description": "At least one field must be provided for update",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "School name",
                    "minLength": 1,
                    "maxLength": 200,
                    "x-convert": {
                        "trim": true
                    }
                },
                "code": {
                    "type": "string",
                    "description": "School code",
                    "minLength": 1,
                    "maxLength": 50,
                    "x-convert": {
                        "trim": true
                    }
                },
                "address": {
                    "type": "string",
                    "description": "School address",
                    "maxLength": 500
                },
                "phone": {
                    "type": "string",
                    "description": "School phone number",
                    "maxLength": 20,
                    "pattern": "^[\\d\\s\\-\\+\\(\\)]+$"
                },
                "email": {
                    "type": "string",
                    "description": "School email address",
                    "x-format": {
                        "email": true
                    }
                },
                "settings": {
                    "$ref": "#/definitions/Model208"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the school is active"
                }
            }
        },
        "Model210": {
            "type": "string",
            "description": "New order status",
            "enum": [
                "RECEIVED",
                "PARTIALLY_RECEIVED",
                "CANCELLED"
            ]
        },
        "Model211": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/Model210"
                },
                "receivedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date order was received (defaults to now if status is RECEIVED)"
                }
            },
            "required": [
                "status"
            ]
        },
        "deactivationType": {
            "type": "string",
            "enum": [
                "COMPLETED",
                "DISCONTINUED",
                "CHANGED",
                "ADVERSE_REACTION",
                "PATIENT_REQUEST",
                "PHYSICIAN_ORDER",
                "OTHER"
            ]
        },
        "Model212": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                },
                "deactivationType": {
                    "$ref": "#/definitions/deactivationType"
                }
            },
            "required": [
                "reason",
                "deactivationType"
            ]
        },
        "Model213": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for removal (optional)",
                    "minLength": 5,
                    "maxLength": 500,
                    "x-convert": {
                        "trim": true
                    }
                }
            }
        },
        "entityTypes": {
            "type": "array",
            "description": "Only archive specific entity types (optional)",
            "items": {
                "type": "string",
                "x-convert": {
                    "trim": true
                }
            }
        },
        "Model214": {
            "type": "object",
            "properties": {
                "olderThanDays": {
                    "type": "integer",
                    "description": "Archive logs older than X days (minimum 90 days for compliance)",
                    "minimum": 90,
                    "maximum": 3650
                },
                "entityTypes": {
                    "$ref": "#/definitions/entityTypes"
                },
                "dryRun": {
                    "type": "boolean",
                    "description": "Simulate archive without deleting (for testing)",
                    "default": false
                }
            },
            "required": [
                "olderThanDays"
            ]
        }
    }
}
