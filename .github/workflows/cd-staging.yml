name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip smoke tests'
        required: false
        default: 'false'

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_TIMEOUT: 600

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.whitecross.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend for staging
        run: cd frontend && npm run build
        env:
          VITE_API_URL: ${{ secrets.STAGING_API_URL }}
          VITE_ENV: staging

      - name: Build backend for staging
        run: cd backend && npm run build

      - name: Run database migrations
        run: |
          cd backend
          npx sequelize-cli db:migrate
        env:
          NODE_ENV: staging
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          DB_SSL: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to S3
        run: |
          aws s3 sync frontend/dist s3://${{ secrets.STAGING_S3_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} --paths "/*"

      - name: Deploy backend to ECS/Fargate
        run: |
          # Update ECS task definition
          aws ecs update-service \
            --cluster ${{ secrets.STAGING_ECS_CLUSTER }} \
            --service ${{ secrets.STAGING_ECS_SERVICE }} \
            --force-new-deployment \
            --desired-count 2

      - name: Wait for deployment to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.STAGING_ECS_CLUSTER }} \
            --services ${{ secrets.STAGING_ECS_SERVICE }}
        timeout-minutes: 10

      - name: Health check
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s https://staging.whitecross.example.com/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $((attempt+1))/$max_attempts failed, retrying..."
            sleep 10
            attempt=$((attempt+1))
          done
          echo "Health check failed after $max_attempts attempts"
          exit 1

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.skip_tests != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run smoke tests
        run: cd frontend && npm run test:smoke
        env:
          CYPRESS_BASE_URL: https://staging.whitecross.example.com
          CYPRESS_API_URL: ${{ secrets.STAGING_API_URL }}
          CYPRESS_TEST_USER: ${{ secrets.STAGING_TEST_USER }}
          CYPRESS_TEST_PASSWORD: ${{ secrets.STAGING_TEST_PASSWORD }}

      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: frontend/cypress/results

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.whitecross.example.com
            https://staging.whitecross.example.com/dashboard
            https://staging.whitecross.example.com/students
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run k6 load tests
        run: |
          docker run --rm -i grafana/k6 run - < scripts/load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          BASE_URL: https://staging.whitecross.example.com

      - name: Check performance budgets
        run: |
          # Add custom performance budget checks
          echo "Checking performance metrics..."

  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.whitecross.example.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run security headers check
        run: |
          curl -I https://staging.whitecross.example.com | grep -E "Strict-Transport-Security|X-Frame-Options|X-Content-Type-Options|Content-Security-Policy"

      - name: Verify SSL configuration
        run: |
          docker run --rm nmap/nmap --script ssl-enum-ciphers -p 443 staging.whitecross.example.com

  hipaa-validation:
    name: HIPAA Compliance Validation
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Verify encryption in transit
        run: |
          if ! curl -I https://staging.whitecross.example.com | grep -q "Strict-Transport-Security"; then
            echo "Error: HSTS header not found"
            exit 1
          fi

      - name: Verify audit logging
        run: |
          # Call health check endpoint to verify audit logs are being created
          curl -X GET https://staging.whitecross.example.com/api/v1/health/audit-status \
            -H "Authorization: Bearer ${{ secrets.STAGING_ADMIN_TOKEN }}"

      - name: Check access controls
        run: |
          # Verify RBAC is working
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.whitecross.example.com/api/v1/admin/users)
          if [ "$response" != "401" ]; then
            echo "Error: Unauthenticated access allowed to protected endpoint"
            exit 1
          fi

  notify-staging:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-tests, security-validation, hipaa-validation]
    if: always()

    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]] && \
             [[ "${{ needs.smoke-tests.result }}" == "success" || "${{ needs.smoke-tests.result }}" == "skipped" ]] && \
             [[ "${{ needs.performance-tests.result }}" == "success" ]] && \
             [[ "${{ needs.security-validation.result }}" == "success" ]] && \
             [[ "${{ needs.hipaa-validation.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "Staging Deployment ${{ steps.status.outputs.status == 'success' && 'Successful' || 'Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment ${{ steps.status.outputs.status == 'success' && ':rocket:' || ':x:' }}*\n*Environment:* Staging\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Deployed by:* ${{ github.actor }}\n*URL:* https://staging.whitecross.example.com"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Validation Results:*\n• Deployment: ${{ needs.deploy-staging.result }}\n• Smoke Tests: ${{ needs.smoke-tests.result }}\n• Performance: ${{ needs.performance-tests.result }}\n• Security: ${{ needs.security-validation.result }}\n• HIPAA Compliance: ${{ needs.hipaa-validation.result }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Deployment"
                      },
                      "url": "https://staging.whitecross.example.com"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: steps.status.outputs.status == 'failure'
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[White Cross] Staging Deployment Failed"
          to: ${{ secrets.DEVOPS_EMAIL }}
          from: "White Cross CI/CD <noreply@whitecross.example.com>"
          body: |
            The staging deployment has failed.

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please review the workflow logs for more details.

  rollback-on-failure:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, security-validation, hipaa-validation]
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback ECS deployment
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ secrets.STAGING_ECS_CLUSTER }} \
            --services ${{ secrets.STAGING_ECS_SERVICE }} \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          # Rollback to previous version
          aws ecs update-service \
            --cluster ${{ secrets.STAGING_ECS_CLUSTER }} \
            --service ${{ secrets.STAGING_ECS_SERVICE }} \
            --task-definition $PREVIOUS_TASK_DEF \
            --force-new-deployment

      - name: Notify rollback
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": ":warning: Staging deployment automatically rolled back due to failures",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Automatic Rollback Executed :warning:*\n*Environment:* Staging\n*Reason:* Deployment validation failed\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
