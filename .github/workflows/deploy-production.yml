name: Production Deployment

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ---------------------------------------------------------------------------
  # Pre-deployment Checks
  # ---------------------------------------------------------------------------
  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment environment
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Check commit message for skip deployment
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "\[skip deploy\]"; then
            echo "Deployment skipped due to [skip deploy] in commit message"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # ---------------------------------------------------------------------------
  # Security Scanning
  # ---------------------------------------------------------------------------
  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd nextjs
          npm ci

      - name: Run npm audit
        run: |
          cd nextjs
          npm audit --audit-level=critical --production

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --fail

  # ---------------------------------------------------------------------------
  # Lint and Type Check
  # ---------------------------------------------------------------------------
  lint-and-typecheck:
    name: Lint & Type Validation
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd nextjs
          npm ci

      - name: Run ESLint
        run: |
          cd nextjs
          npm run lint

      - name: TypeScript type check
        run: |
          cd nextjs
          npx tsc --noEmit

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" nextjs/src --exclude-dir=node_modules --exclude="*.test.*" --exclude="*.spec.*"; then
            echo "Error: console.log found in production code"
            exit 1
          fi

  # ---------------------------------------------------------------------------
  # Unit Tests
  # ---------------------------------------------------------------------------
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd nextjs
          npm ci

      - name: Run unit tests with coverage
        run: |
          cd nextjs
          npm test -- --coverage --run

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./nextjs/coverage/coverage-final.json
          flags: nextjs
          name: nextjs-coverage

      - name: Check coverage threshold
        run: |
          cd nextjs
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "Coverage: $COVERAGE%"
            if (( $(echo "$COVERAGE < 80" | bc -l) )); then
              echo "Coverage $COVERAGE% is below threshold 80%"
              exit 1
            fi
          fi

  # ---------------------------------------------------------------------------
  # E2E Tests
  # ---------------------------------------------------------------------------
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: white_cross_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup backend database
        run: |
          cd backend
          npx sequelize-cli db:migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          PORT: 3001
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_secret_key_for_ci

      - name: Wait for backend
        run: npx wait-on http://localhost:3001/health -t 60000

      - name: Install Playwright browsers
        run: |
          cd nextjs
          npx playwright install --with-deps chromium

      - name: Build Next.js
        run: |
          cd nextjs
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Run Playwright E2E tests
        run: |
          cd nextjs
          npm run test:e2e
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: nextjs/playwright-report/
          retention-days: 30

  # ---------------------------------------------------------------------------
  # Build Docker Images
  # ---------------------------------------------------------------------------
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-typecheck, unit-tests, e2e-tests]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nextjs
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Next.js Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./nextjs
          file: ./nextjs/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nextjs:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nextjs:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_ENVIRONMENT=${{ needs.pre-deployment-checks.outputs.environment }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.SENTRY_DSN }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # ---------------------------------------------------------------------------
  # Deploy to Production
  # ---------------------------------------------------------------------------
  deploy:
    name: Deploy to ${{ needs.pre-deployment-checks.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-images]
    environment:
      name: ${{ needs.pre-deployment-checks.outputs.environment }}
      url: ${{ needs.pre-deployment-checks.outputs.environment == 'production' && 'https://whitecross.yourdomain.com' || 'https://staging.whitecross.yourdomain.com' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd /opt/white-cross

            # Pull latest code
            git pull origin master

            # Update environment variables
            cp .env.${{ needs.pre-deployment-checks.outputs.environment }} .env

            # Pull new Docker images
            docker-compose -f docker-compose.prod.yml pull

            # Run database migrations
            docker-compose -f docker-compose.prod.yml run --rm backend npx sequelize-cli db:migrate

            # Restart services with zero downtime
            docker-compose -f docker-compose.prod.yml up -d --no-deps --build nextjs

            # Health check
            sleep 10
            curl -f http://localhost:3000/api/health || exit 1

            # Clean up old images
            docker image prune -f

      - name: Verify deployment
        run: |
          DEPLOY_URL="${{ needs.pre-deployment-checks.outputs.environment == 'production' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}"

          # Wait for deployment
          sleep 30

          # Check health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL/api/health")

          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "Health check failed with status: $HEALTH_STATUS"
            exit 1
          fi

          echo "Deployment successful! Health check passed."

  # ---------------------------------------------------------------------------
  # Post-Deployment Validation
  # ---------------------------------------------------------------------------
  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy]
    steps:
      - name: Run smoke tests
        run: |
          DEPLOY_URL="${{ needs.pre-deployment-checks.outputs.environment == 'production' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}"

          # Test critical endpoints
          curl -f "$DEPLOY_URL/api/health" || exit 1
          curl -f "$DEPLOY_URL/" || exit 1

      - name: Notify Sentry of deployment
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: white-cross
        with:
          environment: ${{ needs.pre-deployment-checks.outputs.environment }}
          version: ${{ github.sha }}

      - name: Create deployment record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ needs.pre-deployment-checks.outputs.environment }}
          deployment-status: success

  # ---------------------------------------------------------------------------
  # Notifications
  # ---------------------------------------------------------------------------
  notify:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy, post-deployment]
    if: always()
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]] && [[ "${{ needs.post-deployment.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=:white_check_mark:" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=:x:" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "Deployment to ${{ needs.pre-deployment-checks.outputs.environment }} ${{ steps.status.outputs.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment ${{ steps.status.outputs.emoji }}*\n*Environment:* ${{ needs.pre-deployment-checks.outputs.environment }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '[ALERT] Deployment Failed - ${{ needs.pre-deployment-checks.outputs.environment }}'
          to: ${{ secrets.ALERT_EMAIL }}
          from: White Cross CI/CD <noreply@whitecross.com>
          body: |
            Deployment to ${{ needs.pre-deployment-checks.outputs.environment }} has failed.

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
