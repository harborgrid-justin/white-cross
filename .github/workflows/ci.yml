name: Continuous Integration

on:
  pull_request:
    branches: [master, develop]
  push:
    branches: [master, develop]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'
  COVERAGE_THRESHOLD: 80

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high --production
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint backend
        run: cd backend && npm run lint

      - name: Lint frontend
        run: cd frontend && npm run lint

      - name: TypeScript check backend
        run: cd backend && npx tsc --noEmit

      - name: TypeScript check frontend
        run: cd frontend && npx tsc --noEmit

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" frontend/src --exclude-dir=node_modules --exclude-dir=dist --exclude="*.test.*" --exclude="*.spec.*"; then
            echo "Error: console.log found in production code"
            exit 1
          fi

      - name: Check for uncommitted TODOs without tickets
        run: |
          if grep -r "TODO(?!.*#[0-9])" frontend/src backend/src --exclude-dir=node_modules; then
            echo "Error: TODOs must include ticket number (e.g., TODO: #123)"
            exit 1
          fi

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: white_cross_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: cd backend && npx sequelize-cli db:migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password

      - name: Run backend tests with coverage
        run: cd backend && npm test -- --coverage --maxWorkers=2
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_secret_key_for_ci

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage

      - name: Check backend coverage threshold
        run: |
          COVERAGE=$(cat backend/coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend unit tests with coverage
        run: cd frontend && npm run test:unit -- --coverage --run

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Check frontend coverage threshold
        run: |
          COVERAGE=$(cat frontend/coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: white_cross_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          cd backend
          npx sequelize-cli db:migrate
          npx sequelize-cli db:seed:all
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          PORT: 3001
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: white_cross_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_secret_key_for_ci

      - name: Wait for backend to be ready
        run: npx wait-on http://localhost:3001/health -t 60000

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm run preview
          wait-on: 'http://localhost:4173'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_API_URL: http://localhost:3001

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: cd backend && npm run build

      - name: Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: https://api-placeholder.example.com

      - name: Check bundle size
        run: |
          cd frontend
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # Add bundle size check logic here

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            frontend/dist
            backend/dist
          retention-days: 7

  hipaa-compliance:
    name: HIPAA Compliance Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for PHI in logs
        run: |
          if grep -r "password\|ssn\|social_security\|dob.*log\|patient_id.*log" backend/src --exclude-dir=node_modules; then
            echo "Error: Potential PHI logging detected"
            exit 1
          fi

      - name: Verify encryption config
        run: |
          if ! grep -q "encrypt.*true" backend/src/config/database.ts; then
            echo "Warning: Database encryption should be enabled"
          fi

      - name: Check audit logging
        run: |
          if ! grep -q "auditLog" backend/src/middleware; then
            echo "Error: Audit logging middleware not found"
            exit 1
          fi

      - name: Verify authentication middleware
        run: |
          if ! grep -q "authenticateToken" backend/src/middleware; then
            echo "Error: Authentication middleware not found"
            exit 1
          fi

      - name: Check RBAC implementation
        run: |
          if ! grep -q "checkPermission\|authorize" backend/src/middleware; then
            echo "Error: RBAC middleware not found"
            exit 1
          fi

  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run accessibility tests
        run: cd frontend && npm run test:a11y
        continue-on-error: true

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4173
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test-backend, test-frontend, test-e2e, build, hipaa-compliance]
    if: always()
    steps:
      - name: Check job status
        id: check
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test-backend.result }}" == "failure" ]] || \
             [[ "${{ needs.test-frontend.result }}" == "failure" ]] || \
             [[ "${{ needs.test-e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.hipaa-compliance.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "CI Pipeline ${{ steps.check.outputs.status }} for ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*CI Pipeline ${{ steps.check.outputs.status == 'success' && ':white_check_mark:' || ':x:' }}*\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Job Results:*\n• Security Scan: ${{ needs.security-scan.result }}\n• Lint: ${{ needs.lint.result }}\n• Backend Tests: ${{ needs.test-backend.result }}\n• Frontend Tests: ${{ needs.test-frontend.result }}\n• E2E Tests: ${{ needs.test-e2e.result }}\n• Build: ${{ needs.build.result }}\n• HIPAA Compliance: ${{ needs.hipaa-compliance.result }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
