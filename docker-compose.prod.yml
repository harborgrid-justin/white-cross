# =============================================================================
# White Cross Healthcare Platform - Production Docker Compose
# Optimized for production deployment with health checks and security
# =============================================================================

version: '3.9'

services:
  # ---------------------------------------------------------------------------
  # PostgreSQL Database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: white-cross-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-white_cross}
      POSTGRES_USER: ${DB_USER:-white_cross_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-white_cross_user} -d ${DB_NAME:-white_cross}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - white-cross-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ---------------------------------------------------------------------------
  # Redis Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: white-cross-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:?Redis password required} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - white-cross-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ---------------------------------------------------------------------------
  # Backend API
  # ---------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.new
      target: production
      args:
        NODE_ENV: production
    image: white-cross-backend:${VERSION:-latest}
    container_name: white-cross-backend-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      HOST: 0.0.0.0

      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-white_cross}
      DB_USERNAME: ${DB_USER:-white_cross_user}
      DB_PASSWORD: ${DB_PASSWORD:?Database password required}
      DB_DIALECT: postgres
      DB_SSL: ${DB_SSL:-false}
      DB_LOGGING: false
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:?Redis password required}
      REDIS_TTL: 3600

      # Security
      JWT_SECRET: ${JWT_SECRET:?JWT secret required}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?JWT refresh secret required}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      SESSION_SECRET: ${SESSION_SECRET:?Session secret required}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: logs/app.log

      # Features
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-false}
      ENABLE_HEALTH_CHECK: true
      ENABLE_METRICS: true

      # Email (Optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@whitecross.com}

      # Monitoring (Optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
    ports:
      - "${PORT:-3001}:3001"
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - white-cross-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ---------------------------------------------------------------------------
  # Next.js Application
  # ---------------------------------------------------------------------------
  nextjs:
    build:
      context: ./nextjs
      dockerfile: Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3001}
        NEXT_PUBLIC_ENVIRONMENT: production
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}
        NEXT_PUBLIC_ENABLE_ANALYTICS: ${NEXT_PUBLIC_ENABLE_ANALYTICS:-true}
    image: white-cross-nextjs:${VERSION:-latest}
    container_name: white-cross-nextjs-prod
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3001}
      NEXT_PUBLIC_ENVIRONMENT: production
      PORT: 3000
    ports:
      - "${NEXTJS_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - white-cross-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: white-cross-postgres-data-prod
  redis_data:
    driver: local
    name: white-cross-redis-data-prod
  backend_logs:
    driver: local
    name: white-cross-backend-logs-prod

# =============================================================================
# Networks
# =============================================================================
networks:
  white-cross-network:
    driver: bridge
    name: white-cross-network-prod
    ipam:
      config:
        - subnet: 172.28.0.0/16
